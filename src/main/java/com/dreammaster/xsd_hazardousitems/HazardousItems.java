//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.18 at 01:34:59 PM CEST 
//


package com.dreammaster.xsd_hazardousitems;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyElement;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import net.minecraft.item.ItemStack;
 
@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name = "HazardousItemList")
public class HazardousItems {
 
    @XmlElement(name = "Item")
    protected List<HazardousItems.HazardousItem> hazardousItem;
 
    public List<HazardousItems.HazardousItem> getHazardousItems() {
        if (hazardousItem == null)
                hazardousItem = new ArrayList<HazardousItems.HazardousItem>();
 
        return hazardousItem;
    }
    
    /** Find HazardousItem by exact Itemname (case sensitive)
     * @param pItemName
     * @return
     */
    public HazardousItem FindHazardousItemExact(String pItemName)
    {
    	for (HazardousItem hi : hazardousItem)
    	{
    		if (hi.unlocName.equals(pItemName))
    			return hi;
    	}
    	
    	return null;
    }

	/**
	 * Remove item from list
	 * @param pInHand
	 * @return
	 */
	public boolean RemoveItemExact(ItemStack pInHand, boolean pIncludeNonExact)
	{
		try
		{
			List<HazardousItems.HazardousItem> tNewList = new ArrayList<HazardousItems.HazardousItem>();
			
			for (HazardousItem hi : hazardousItem)
			{
	    		if(hi.exactMatch)
	    		{
	    			// Exact match
	        		if (hi.unlocName.equals(pInHand.getUnlocalizedName()))
	        			continue; // Dont read to new list
	    		}
	    		else
	    		{
	    			if (pIncludeNonExact) // Only if we include nonExact entries
	    			{
		    			// "contains" match
		        		String p1 = hi.unlocName.toLowerCase();
		        		String p2 = pInHand.getUnlocalizedName().toLowerCase();
	
		        		if (p2.contains(p1))
		        			continue;
	    			}
	    		}
				
				tNewList.add(hi); // ReAdd entry to new list, as it didn't match with above entries
			}
			
			hazardousItem = tNewList;
			return true;
		}
		catch (Exception e)
		{
			e.printStackTrace();
			return false;
		}
	}
    
    /**
     * Searches for HazardousItem by unlocalized name, where pSearchString is anywhere inside unlocalized name. Ex: lava would match bucketLava, tankLava, itemLavaGloves,... 
     * @param pSearchString
     * @return
     */
    public HazardousItem FindHazardousItemContains(String pSearchString, boolean pIgnoreCase)
    {
    	for (HazardousItem hi : hazardousItem)
    	{
    		String p1 = pIgnoreCase == true ? hi.unlocName.toLowerCase() : hi.unlocName;
    		String p2 = pIgnoreCase == true ? pSearchString.toLowerCase() : pSearchString;

    		if (p1.contains(p2))
    			return hi;
    	}
    	
    	return null;    	
    }
    
    /**
     * Find HazardousItem by using ItemStack reference
     * @param pItemStack
     * @return
     */
    public HazardousItem FindHazardousItem(ItemStack pItemStack)
    {
    	for (HazardousItem hi : hazardousItem)
    	{
    		if(hi.exactMatch)
    		{
    			// Exact match
        		if (hi.unlocName.equals(pItemStack.getUnlocalizedName()))
        			return hi;
    		}
    		else
    		{
    			// "contains" match
        		String p1 = hi.unlocName.toLowerCase();
        		String p2 = pItemStack.getUnlocalizedName().toLowerCase();

        		if (p2.contains(p1))
        			return hi;
    		}
    	}
    	
    	return null;
    }
    
    @XmlAccessorType(XmlAccessType.FIELD)  
    @XmlType
    public static class HazardousItem {
 
    	@XmlAttribute(name = "UnlocalizedName")
        public String unlocName;
        @XmlAttribute(name = "ExactNameMatch")
        protected boolean exactMatch;
       
        @XmlElement(name = "DamageEffect")
        protected List<HazardousItems.HazardousItem.ItmDamageEffect> damageEffect;
        @XmlElement(name = "PotionEffect")
        protected List<HazardousItems.HazardousItem.ItmPotionEffect> potionEffect;
 
 
 
        public String getUnlocName() {
            return unlocName;
        }
 
        public void setUnlocName(String value) {
            this.unlocName = value;
        }
 
        public boolean getExactMatch() {
            return exactMatch;
        }
 
        public void setExactMatch(boolean value) {
            this.exactMatch = value;
        }
 
        public List<HazardousItems.HazardousItem.ItmPotionEffect> getPotionEffects() {
            if (potionEffect == null) {
                potionEffect = new ArrayList<HazardousItems.HazardousItem.ItmPotionEffect>();
            }
            return this.potionEffect;
        }
 
        public List<HazardousItems.HazardousItem.ItmDamageEffect> getDamageEffects() {
            if (damageEffect == null) {
                damageEffect = new ArrayList<HazardousItems.HazardousItem.ItmDamageEffect>();
            }
            return this.damageEffect;
        }
   
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType
        public static class ItmDamageEffect {
 
            @XmlAttribute(name = "Source")
            protected String damageSource;
            @XmlAttribute(name = "Amount")
            protected Float amount;
 
            public String getDamageSource() {
                return damageSource;
            }
 
            public void setDamageSource(String value) {
                this.damageSource = value;
            }
 
            public Float getAmount() {
                return amount;
            }
 
            public void setAmount(Float value) {
                this.amount = value;
            }
 
        }
 
        @XmlAccessorType(XmlAccessType.FIELD)
        @XmlType
        public static class ItmPotionEffect {
 
            @XmlAttribute(name = "PotionID")
            protected Integer id;
            @XmlAttribute(name = "TickDuration")
            protected Integer duration;
            @XmlAttribute(name = "Level")
            protected Integer level;
 
            public Integer getId() {
                return id;
            }
 
            public void setId(Integer value) {
                this.id = value;
            }
 
            public Integer getDuration() {
                return duration;
            }
 
            public void setDuration(Integer value) {
                this.duration = value;
            }
 
            public Integer getLevel() {
                return level;
            }
 
            public void setLevel(Integer value) {
                this.level = value;
            }
        }
    }


}
