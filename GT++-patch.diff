From 93e0ff20a1439d01d6e225bf337009d09dd3dc9d Mon Sep 17 00:00:00 2001
From: Technus <daniel112092@gmail.com>
Date: Sun, 8 Oct 2017 14:40:18 +0200
Subject: [PATCH] Fix import statement...

---
 src/Java/gtPlusPlus/preloader/CORE_Preloader.java | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/Java/gtPlusPlus/preloader/CORE_Preloader.java b/src/Java/gtPlusPlus/preloader/CORE_Preloader.java
index c6d09ac..e79fc68 100644
--- a/src/Java/gtPlusPlus/preloader/CORE_Preloader.java
+++ b/src/Java/gtPlusPlus/preloader/CORE_Preloader.java
@@ -1,16 +1,16 @@
 package gtPlusPlus.preloader;
 
+import cpw.mods.fml.common.versioning.ArtifactVersion;
+
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 
-import cpw.mods.fml.common.versioning.ArtifactVersion;
-import scala.actors.threadpool.Arrays;
-
 public class CORE_Preloader {
 	public static final String NAME = "GT++ Preloader";
 	public static final String MODID = "GT++_Preloader";
 	public static final String VERSION = "0.1-Alpha";
 	public static boolean enableOldGTcircuits = false;
 	@SuppressWarnings("unchecked")
-	public static List<ArtifactVersion> DEPENDENCIES = new ArrayList<>(Arrays.asList(new String[] {"required-before:gregtech;"}));
+	public static List<ArtifactVersion> DEPENDENCIES = new ArrayList(Arrays.asList(new String[] {"required-before:gregtech;"}));
 }
-- 
1.9.5.msysgit.0

From e6cdf4a2ecb9151eaf1903475ad547e9bb21bfdb Mon Sep 17 00:00:00 2001
From: Technus <daniel112092@gmail.com>
Date: Sun, 8 Oct 2017 10:38:03 +0200
Subject: [PATCH] Revert Preloader oredic transformer fix cos imma lazy

---
 src/Java/gtPlusPlus/preloader/CORE_Preloader.java        |  9 ++++++---
 .../preloader/asm/Preloader_ClassTransformer.java        | 16 ++--------------
 .../preloader/asm/Preloader_DummyContainer.java          |  4 +---
 3 files changed, 9 insertions(+), 20 deletions(-)

diff --git a/src/Java/gtPlusPlus/preloader/CORE_Preloader.java b/src/Java/gtPlusPlus/preloader/CORE_Preloader.java
index 09ce810..c6d09ac 100644
--- a/src/Java/gtPlusPlus/preloader/CORE_Preloader.java
+++ b/src/Java/gtPlusPlus/preloader/CORE_Preloader.java
@@ -1,13 +1,16 @@
 package gtPlusPlus.preloader;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 
+import cpw.mods.fml.common.versioning.ArtifactVersion;
+import scala.actors.threadpool.Arrays;
+
 public class CORE_Preloader {
 	public static final String NAME = "GT++ Preloader";
 	public static final String MODID = "GT++_Preloader";
-	public static final String VERSION = "0.3-Alpha";
+	public static final String VERSION = "0.1-Alpha";
 	public static boolean enableOldGTcircuits = false;
-	public static List<?> DEPENDENCIES = new ArrayList<>(Arrays.asList(new String[] {"required-before:gregtech;"}));
+	@SuppressWarnings("unchecked")
+	public static List<ArtifactVersion> DEPENDENCIES = new ArrayList<>(Arrays.asList(new String[] {"required-before:gregtech;"}));
 }
diff --git a/src/Java/gtPlusPlus/preloader/asm/Preloader_ClassTransformer.java b/src/Java/gtPlusPlus/preloader/asm/Preloader_ClassTransformer.java
index f9b1a07..e3a022d 100644
--- a/src/Java/gtPlusPlus/preloader/asm/Preloader_ClassTransformer.java
+++ b/src/Java/gtPlusPlus/preloader/asm/Preloader_ClassTransformer.java
@@ -13,7 +13,7 @@ public class Preloader_ClassTransformer implements IClassTransformer {
 	@Override
     public byte[] transform(String name, String transformedName, byte[] basicClass) {
         if(transformedName.equals("net.minecraftforge.oredict.OreDictionary")) {
-            FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Transforming %s", transformedName);
+            FMLRelaunchLog.log("[GT++] OreDictTransformer", Level.INFO, "Transforming %s", transformedName);
             ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
             new ClassReader(basicClass).accept(new OreDictionaryVisitor(classWriter), 0);
             return classWriter.toByteArray();
@@ -31,20 +31,9 @@ private static final class OreDictionaryVisitor extends ClassVisitor {
         public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
             MethodVisitor methodVisitor = super.visitMethod(access, name, desc, signature, exceptions);
             if(name.equals("registerOreImpl") && desc.equals("(Ljava/lang/String;Lnet/minecraft/item/ItemStack;)V")) {
-                FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Found target method.");
+                FMLRelaunchLog.log("[GT++] OreDictTransformer", Level.INFO, "Found target method.");
                 return new RegisterOreImplVisitor(methodVisitor);
             }
-            else if(name.equals("registerOreImpl") && desc.equals("(Ljava/lang/String;Ladd;)V")) {
-                FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Found target method. [Obfuscated]");
-                return new RegisterOreImplVisitor(methodVisitor);
-            }
-            else {
-            	//FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Dd not find target method.");
-            	//FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Found: "+name);
-            	//FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, ""+desc);
-            	//FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, ""+signature);
-            	//FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, ""+exceptions);
-            }
             return methodVisitor;
         }
         
@@ -59,7 +48,6 @@ private static final class OreDictionaryVisitor extends ClassVisitor {
         @SuppressWarnings("deprecation")
 		@Override
         public void visitCode() {
-        	FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Fixing Forge's poor attempt at an oreDictionary.");
             super.visitCode();
             super.visitVarInsn(ALOAD, 0);
             super.visitVarInsn(ALOAD, 1);
diff --git a/src/Java/gtPlusPlus/preloader/asm/Preloader_DummyContainer.java b/src/Java/gtPlusPlus/preloader/asm/Preloader_DummyContainer.java
index a54abab..6aa78ec 100644
--- a/src/Java/gtPlusPlus/preloader/asm/Preloader_DummyContainer.java
+++ b/src/Java/gtPlusPlus/preloader/asm/Preloader_DummyContainer.java
@@ -2,7 +2,6 @@ package gtPlusPlus.preloader.asm;
 
 import java.io.File;
 import java.util.Arrays;
-import java.util.List;
 
 import com.google.common.eventbus.EventBus;
 import com.google.common.eventbus.Subscribe;
@@ -10,7 +9,6 @@ import com.google.common.eventbus.Subscribe;
 import cpw.mods.fml.common.*;
 import cpw.mods.fml.common.Mod.EventHandler;
 import cpw.mods.fml.common.event.*;
-import cpw.mods.fml.common.versioning.ArtifactVersion;
 import gtPlusPlus.core.util.Utils;
 import gtPlusPlus.preloader.CORE_Preloader;
 import net.minecraftforge.common.config.Configuration;
@@ -31,7 +29,7 @@ public class Preloader_DummyContainer extends DummyModContainer {
 		meta.updateUrl = "";
 		meta.screenshots = new String[0];
 		meta.logoFile = "";
-		meta.dependencies = (List<ArtifactVersion>) CORE_Preloader.DEPENDENCIES;
+		meta.dependencies = CORE_Preloader.DEPENDENCIES;
 
 	}
 	
-- 
1.9.5.msysgit.0

From 7e4a3ed079e27fa90f59cc32c921aa3bff62c132 Mon Sep 17 00:00:00 2001
From: Alkalus <draknyte1@hotmail.com>
Date: Sun, 8 Oct 2017 15:21:16 +1000
Subject: [PATCH] $ Fixed Core Mod Not loading outside of Dev. environment. $
 Fixed a spelling mistake in the circuit components to hide list. ^ Version
 Bump.

---
 build.gradle                                         | 20 +++++++++++++++++---
 src/Java/gtPlusPlus/core/lib/CORE.java               |  2 +-
 .../gtPlusPlus/core/recipe/RECIPES_Old_Circuits.java | 10 +++++++---
 src/Java/gtPlusPlus/preloader/CORE_Preloader.java    |  9 +++------
 .../preloader/asm/Preloader_ClassTransformer.java    | 16 ++++++++++++++--
 .../preloader/asm/Preloader_DummyContainer.java      |  4 +++-
 src/resources/mcmod.info                             |  2 +-
 7 files changed, 46 insertions(+), 17 deletions(-)

diff --git a/build.gradle b/build.gradle
index 3ea1425..fc733df 100644
--- a/build.gradle
+++ b/build.gradle
@@ -40,20 +40,34 @@ sourceCompatibility = 1.7
 targetCompatibility = 1.7
 
 archivesBaseName = "GT-PlusPlus"
-version = "1.6.07-release"
+version = "1.6.09-release"
 minecraft.version = "1.7.10-10.13.4.1448-1.7.10"
 
+
+jar{
+    archiveName = archivesBaseName+"-"+version+".jar"
+    manifest{
+        attributes 'FMLCorePlugin': 'gtPlusPlus.preloader.asm.Preloader_FMLLoadingPlugin'
+        attributes 'FMLCorePluginContainsFMLMod': 'true'
+    }
+}
+
+
 task sourceJar(type: Jar) {
     from sourceSets.main.allSource
     classifier = 'sources'
+	manifest {
+        attributes 'FMLCorePlugin': 'gtPlusPlus.preloader.asm.Preloader_FMLLoadingPlugin'
+        attributes 'FMLCorePluginContainsFMLMod': 'true'
+    }
 }
 
 task devJar(type: Jar) {
     from sourceSets.main.output
     classifier = 'dev'
     manifest {
-        //attributes 'FMLCorePlugin': 'WhateverLoaderClass'
-        //attributes 'FMLCorePluginContainsFMLMod': 'true'
+        attributes 'FMLCorePlugin': 'gtPlusPlus.preloader.asm.Preloader_FMLLoadingPlugin'
+        attributes 'FMLCorePluginContainsFMLMod': 'true'
     }
 }
 
diff --git a/src/Java/gtPlusPlus/core/lib/CORE.java b/src/Java/gtPlusPlus/core/lib/CORE.java
index 384c051..d8b1159 100644
--- a/src/Java/gtPlusPlus/core/lib/CORE.java
+++ b/src/Java/gtPlusPlus/core/lib/CORE.java
@@ -34,7 +34,7 @@ public class CORE {
 
 	public static final String name = "GT++";
 	public static final String MODID = "miscutils";
-	public static final String VERSION = "1.6.07-release";
+	public static final String VERSION = "1.6.09-release";
 	public static String MASTER_VERSION = NetworkUtils.getContentFromURL("https://raw.githubusercontent.com/draknyte1/GTplusplus/master/Recommended.txt").toLowerCase();
 	public static String USER_COUNTRY = GeoUtils.determineUsersCountry();
 	public static boolean isModUpToDate = Utils.isModUpToDate();
diff --git a/src/Java/gtPlusPlus/core/recipe/RECIPES_Old_Circuits.java b/src/Java/gtPlusPlus/core/recipe/RECIPES_Old_Circuits.java
index 1a5d3ee..960506c 100644
--- a/src/Java/gtPlusPlus/core/recipe/RECIPES_Old_Circuits.java
+++ b/src/Java/gtPlusPlus/core/recipe/RECIPES_Old_Circuits.java
@@ -214,17 +214,21 @@ public class RECIPES_Old_Circuits  implements IOreRecipeRegistrator {
 					"Circuit_Wetwarecomputer", 
 					"Circuit_Wetwaresupercomputer", 
 					"Circuit_Wetwaremainframe", 
-					"Circuit_Parts_RawCrystalChip,",
+					"Circuit_Parts_RawCrystalChip",
 					//Circuits Additions in .30/.31
 					"Circuit_Board_Plastic",
 					"Circuit_Parts_GlassFiber",
 					"Circuit_Parts_PetriDish",
-					"Circuit_Microprocessor"
-					
+					"Circuit_Microprocessor"					
 			};
 
 			for (String component : CircuitToHide){
+				try {
 				API.hideItem(ItemList.valueOf(component).get(1L, new Object[0]));
+				} catch (IllegalArgumentException I){
+					Utils.LOG_INFO("Could not find "+component+" in the Gregtech item list.");
+					Utils.LOG_INFO("This is NOT an error, simply a notification.");
+				}
 			}			
 		}
 		return true;
diff --git a/src/Java/gtPlusPlus/preloader/CORE_Preloader.java b/src/Java/gtPlusPlus/preloader/CORE_Preloader.java
index c6d09ac..09ce810 100644
--- a/src/Java/gtPlusPlus/preloader/CORE_Preloader.java
+++ b/src/Java/gtPlusPlus/preloader/CORE_Preloader.java
@@ -1,16 +1,13 @@
 package gtPlusPlus.preloader;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 
-import cpw.mods.fml.common.versioning.ArtifactVersion;
-import scala.actors.threadpool.Arrays;
-
 public class CORE_Preloader {
 	public static final String NAME = "GT++ Preloader";
 	public static final String MODID = "GT++_Preloader";
-	public static final String VERSION = "0.1-Alpha";
+	public static final String VERSION = "0.3-Alpha";
 	public static boolean enableOldGTcircuits = false;
-	@SuppressWarnings("unchecked")
-	public static List<ArtifactVersion> DEPENDENCIES = new ArrayList<>(Arrays.asList(new String[] {"required-before:gregtech;"}));
+	public static List<?> DEPENDENCIES = new ArrayList<>(Arrays.asList(new String[] {"required-before:gregtech;"}));
 }
diff --git a/src/Java/gtPlusPlus/preloader/asm/Preloader_ClassTransformer.java b/src/Java/gtPlusPlus/preloader/asm/Preloader_ClassTransformer.java
index e3a022d..f9b1a07 100644
--- a/src/Java/gtPlusPlus/preloader/asm/Preloader_ClassTransformer.java
+++ b/src/Java/gtPlusPlus/preloader/asm/Preloader_ClassTransformer.java
@@ -13,7 +13,7 @@ public class Preloader_ClassTransformer implements IClassTransformer {
 	@Override
     public byte[] transform(String name, String transformedName, byte[] basicClass) {
         if(transformedName.equals("net.minecraftforge.oredict.OreDictionary")) {
-            FMLRelaunchLog.log("[GT++] OreDictTransformer", Level.INFO, "Transforming %s", transformedName);
+            FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Transforming %s", transformedName);
             ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
             new ClassReader(basicClass).accept(new OreDictionaryVisitor(classWriter), 0);
             return classWriter.toByteArray();
@@ -31,9 +31,20 @@ private static final class OreDictionaryVisitor extends ClassVisitor {
         public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
             MethodVisitor methodVisitor = super.visitMethod(access, name, desc, signature, exceptions);
             if(name.equals("registerOreImpl") && desc.equals("(Ljava/lang/String;Lnet/minecraft/item/ItemStack;)V")) {
-                FMLRelaunchLog.log("[GT++] OreDictTransformer", Level.INFO, "Found target method.");
+                FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Found target method.");
                 return new RegisterOreImplVisitor(methodVisitor);
             }
+            else if(name.equals("registerOreImpl") && desc.equals("(Ljava/lang/String;Ladd;)V")) {
+                FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Found target method. [Obfuscated]");
+                return new RegisterOreImplVisitor(methodVisitor);
+            }
+            else {
+            	//FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Dd not find target method.");
+            	//FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Found: "+name);
+            	//FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, ""+desc);
+            	//FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, ""+signature);
+            	//FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, ""+exceptions);
+            }
             return methodVisitor;
         }
         
@@ -48,6 +59,7 @@ private static final class OreDictionaryVisitor extends ClassVisitor {
         @SuppressWarnings("deprecation")
 		@Override
         public void visitCode() {
+        	FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Fixing Forge's poor attempt at an oreDictionary.");
             super.visitCode();
             super.visitVarInsn(ALOAD, 0);
             super.visitVarInsn(ALOAD, 1);
diff --git a/src/Java/gtPlusPlus/preloader/asm/Preloader_DummyContainer.java b/src/Java/gtPlusPlus/preloader/asm/Preloader_DummyContainer.java
index 6aa78ec..a54abab 100644
--- a/src/Java/gtPlusPlus/preloader/asm/Preloader_DummyContainer.java
+++ b/src/Java/gtPlusPlus/preloader/asm/Preloader_DummyContainer.java
@@ -2,6 +2,7 @@ package gtPlusPlus.preloader.asm;
 
 import java.io.File;
 import java.util.Arrays;
+import java.util.List;
 
 import com.google.common.eventbus.EventBus;
 import com.google.common.eventbus.Subscribe;
@@ -9,6 +10,7 @@ import com.google.common.eventbus.Subscribe;
 import cpw.mods.fml.common.*;
 import cpw.mods.fml.common.Mod.EventHandler;
 import cpw.mods.fml.common.event.*;
+import cpw.mods.fml.common.versioning.ArtifactVersion;
 import gtPlusPlus.core.util.Utils;
 import gtPlusPlus.preloader.CORE_Preloader;
 import net.minecraftforge.common.config.Configuration;
@@ -29,7 +31,7 @@ public class Preloader_DummyContainer extends DummyModContainer {
 		meta.updateUrl = "";
 		meta.screenshots = new String[0];
 		meta.logoFile = "";
-		meta.dependencies = CORE_Preloader.DEPENDENCIES;
+		meta.dependencies = (List<ArtifactVersion>) CORE_Preloader.DEPENDENCIES;
 
 	}
 	
diff --git a/src/resources/mcmod.info b/src/resources/mcmod.info
index 92c69a2..8313737 100644
--- a/src/resources/mcmod.info
+++ b/src/resources/mcmod.info
@@ -5,7 +5,7 @@
   "description": "Adds a few various Multiblocks, Machines, etc to Gregtech and a plethora of other mods (Nearly 30!)",
   "credits": "",
   "logoFile": "",
-  "version": "1.6.07-release",
+  "version": "1.6.09-release",
   "mcversion": "1.7.10",
   "url": "https://github.com/draknyte1/GTplusplus/wiki",
   "updateUrl": "https://github.com/draknyte1/GTplusplus/releases/latest",
-- 
1.9.5.msysgit.0

From 7e4a3ed079e27fa90f59cc32c921aa3bff62c132 Mon Sep 17 00:00:00 2001
From: Alkalus <draknyte1@hotmail.com>
Date: Sun, 8 Oct 2017 15:21:16 +1000
Subject: [PATCH] $ Fixed Core Mod Not loading outside of Dev. environment. $
 Fixed a spelling mistake in the circuit components to hide list. ^ Version
 Bump.

---
 build.gradle                                         | 20 +++++++++++++++++---
 src/Java/gtPlusPlus/core/lib/CORE.java               |  2 +-
 .../gtPlusPlus/core/recipe/RECIPES_Old_Circuits.java | 10 +++++++---
 src/Java/gtPlusPlus/preloader/CORE_Preloader.java    |  9 +++------
 .../preloader/asm/Preloader_ClassTransformer.java    | 16 ++++++++++++++--
 .../preloader/asm/Preloader_DummyContainer.java      |  4 +++-
 src/resources/mcmod.info                             |  2 +-
 7 files changed, 46 insertions(+), 17 deletions(-)

diff --git a/build.gradle b/build.gradle
index 3ea1425..fc733df 100644
--- a/build.gradle
+++ b/build.gradle
@@ -40,20 +40,34 @@ sourceCompatibility = 1.7
 targetCompatibility = 1.7
 
 archivesBaseName = "GT-PlusPlus"
-version = "1.6.07-release"
+version = "1.6.09-release"
 minecraft.version = "1.7.10-10.13.4.1448-1.7.10"
 
+
+jar{
+    archiveName = archivesBaseName+"-"+version+".jar"
+    manifest{
+        attributes 'FMLCorePlugin': 'gtPlusPlus.preloader.asm.Preloader_FMLLoadingPlugin'
+        attributes 'FMLCorePluginContainsFMLMod': 'true'
+    }
+}
+
+
 task sourceJar(type: Jar) {
     from sourceSets.main.allSource
     classifier = 'sources'
+	manifest {
+        attributes 'FMLCorePlugin': 'gtPlusPlus.preloader.asm.Preloader_FMLLoadingPlugin'
+        attributes 'FMLCorePluginContainsFMLMod': 'true'
+    }
 }
 
 task devJar(type: Jar) {
     from sourceSets.main.output
     classifier = 'dev'
     manifest {
-        //attributes 'FMLCorePlugin': 'WhateverLoaderClass'
-        //attributes 'FMLCorePluginContainsFMLMod': 'true'
+        attributes 'FMLCorePlugin': 'gtPlusPlus.preloader.asm.Preloader_FMLLoadingPlugin'
+        attributes 'FMLCorePluginContainsFMLMod': 'true'
     }
 }
 
diff --git a/src/Java/gtPlusPlus/core/lib/CORE.java b/src/Java/gtPlusPlus/core/lib/CORE.java
index 384c051..d8b1159 100644
--- a/src/Java/gtPlusPlus/core/lib/CORE.java
+++ b/src/Java/gtPlusPlus/core/lib/CORE.java
@@ -34,7 +34,7 @@ public class CORE {
 
 	public static final String name = "GT++";
 	public static final String MODID = "miscutils";
-	public static final String VERSION = "1.6.07-release";
+	public static final String VERSION = "1.6.09-release";
 	public static String MASTER_VERSION = NetworkUtils.getContentFromURL("https://raw.githubusercontent.com/draknyte1/GTplusplus/master/Recommended.txt").toLowerCase();
 	public static String USER_COUNTRY = GeoUtils.determineUsersCountry();
 	public static boolean isModUpToDate = Utils.isModUpToDate();
diff --git a/src/Java/gtPlusPlus/core/recipe/RECIPES_Old_Circuits.java b/src/Java/gtPlusPlus/core/recipe/RECIPES_Old_Circuits.java
index 1a5d3ee..960506c 100644
--- a/src/Java/gtPlusPlus/core/recipe/RECIPES_Old_Circuits.java
+++ b/src/Java/gtPlusPlus/core/recipe/RECIPES_Old_Circuits.java
@@ -214,17 +214,21 @@ public class RECIPES_Old_Circuits  implements IOreRecipeRegistrator {
 					"Circuit_Wetwarecomputer", 
 					"Circuit_Wetwaresupercomputer", 
 					"Circuit_Wetwaremainframe", 
-					"Circuit_Parts_RawCrystalChip,",
+					"Circuit_Parts_RawCrystalChip",
 					//Circuits Additions in .30/.31
 					"Circuit_Board_Plastic",
 					"Circuit_Parts_GlassFiber",
 					"Circuit_Parts_PetriDish",
-					"Circuit_Microprocessor"
-					
+					"Circuit_Microprocessor"					
 			};
 
 			for (String component : CircuitToHide){
+				try {
 				API.hideItem(ItemList.valueOf(component).get(1L, new Object[0]));
+				} catch (IllegalArgumentException I){
+					Utils.LOG_INFO("Could not find "+component+" in the Gregtech item list.");
+					Utils.LOG_INFO("This is NOT an error, simply a notification.");
+				}
 			}			
 		}
 		return true;
diff --git a/src/Java/gtPlusPlus/preloader/CORE_Preloader.java b/src/Java/gtPlusPlus/preloader/CORE_Preloader.java
index c6d09ac..09ce810 100644
--- a/src/Java/gtPlusPlus/preloader/CORE_Preloader.java
+++ b/src/Java/gtPlusPlus/preloader/CORE_Preloader.java
@@ -1,16 +1,13 @@
 package gtPlusPlus.preloader;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 
-import cpw.mods.fml.common.versioning.ArtifactVersion;
-import scala.actors.threadpool.Arrays;
-
 public class CORE_Preloader {
 	public static final String NAME = "GT++ Preloader";
 	public static final String MODID = "GT++_Preloader";
-	public static final String VERSION = "0.1-Alpha";
+	public static final String VERSION = "0.3-Alpha";
 	public static boolean enableOldGTcircuits = false;
-	@SuppressWarnings("unchecked")
-	public static List<ArtifactVersion> DEPENDENCIES = new ArrayList<>(Arrays.asList(new String[] {"required-before:gregtech;"}));
+	public static List<?> DEPENDENCIES = new ArrayList<>(Arrays.asList(new String[] {"required-before:gregtech;"}));
 }
diff --git a/src/Java/gtPlusPlus/preloader/asm/Preloader_ClassTransformer.java b/src/Java/gtPlusPlus/preloader/asm/Preloader_ClassTransformer.java
index e3a022d..f9b1a07 100644
--- a/src/Java/gtPlusPlus/preloader/asm/Preloader_ClassTransformer.java
+++ b/src/Java/gtPlusPlus/preloader/asm/Preloader_ClassTransformer.java
@@ -13,7 +13,7 @@ public class Preloader_ClassTransformer implements IClassTransformer {
 	@Override
     public byte[] transform(String name, String transformedName, byte[] basicClass) {
         if(transformedName.equals("net.minecraftforge.oredict.OreDictionary")) {
-            FMLRelaunchLog.log("[GT++] OreDictTransformer", Level.INFO, "Transforming %s", transformedName);
+            FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Transforming %s", transformedName);
             ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
             new ClassReader(basicClass).accept(new OreDictionaryVisitor(classWriter), 0);
             return classWriter.toByteArray();
@@ -31,9 +31,20 @@ private static final class OreDictionaryVisitor extends ClassVisitor {
         public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
             MethodVisitor methodVisitor = super.visitMethod(access, name, desc, signature, exceptions);
             if(name.equals("registerOreImpl") && desc.equals("(Ljava/lang/String;Lnet/minecraft/item/ItemStack;)V")) {
-                FMLRelaunchLog.log("[GT++] OreDictTransformer", Level.INFO, "Found target method.");
+                FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Found target method.");
                 return new RegisterOreImplVisitor(methodVisitor);
             }
+            else if(name.equals("registerOreImpl") && desc.equals("(Ljava/lang/String;Ladd;)V")) {
+                FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Found target method. [Obfuscated]");
+                return new RegisterOreImplVisitor(methodVisitor);
+            }
+            else {
+            	//FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Dd not find target method.");
+            	//FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Found: "+name);
+            	//FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, ""+desc);
+            	//FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, ""+signature);
+            	//FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, ""+exceptions);
+            }
             return methodVisitor;
         }
         
@@ -48,6 +59,7 @@ private static final class OreDictionaryVisitor extends ClassVisitor {
         @SuppressWarnings("deprecation")
 		@Override
         public void visitCode() {
+        	FMLRelaunchLog.log("[GT++ ASM] OreDictTransformer", Level.INFO, "Fixing Forge's poor attempt at an oreDictionary.");
             super.visitCode();
             super.visitVarInsn(ALOAD, 0);
             super.visitVarInsn(ALOAD, 1);
diff --git a/src/Java/gtPlusPlus/preloader/asm/Preloader_DummyContainer.java b/src/Java/gtPlusPlus/preloader/asm/Preloader_DummyContainer.java
index 6aa78ec..a54abab 100644
--- a/src/Java/gtPlusPlus/preloader/asm/Preloader_DummyContainer.java
+++ b/src/Java/gtPlusPlus/preloader/asm/Preloader_DummyContainer.java
@@ -2,6 +2,7 @@ package gtPlusPlus.preloader.asm;
 
 import java.io.File;
 import java.util.Arrays;
+import java.util.List;
 
 import com.google.common.eventbus.EventBus;
 import com.google.common.eventbus.Subscribe;
@@ -9,6 +10,7 @@ import com.google.common.eventbus.Subscribe;
 import cpw.mods.fml.common.*;
 import cpw.mods.fml.common.Mod.EventHandler;
 import cpw.mods.fml.common.event.*;
+import cpw.mods.fml.common.versioning.ArtifactVersion;
 import gtPlusPlus.core.util.Utils;
 import gtPlusPlus.preloader.CORE_Preloader;
 import net.minecraftforge.common.config.Configuration;
@@ -29,7 +31,7 @@ public class Preloader_DummyContainer extends DummyModContainer {
 		meta.updateUrl = "";
 		meta.screenshots = new String[0];
 		meta.logoFile = "";
-		meta.dependencies = CORE_Preloader.DEPENDENCIES;
+		meta.dependencies = (List<ArtifactVersion>) CORE_Preloader.DEPENDENCIES;
 
 	}
 	
diff --git a/src/resources/mcmod.info b/src/resources/mcmod.info
index 92c69a2..8313737 100644
--- a/src/resources/mcmod.info
+++ b/src/resources/mcmod.info
@@ -5,7 +5,7 @@
   "description": "Adds a few various Multiblocks, Machines, etc to Gregtech and a plethora of other mods (Nearly 30!)",
   "credits": "",
   "logoFile": "",
-  "version": "1.6.07-release",
+  "version": "1.6.09-release",
   "mcversion": "1.7.10",
   "url": "https://github.com/draknyte1/GTplusplus/wiki",
   "updateUrl": "https://github.com/draknyte1/GTplusplus/releases/latest",
-- 
1.9.5.msysgit.0

From c5e01a0f82ffeaf404ae09b0f51af4178bd22e92 Mon Sep 17 00:00:00 2001
From: Alkalus <draknyte1@hotmail.com>
Date: Sun, 8 Oct 2017 13:51:27 +1000
Subject: [PATCH] + Added support for the new circuit components added since
 original implementation.

---
 src/Java/gtPlusPlus/core/recipe/RECIPES_Old_Circuits.java   | 13 +++++++++++--
 src/Java/gtPlusPlus/preloader/Preloader_GT_OreDict.java     |  6 +++---
 .../preloader/asm/Preloader_FMLLoadingPlugin.java           |  2 ++
 3 files changed, 16 insertions(+), 5 deletions(-)

diff --git a/src/Java/gtPlusPlus/core/recipe/RECIPES_Old_Circuits.java b/src/Java/gtPlusPlus/core/recipe/RECIPES_Old_Circuits.java
index 2028647..1a5d3ee 100644
--- a/src/Java/gtPlusPlus/core/recipe/RECIPES_Old_Circuits.java
+++ b/src/Java/gtPlusPlus/core/recipe/RECIPES_Old_Circuits.java
@@ -107,7 +107,10 @@ public class RECIPES_Old_Circuits  implements IOreRecipeRegistrator {
 		ItemList.Circuit_Elite.set(GregtechItemList.Old_Circuit_Elite.get(1));
 		ItemList.Circuit_Master.set(GregtechItemList.Old_Circuit_Master.get(1));
 		ItemList.Circuit_Ultimate.set(GregtechItemList.Old_Circuit_Ultimate.get(1));
-
+		
+		//set data orbs and sticks to their new replacements
+		ItemList.Tool_DataStick.set(GregtechItemList.Old_Tool_DataStick.get(1));
+		ItemList.Tool_DataOrb.set(GregtechItemList.Old_Tool_DataOrb.get(1));
 
 		ItemList.Circuit_Board_Basic.set(GregtechItemList.Old_Circuit_Board_Basic.get(1));
 		ItemList.Circuit_Board_Advanced.set(GregtechItemList.Old_Circuit_Board_Advanced.get(1));
@@ -211,7 +214,13 @@ public class RECIPES_Old_Circuits  implements IOreRecipeRegistrator {
 					"Circuit_Wetwarecomputer", 
 					"Circuit_Wetwaresupercomputer", 
 					"Circuit_Wetwaremainframe", 
-					"Circuit_Parts_RawCrystalChip"					
+					"Circuit_Parts_RawCrystalChip,",
+					//Circuits Additions in .30/.31
+					"Circuit_Board_Plastic",
+					"Circuit_Parts_GlassFiber",
+					"Circuit_Parts_PetriDish",
+					"Circuit_Microprocessor"
+					
 			};
 
 			for (String component : CircuitToHide){
diff --git a/src/Java/gtPlusPlus/preloader/Preloader_GT_OreDict.java b/src/Java/gtPlusPlus/preloader/Preloader_GT_OreDict.java
index f8bb372..62692f5 100644
--- a/src/Java/gtPlusPlus/preloader/Preloader_GT_OreDict.java
+++ b/src/Java/gtPlusPlus/preloader/Preloader_GT_OreDict.java
@@ -17,8 +17,8 @@ public class Preloader_GT_OreDict {
 				if (Class.forName("gregtech.common.items.GT_MetaGenerated_Item_03") != null) { // 6/11/12/14/16/20/30-57/69-73/79-96
 					Class<?> MetaItem03 = Class.forName("gregtech.common.items.GT_MetaGenerated_Item_03");
 					if (isInstanceOf(MetaItem03, circuit.getItem())) {
-						if (damageValue == 6 || damageValue == 11 || damageValue == 12 || damageValue == 14
-								|| damageValue == 16 || damageValue == 20) {
+						if (damageValue == 6 || damageValue == 7 || damageValue == 11 || damageValue == 12 || damageValue == 14
+								|| damageValue == 16 || damageValue == 20 || damageValue == 21 || damageValue == 22) {
 							return true;
 						}
 						else if (damageValue >= 30 && damageValue <= 57) {
@@ -27,7 +27,7 @@ public class Preloader_GT_OreDict {
 						else if (damageValue >= 69 && damageValue <= 73) {
 							return true;
 						}
-						else if (damageValue >= 79 && damageValue <= 96) {
+						else if (damageValue >= 78 && damageValue <= 96) {
 							return true;
 						}
 					}
diff --git a/src/Java/gtPlusPlus/preloader/asm/Preloader_FMLLoadingPlugin.java b/src/Java/gtPlusPlus/preloader/asm/Preloader_FMLLoadingPlugin.java
index 9070e88..a52c4f7 100644
--- a/src/Java/gtPlusPlus/preloader/asm/Preloader_FMLLoadingPlugin.java
+++ b/src/Java/gtPlusPlus/preloader/asm/Preloader_FMLLoadingPlugin.java
@@ -8,6 +8,8 @@ import cpw.mods.fml.relauncher.IFMLLoadingPlugin.MCVersion;
 @MCVersion(value = "1.7.10")
 public class Preloader_FMLLoadingPlugin implements IFMLLoadingPlugin  {
 
+	//-Dfml.coreMods.load=gtPlusPlus.preloader.asm.Preloader_FMLLoadingPlugin
+	
 	@Override
 	public String getAccessTransformerClass() {
 		return null;
-- 
1.9.5.msysgit.0

From dc8afa1dda838341e772b55c526d073be4b62038 Mon Sep 17 00:00:00 2001
From: Alkalus <draknyte1@hotmail.com>
Date: Sat, 7 Oct 2017 17:11:52 +1000
Subject: [PATCH] $ Fixed Textures further on the Industrial Centrifuge. $
 Fixed the issue where two textures would become Fusion Reactor casings. Fixed
 thanks to @Technus

---
 src/Java/gregtech/api/enums/TAE.java                        |  9 +++++----
 .../gregtech/common/blocks/GregtechMetaCasingBlocks.java    |  3 ---
 .../common/blocks/textures/CasingTextureHandler.java        |  2 +-
 .../blocks/textures/TexturesCentrifugeMultiblock.java       |  2 +-
 .../multi/GregtechMetaTileEntity_IndustrialCentrifuge.java  | 13 +++++++++----
 5 files changed, 16 insertions(+), 13 deletions(-)

diff --git a/src/Java/gregtech/api/enums/TAE.java b/src/Java/gregtech/api/enums/TAE.java
index 04a8d16..c6fc8c7 100644
--- a/src/Java/gregtech/api/enums/TAE.java
+++ b/src/Java/gregtech/api/enums/TAE.java
@@ -35,14 +35,15 @@ public class TAE {
 		return true;
 	}
 
-	public static boolean registerTextures(GT_RenderedTexture textureToRegister) {
-		Textures.BlockIcons.CASING_BLOCKS[gtPPLastUsedIndex++] = textureToRegister;
+	/*public static boolean registerTextures(GT_RenderedTexture textureToRegister) {
+		Textures.BlockIcons.CASING_BLOCKS[gtPPLastUsedIndex] = textureToRegister;
 		//Just so I know registration is done.
 		return true;
-	}
+	}*/
 
 	public static boolean registerTextures(GT_CopiedBlockTexture gt_CopiedBlockTexture) {
-		Textures.BlockIcons.CASING_BLOCKS[gtPPLastUsedIndex++] = gt_CopiedBlockTexture;
+		Textures.BlockIcons.CASING_BLOCKS[gtPPLastUsedIndex] = gt_CopiedBlockTexture;
+		gtPPLastUsedIndex++;
 		//Just so I know registration is done.
 		return true;
 	}
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/GregtechMetaCasingBlocks.java b/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/GregtechMetaCasingBlocks.java
index c05df6a..852fd6c 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/GregtechMetaCasingBlocks.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/GregtechMetaCasingBlocks.java
@@ -8,7 +8,6 @@ import gregtech.api.util.GT_LanguageManager;
 import gregtech.common.blocks.GT_Material_Casings;
 import gtPlusPlus.xmod.gregtech.api.enums.GregtechItemList;
 import gtPlusPlus.xmod.gregtech.common.blocks.textures.CasingTextureHandler;
-import gtPlusPlus.xmod.gregtech.common.blocks.textures.TexturesGtBlock;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.IIcon;
 import net.minecraft.world.IBlockAccess;
@@ -62,8 +61,6 @@ extends GregtechMetaCasingBlocksAbstract {
 		return CasingTextureHandler.getIcon(aSide, aMeta);
 	}
 
-
-
 	@Override
 	@SideOnly(Side.CLIENT)
 	public IIcon getIcon(final IBlockAccess aWorld, final int xCoord, final int yCoord, final int zCoord, final int aSide) {
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/CasingTextureHandler.java b/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/CasingTextureHandler.java
index 3becc6b..1ddf68b 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/CasingTextureHandler.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/CasingTextureHandler.java
@@ -34,7 +34,7 @@ public class CasingTextureHandler {
 				return TexturesGtBlock.Casing_Material_Potin.getIcon();
 				//Broken Blue Fusion Casings
 			case 6:
-				return Textures.BlockIcons.MACHINE_CASING_FUSION.getIcon();
+				return TexturesGtBlock.Casing_Material_MaragingSteel.getIcon();
 				//Maceration Stack Casings
 			case 7:
 				return TexturesGtBlock.Casing_Material_Tumbaga.getIcon();
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/TexturesCentrifugeMultiblock.java b/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/TexturesCentrifugeMultiblock.java
index 356bc2f..fe31836 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/TexturesCentrifugeMultiblock.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/TexturesCentrifugeMultiblock.java
@@ -81,7 +81,7 @@ public class TexturesCentrifugeMultiblock {
 
 	public IIcon handleCasingsGT58(final IBlockAccess aWorld, final int xCoord, final int yCoord, final int zCoord, final int aSide, final GregtechMetaCasingBlocks thisBlock) {
 		final int tMeta = aWorld.getBlockMetadata(xCoord, yCoord, zCoord);
-		if (((tMeta != 6) && (tMeta != 8) && (tMeta != 0))) {
+		if (tMeta != 0) {
 			return CasingTextureHandler.getIcon(aSide, tMeta);
 		}
 		final int tStartIndex = tMeta == 6 ? 1 : 13;
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCentrifuge.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCentrifuge.java
index 460965d..ac288eb 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCentrifuge.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCentrifuge.java
@@ -76,7 +76,12 @@ extends GregtechMeta_MultiBlockBase {
 
 	@Override
 	public ITexture[] getTexture(final IGregTechTileEntity aBaseMetaTileEntity, final byte aSide, final byte aFacing, final byte aColorIndex, final boolean aActive, final boolean aRedstone) {
-		return new ITexture[]{Textures.BlockIcons.MACHINE_CASINGS[TAE.GTPP_INDEX(0)][aColorIndex + 1], aFacing == aSide ? aActive ? frontFaceActive : frontFace : Textures.BlockIcons.CASING_BLOCKS[TAE.GTPP_INDEX(0)]};
+		try {
+			return new ITexture[]{Textures.BlockIcons.MACHINE_CASINGS[TAE.GTPP_INDEX(0)][aColorIndex + 1], aFacing == aSide ? aActive ? frontFaceActive : frontFace : Textures.BlockIcons.CASING_BLOCKS[TAE.GTPP_INDEX(0)]};
+		}
+		catch (Throwable t){
+			return new ITexture[]{Textures.BlockIcons.MACHINE_CASINGS[0][aColorIndex + 1], aFacing == aSide ? aActive ? frontFaceActive : frontFace : Textures.BlockIcons.CASING_BLOCKS[0]};
+			}
 	}
 
 
@@ -164,9 +169,9 @@ extends GregtechMeta_MultiBlockBase {
 					this.mEUt = (-this.mEUt);
 				}
 				this.mMaxProgresstime = Math.max(1, this.mMaxProgresstime);
-				
+
 				ItemStack mNewOutputs[] = new ItemStack[tRecipe.mOutputs.length];
-				
+
 				for (int i = 0; i < tRecipe.mOutputs.length; i++){
 					if (this.getBaseMetaTileEntity().getRandomNumber(7500) < tRecipe.getOutputChance(i)){
 						//Utils.LOG_INFO("Adding a bonus output | "+tRecipe.getOutputChance(i));
@@ -177,7 +182,7 @@ extends GregtechMeta_MultiBlockBase {
 						mNewOutputs[i] = null;
 					}
 				}
-				
+
 				this.mOutputItems = mNewOutputs;
 				this.mOutputFluids = new FluidStack[] { tRecipe.getFluidOutput(0) };
 				updateSlots();
-- 
1.9.5.msysgit.0

From dc8afa1dda838341e772b55c526d073be4b62038 Mon Sep 17 00:00:00 2001
From: Alkalus <draknyte1@hotmail.com>
Date: Sat, 7 Oct 2017 17:11:52 +1000
Subject: [PATCH] $ Fixed Textures further on the Industrial Centrifuge. $
 Fixed the issue where two textures would become Fusion Reactor casings. Fixed
 thanks to @Technus

---
 src/Java/gregtech/api/enums/TAE.java                        |  9 +++++----
 .../gregtech/common/blocks/GregtechMetaCasingBlocks.java    |  3 ---
 .../common/blocks/textures/CasingTextureHandler.java        |  2 +-
 .../blocks/textures/TexturesCentrifugeMultiblock.java       |  2 +-
 .../multi/GregtechMetaTileEntity_IndustrialCentrifuge.java  | 13 +++++++++----
 5 files changed, 16 insertions(+), 13 deletions(-)

diff --git a/src/Java/gregtech/api/enums/TAE.java b/src/Java/gregtech/api/enums/TAE.java
index 04a8d16..c6fc8c7 100644
--- a/src/Java/gregtech/api/enums/TAE.java
+++ b/src/Java/gregtech/api/enums/TAE.java
@@ -35,14 +35,15 @@ public class TAE {
 		return true;
 	}
 
-	public static boolean registerTextures(GT_RenderedTexture textureToRegister) {
-		Textures.BlockIcons.CASING_BLOCKS[gtPPLastUsedIndex++] = textureToRegister;
+	/*public static boolean registerTextures(GT_RenderedTexture textureToRegister) {
+		Textures.BlockIcons.CASING_BLOCKS[gtPPLastUsedIndex] = textureToRegister;
 		//Just so I know registration is done.
 		return true;
-	}
+	}*/
 
 	public static boolean registerTextures(GT_CopiedBlockTexture gt_CopiedBlockTexture) {
-		Textures.BlockIcons.CASING_BLOCKS[gtPPLastUsedIndex++] = gt_CopiedBlockTexture;
+		Textures.BlockIcons.CASING_BLOCKS[gtPPLastUsedIndex] = gt_CopiedBlockTexture;
+		gtPPLastUsedIndex++;
 		//Just so I know registration is done.
 		return true;
 	}
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/GregtechMetaCasingBlocks.java b/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/GregtechMetaCasingBlocks.java
index c05df6a..852fd6c 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/GregtechMetaCasingBlocks.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/GregtechMetaCasingBlocks.java
@@ -8,7 +8,6 @@ import gregtech.api.util.GT_LanguageManager;
 import gregtech.common.blocks.GT_Material_Casings;
 import gtPlusPlus.xmod.gregtech.api.enums.GregtechItemList;
 import gtPlusPlus.xmod.gregtech.common.blocks.textures.CasingTextureHandler;
-import gtPlusPlus.xmod.gregtech.common.blocks.textures.TexturesGtBlock;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.IIcon;
 import net.minecraft.world.IBlockAccess;
@@ -62,8 +61,6 @@ extends GregtechMetaCasingBlocksAbstract {
 		return CasingTextureHandler.getIcon(aSide, aMeta);
 	}
 
-
-
 	@Override
 	@SideOnly(Side.CLIENT)
 	public IIcon getIcon(final IBlockAccess aWorld, final int xCoord, final int yCoord, final int zCoord, final int aSide) {
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/CasingTextureHandler.java b/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/CasingTextureHandler.java
index 3becc6b..1ddf68b 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/CasingTextureHandler.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/CasingTextureHandler.java
@@ -34,7 +34,7 @@ public class CasingTextureHandler {
 				return TexturesGtBlock.Casing_Material_Potin.getIcon();
 				//Broken Blue Fusion Casings
 			case 6:
-				return Textures.BlockIcons.MACHINE_CASING_FUSION.getIcon();
+				return TexturesGtBlock.Casing_Material_MaragingSteel.getIcon();
 				//Maceration Stack Casings
 			case 7:
 				return TexturesGtBlock.Casing_Material_Tumbaga.getIcon();
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/TexturesCentrifugeMultiblock.java b/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/TexturesCentrifugeMultiblock.java
index 356bc2f..fe31836 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/TexturesCentrifugeMultiblock.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/TexturesCentrifugeMultiblock.java
@@ -81,7 +81,7 @@ public class TexturesCentrifugeMultiblock {
 
 	public IIcon handleCasingsGT58(final IBlockAccess aWorld, final int xCoord, final int yCoord, final int zCoord, final int aSide, final GregtechMetaCasingBlocks thisBlock) {
 		final int tMeta = aWorld.getBlockMetadata(xCoord, yCoord, zCoord);
-		if (((tMeta != 6) && (tMeta != 8) && (tMeta != 0))) {
+		if (tMeta != 0) {
 			return CasingTextureHandler.getIcon(aSide, tMeta);
 		}
 		final int tStartIndex = tMeta == 6 ? 1 : 13;
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCentrifuge.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCentrifuge.java
index 460965d..ac288eb 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCentrifuge.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCentrifuge.java
@@ -76,7 +76,12 @@ extends GregtechMeta_MultiBlockBase {
 
 	@Override
 	public ITexture[] getTexture(final IGregTechTileEntity aBaseMetaTileEntity, final byte aSide, final byte aFacing, final byte aColorIndex, final boolean aActive, final boolean aRedstone) {
-		return new ITexture[]{Textures.BlockIcons.MACHINE_CASINGS[TAE.GTPP_INDEX(0)][aColorIndex + 1], aFacing == aSide ? aActive ? frontFaceActive : frontFace : Textures.BlockIcons.CASING_BLOCKS[TAE.GTPP_INDEX(0)]};
+		try {
+			return new ITexture[]{Textures.BlockIcons.MACHINE_CASINGS[TAE.GTPP_INDEX(0)][aColorIndex + 1], aFacing == aSide ? aActive ? frontFaceActive : frontFace : Textures.BlockIcons.CASING_BLOCKS[TAE.GTPP_INDEX(0)]};
+		}
+		catch (Throwable t){
+			return new ITexture[]{Textures.BlockIcons.MACHINE_CASINGS[0][aColorIndex + 1], aFacing == aSide ? aActive ? frontFaceActive : frontFace : Textures.BlockIcons.CASING_BLOCKS[0]};
+			}
 	}
 
 
@@ -164,9 +169,9 @@ extends GregtechMeta_MultiBlockBase {
 					this.mEUt = (-this.mEUt);
 				}
 				this.mMaxProgresstime = Math.max(1, this.mMaxProgresstime);
-				
+
 				ItemStack mNewOutputs[] = new ItemStack[tRecipe.mOutputs.length];
-				
+
 				for (int i = 0; i < tRecipe.mOutputs.length; i++){
 					if (this.getBaseMetaTileEntity().getRandomNumber(7500) < tRecipe.getOutputChance(i)){
 						//Utils.LOG_INFO("Adding a bonus output | "+tRecipe.getOutputChance(i));
@@ -177,7 +182,7 @@ extends GregtechMeta_MultiBlockBase {
 						mNewOutputs[i] = null;
 					}
 				}
-				
+
 				this.mOutputItems = mNewOutputs;
 				this.mOutputFluids = new FluidStack[] { tRecipe.getFluidOutput(0) };
 				updateSlots();
-- 
1.9.5.msysgit.0

From a460b4c3521bc2850e6f169d9b6b176feccba6f8 Mon Sep 17 00:00:00 2001
From: Alkalus <draknyte1@hotmail.com>
Date: Sat, 7 Oct 2017 16:30:43 +1000
Subject: [PATCH] $ Fixed Industrial Centrifuge Textures,

---
 .../common/blocks/textures/TexturesCentrifugeMultiblock.java      | 2 +-
 .../multi/GregtechMetaTileEntity_IndustrialCentrifuge.java        | 8 ++++----
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/TexturesCentrifugeMultiblock.java b/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/TexturesCentrifugeMultiblock.java
index ab55f89..356bc2f 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/TexturesCentrifugeMultiblock.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/textures/TexturesCentrifugeMultiblock.java
@@ -189,7 +189,7 @@ public class TexturesCentrifugeMultiblock {
 					return this.CENTRIFUGE[2].getIcon();
 				}
 			}
-			return Textures.BlockIcons.MACHINE_CASING_SOLID_STEEL.getIcon();
+			return TexturesGtBlock.Casing_Material_Centrifuge.getIcon();
 		}
 		final boolean[] tConnectedSides = {(aWorld.getBlock(xCoord, yCoord - 1, zCoord) == thisBlock) && (aWorld.getBlockMetadata(xCoord, yCoord - 1, zCoord) == tMeta), (aWorld.getBlock(xCoord, yCoord + 1, zCoord) == thisBlock) && (aWorld.getBlockMetadata(xCoord, yCoord + 1, zCoord) == tMeta), (aWorld.getBlock(xCoord + 1, yCoord, zCoord) == thisBlock) && (aWorld.getBlockMetadata(xCoord + 1, yCoord, zCoord) == tMeta), (aWorld.getBlock(xCoord, yCoord, zCoord + 1) == thisBlock) && (aWorld.getBlockMetadata(xCoord, yCoord, zCoord + 1) == tMeta), (aWorld.getBlock(xCoord - 1, yCoord, zCoord) == thisBlock) && (aWorld.getBlockMetadata(xCoord - 1, yCoord, zCoord) == tMeta), (aWorld.getBlock(xCoord, yCoord, zCoord - 1) == thisBlock) && (aWorld.getBlockMetadata(xCoord, yCoord, zCoord - 1) == tMeta)};
 		switch (aSide) {
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCentrifuge.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCentrifuge.java
index 485a7b6..460965d 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCentrifuge.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCentrifuge.java
@@ -76,7 +76,7 @@ extends GregtechMeta_MultiBlockBase {
 
 	@Override
 	public ITexture[] getTexture(final IGregTechTileEntity aBaseMetaTileEntity, final byte aSide, final byte aFacing, final byte aColorIndex, final boolean aActive, final boolean aRedstone) {
-		return new ITexture[]{Textures.BlockIcons.MACHINE_CASINGS[1][aColorIndex + 1], aFacing == aSide ? aActive ? frontFaceActive : frontFace : Textures.BlockIcons.CASING_BLOCKS[TAE.GTPP_INDEX(0)]};
+		return new ITexture[]{Textures.BlockIcons.MACHINE_CASINGS[TAE.GTPP_INDEX(0)][aColorIndex + 1], aFacing == aSide ? aActive ? frontFaceActive : frontFace : Textures.BlockIcons.CASING_BLOCKS[TAE.GTPP_INDEX(0)]};
 	}
 
 
@@ -100,7 +100,7 @@ extends GregtechMeta_MultiBlockBase {
 
 	@Override
 	public boolean checkRecipe(final ItemStack aStack) {
-		ArrayList tInputList = getStoredInputs();
+		ArrayList<ItemStack> tInputList = getStoredInputs();
 		int tInputList_sS = tInputList.size();
 		for (int i = 0; i < tInputList_sS - 1; ++i) {
 			for (int j = i + 1; j < tInputList_sS; ++j) {
@@ -118,7 +118,7 @@ extends GregtechMeta_MultiBlockBase {
 		}
 		ItemStack[] tInputs = (ItemStack[]) tInputList.toArray(new ItemStack[tInputList.size()]);
 
-		ArrayList tFluidList = getStoredFluids();
+		ArrayList<FluidStack> tFluidList = getStoredFluids();
 		int tFluidList_sS = tFluidList.size();
 		for (int i = 0; i < tFluidList_sS - 1; ++i) {
 			for (int j = i + 1; j < tFluidList_sS; ++j) {
@@ -226,7 +226,7 @@ extends GregtechMeta_MultiBlockBase {
 
 						final IGregTechTileEntity tTileEntity = aBaseMetaTileEntity.getIGregTechTileEntityOffset(xDir + i, h, zDir + j);
 						//Utils.LOG_WARNING("X:"+tTileEntity.getXCoord()+" Y:"+tTileEntity.getYCoord()+" Z:"+tTileEntity.getZCoord());
-						if ((!this.addMaintenanceToMachineList(tTileEntity, 57)) && (!this.addInputToMachineList(tTileEntity, 57)) && (!this.addOutputToMachineList(tTileEntity, 57)) && (!this.addEnergyInputToMachineList(tTileEntity, 57))) {
+						if ((!this.addMaintenanceToMachineList(tTileEntity, TAE.GTPP_INDEX(0))) && (!this.addInputToMachineList(tTileEntity, TAE.GTPP_INDEX(0))) && (!this.addOutputToMachineList(tTileEntity, TAE.GTPP_INDEX(0))) && (!this.addEnergyInputToMachineList(tTileEntity, TAE.GTPP_INDEX(0)))) {
 
 							//Maintenance Hatch
 							if ((tTileEntity != null) && (tTileEntity.getMetaTileEntity() != null)) {
-- 
1.9.5.msysgit.0

From 78273db9326b615dfce53d168696ed5d41e36b20 Mon Sep 17 00:00:00 2001
From: Technus <daniel112092@gmail.com>
Date: Sat, 7 Oct 2017 08:07:24 +0200
Subject: [PATCH] Fix derps

---
 .../GregtechMetaPipeEntityFluid.java               | 19 ++++++++++
 .../base/GregtechMeta_MultiBlockBase.java          | 42 +++-------------------
 2 files changed, 24 insertions(+), 37 deletions(-)

diff --git a/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/GregtechMetaPipeEntityFluid.java b/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/GregtechMetaPipeEntityFluid.java
index 8f37869..0fea343 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/GregtechMetaPipeEntityFluid.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/GregtechMetaPipeEntityFluid.java
@@ -36,6 +36,25 @@ public class GregtechMetaPipeEntityFluid extends GT_MetaPipeEntity_Fluid {
 	}
 
 	@Override
+	public ITexture[] getTexture(IGregTechTileEntity aBaseMetaTileEntity, byte aSide, byte aConnections, byte aColorIndex, boolean aConnected, boolean aRedstone) {
+		if (aConnected) {
+			float tThickNess = getThickNess();
+			if (tThickNess < 0.124F)
+				return new ITexture[]{new GT_RenderedTexture(mMaterial.mIconSet.mTextures[OrePrefixes.pipe.mTextureIndex], Dyes.getModulation(aColorIndex, mMaterial.mRGBa))};
+			if (tThickNess < 0.374F)//0.375
+				return new ITexture[]{new GT_RenderedTexture(mMaterial.mIconSet.mTextures[OrePrefixes.pipeTiny.mTextureIndex], Dyes.getModulation(aColorIndex, mMaterial.mRGBa))};
+			if (tThickNess < 0.499F)//0.500
+				return new ITexture[]{new GT_RenderedTexture(mMaterial.mIconSet.mTextures[OrePrefixes.pipeSmall.mTextureIndex], Dyes.getModulation(aColorIndex, mMaterial.mRGBa))};
+			if (tThickNess < 0.749F)//0.750
+				return new ITexture[]{new GT_RenderedTexture(mMaterial.mIconSet.mTextures[OrePrefixes.pipeMedium.mTextureIndex], Dyes.getModulation(aColorIndex, mMaterial.mRGBa))};
+			if (tThickNess < 0.874F)//0.825
+				return new ITexture[]{new GT_RenderedTexture(mMaterial.mIconSet.mTextures[OrePrefixes.pipeLarge.mTextureIndex], Dyes.getModulation(aColorIndex, mMaterial.mRGBa))};
+			return new ITexture[]{new GT_RenderedTexture(mMaterial.mIconSet.mTextures[OrePrefixes.pipeHuge.mTextureIndex], Dyes.getModulation(aColorIndex, mMaterial.mRGBa))};
+		}
+		return new ITexture[]{new GT_RenderedTexture(mMaterial.mIconSet.mTextures[OrePrefixes.pipe.mTextureIndex], Dyes.getModulation(aColorIndex, mMaterial.mRGBa))};
+	}
+
+	@Override
 	public String[] getDescription() {
 		return new String[]{
 				EnumChatFormatting.BLUE + "Fluid Capacity: %%%" + (mCapacity * 20) + "%%% L/sec" + EnumChatFormatting.GRAY,
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/base/GregtechMeta_MultiBlockBase.java b/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/base/GregtechMeta_MultiBlockBase.java
index 72e5a17..13755aa 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/base/GregtechMeta_MultiBlockBase.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/base/GregtechMeta_MultiBlockBase.java
@@ -1,36 +1,21 @@
 package gtPlusPlus.xmod.gregtech.api.metatileentity.implementations.base;
 
-import static gregtech.api.enums.GT_Values.V;
-
-import java.util.ArrayList;
-
-import gregtech.GT_Mod;
-import gregtech.api.GregTech_API;
-import gregtech.api.enums.*;
-import gregtech.api.interfaces.metatileentity.IMetaTileEntity;
 import gregtech.api.interfaces.tileentity.IGregTechTileEntity;
-import gregtech.api.items.GT_MetaGenerated_Tool;
 import gregtech.api.metatileentity.MetaTileEntity;
-import gregtech.api.metatileentity.implementations.*;
-import gregtech.api.objects.GT_ItemStack;
-import gregtech.api.util.*;
-import gregtech.api.util.GT_Recipe.GT_Recipe_Map;
-import gregtech.common.items.GT_MetaGenerated_Tool_01;
+import gregtech.api.metatileentity.implementations.GT_MetaTileEntity_Hatch_OutputBus;
+import gregtech.api.metatileentity.implementations.GT_MetaTileEntity_MultiBlockBase;
+import gregtech.api.util.GT_Recipe;
 import gtPlusPlus.core.util.Utils;
 import gtPlusPlus.core.util.math.MathUtils;
 import gtPlusPlus.xmod.gregtech.api.gui.CONTAINER_MultiMachine;
 import gtPlusPlus.xmod.gregtech.api.gui.GUI_MultiMachine;
-import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.inventory.IInventory;
 import net.minecraft.item.ItemStack;
-import net.minecraft.nbt.NBTTagCompound;
-import net.minecraftforge.fluids.FluidStack;
-
-public abstract class GregtechMeta_MultiBlockBase extends GT_MetaTileEntity_MultiBlockBase {
 
-	public static boolean disableMaintenance;
+import java.util.ArrayList;
 
+public abstract class GregtechMeta_MultiBlockBase extends GT_MetaTileEntity_MultiBlockBase {
 	public GregtechMeta_MultiBlockBase(final int aID, final String aName, final String aNameRegional) {
 		super(aID, aName, aNameRegional);
 	}
@@ -52,16 +37,6 @@ public abstract class GregtechMeta_MultiBlockBase extends GT_MetaTileEntity_Mult
 	public Object getClientGUI(final int aID, final InventoryPlayer aPlayerInventory, final IGregTechTileEntity aBaseMetaTileEntity) {
 		return new GUI_MultiMachine(aPlayerInventory, aBaseMetaTileEntity, this.getLocalName(), "MultiblockDisplay.png");
 	}
-
-	@Override
-	public String[] getInfoData() {
-		return new String[]{"Progress:", (this.mProgresstime / 20) + "secs", (this.mMaxProgresstime / 20) + "secs", "Efficiency:", (this.mEfficiency / 100.0F) + "%", "Problems:", "" + (this.getIdealStatus() - this.getRepairStatus())};
-	}
-
-	@Override
-	public boolean isGivingInformation() {
-		return true;
-	}
 	
 	public int getAmountOfOutputs() {
 		return 1;
@@ -76,8 +51,6 @@ public abstract class GregtechMeta_MultiBlockBase extends GT_MetaTileEntity_Mult
 	public int getDamageToComponent(ItemStack paramItemStack) {
 		return 0;
 	}
-	
-    public void startSoundLoop(byte aIndex, double aX, double aY, double aZ) {}
 
     public void startProcess() {}
 
@@ -159,10 +132,5 @@ public abstract class GregtechMeta_MultiBlockBase extends GT_MetaTileEntity_Mult
 		}
 		Utils.LOG_INFO("Error generating recipe, returning null.");
 		return null;
-
-
-
 	}
-
-
 }
-- 
1.9.5.msysgit.0

From 9828a8184b37db383957cb850ff127a959d4068b Mon Sep 17 00:00:00 2001
From: Alkalus <draknyte1@hotmail.com>
Date: Sat, 7 Oct 2017 15:01:41 +1000
Subject: [PATCH] + Added sounds to more Multi-Blocks $ Made my base Multiblock
 extend the GT base multi-block.

---
 .../base/GregtechMeta_MultiBlockBase.java          | 885 +--------------------
 .../GregtechMetaTileEntity_AlloyBlastSmelter.java  |  14 +-
 .../GregtechMetaTileEntity_IndustrialCokeOven.java |  27 +-
 ...gtechMetaTileEntity_IndustrialElectrolyzer.java |   1 -
 ...MetaTileEntity_IndustrialThermalCentrifuge.java |  21 +-
 5 files changed, 55 insertions(+), 893 deletions(-)

diff --git a/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/base/GregtechMeta_MultiBlockBase.java b/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/base/GregtechMeta_MultiBlockBase.java
index 738b14e..72e5a17 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/base/GregtechMeta_MultiBlockBase.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/base/GregtechMeta_MultiBlockBase.java
@@ -10,7 +10,6 @@ import gregtech.api.enums.*;
 import gregtech.api.interfaces.metatileentity.IMetaTileEntity;
 import gregtech.api.interfaces.tileentity.IGregTechTileEntity;
 import gregtech.api.items.GT_MetaGenerated_Tool;
-import gregtech.api.metatileentity.BaseMetaTileEntity;
 import gregtech.api.metatileentity.MetaTileEntity;
 import gregtech.api.metatileentity.implementations.*;
 import gregtech.api.objects.GT_ItemStack;
@@ -18,7 +17,6 @@ import gregtech.api.util.*;
 import gregtech.api.util.GT_Recipe.GT_Recipe_Map;
 import gregtech.common.items.GT_MetaGenerated_Tool_01;
 import gtPlusPlus.core.util.Utils;
-import gtPlusPlus.core.util.array.Pair;
 import gtPlusPlus.core.util.math.MathUtils;
 import gtPlusPlus.xmod.gregtech.api.gui.CONTAINER_MultiMachine;
 import gtPlusPlus.xmod.gregtech.api.gui.GUI_MultiMachine;
@@ -29,30 +27,16 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraftforge.fluids.FluidStack;
 
-public abstract class GregtechMeta_MultiBlockBase extends MetaTileEntity {
+public abstract class GregtechMeta_MultiBlockBase extends GT_MetaTileEntity_MultiBlockBase {
 
 	public static boolean disableMaintenance;
-	public boolean mMachine = false, mWrench = false, mScrewdriver = false, mSoftHammer = false, mHardHammer = false, mSolderingTool = true, mCrowbar = false, mRunningOnLoad = false;
-	public int mPollution = 0, mProgresstime = 0, mMaxProgresstime = 0, mEUt = 0, mEfficiencyIncrease = 0, mUpdate = 0, mStartUpCheck = 100, mRuntime = 0, mEfficiency = 0;
-	public ItemStack[] mOutputItems = null;
-	public FluidStack[] mOutputFluids = null;
-	public ArrayList<GT_MetaTileEntity_Hatch_Input> mInputHatches = new ArrayList<>();
-	public ArrayList<GT_MetaTileEntity_Hatch_Output> mOutputHatches = new ArrayList<>();
-	public ArrayList<GT_MetaTileEntity_Hatch_InputBus> mInputBusses = new ArrayList<>();
-	public ArrayList<GT_MetaTileEntity_Hatch_OutputBus> mOutputBusses = new ArrayList<>();
-	public ArrayList<GT_MetaTileEntity_Hatch_Dynamo> mDynamoHatches = new ArrayList<>();
-	public ArrayList<GT_MetaTileEntity_Hatch_Muffler> mMufflerHatches = new ArrayList<>();
-	public ArrayList<GT_MetaTileEntity_Hatch_Energy> mEnergyHatches = new ArrayList<>();
-	public ArrayList<GT_MetaTileEntity_Hatch_Maintenance> mMaintenanceHatches = new ArrayList<>();
 
 	public GregtechMeta_MultiBlockBase(final int aID, final String aName, final String aNameRegional) {
-		super(aID, aName, aNameRegional, 2);
-		GregtechMeta_MultiBlockBase.disableMaintenance = GregTech_API.sMachineFile.get(ConfigCategories.machineconfig, "MultiBlockMachines.disableMaintenance", false);
+		super(aID, aName, aNameRegional);
 	}
 
 	public GregtechMeta_MultiBlockBase(final String aName) {
-		super(aName, 2);
-		GregtechMeta_MultiBlockBase.disableMaintenance = GregTech_API.sMachineFile.get(ConfigCategories.machineconfig, "MultiBlockMachines.disableMaintenance", false);
+		super(aName);
 	}
 
 	public static boolean isValidMetaTileEntity(final MetaTileEntity aMetaTileEntity) {
@@ -60,120 +44,6 @@ public abstract class GregtechMeta_MultiBlockBase extends MetaTileEntity {
 	}
 
 	@Override
-	public boolean allowCoverOnSide(final byte aSide, final GT_ItemStack aCoverID) {
-		return aSide != this.getBaseMetaTileEntity().getFrontFacing();
-	}
-
-	@Override
-	public boolean isSimpleMachine() {
-		return false;
-	}
-
-	@Override
-	public boolean isFacingValid(final byte aFacing) {
-		return true;
-	}
-
-	@Override
-	public boolean isAccessAllowed(final EntityPlayer aPlayer) {
-		return true;
-	}
-
-	@Override
-	public boolean isValidSlot(final int aIndex) {
-		return aIndex > 0;
-	}
-
-	@Override
-	public int getProgresstime() {
-		return this.mProgresstime;
-	}
-
-	@Override
-	public int maxProgresstime() {
-		return this.mMaxProgresstime;
-	}
-
-	@Override
-	public int increaseProgress(final int aProgress) {
-		return aProgress;
-	}
-
-	@Override
-	public void saveNBTData(final NBTTagCompound aNBT) {
-		aNBT.setInteger("mEUt", this.mEUt);
-		aNBT.setInteger("mProgresstime", this.mProgresstime);
-		aNBT.setInteger("mMaxProgresstime", this.mMaxProgresstime);
-		aNBT.setInteger("mEfficiencyIncrease", this.mEfficiencyIncrease);
-		aNBT.setInteger("mEfficiency", this.mEfficiency);
-		aNBT.setInteger("mPollution", this.mPollution);
-		aNBT.setInteger("mRuntime", this.mRuntime);
-
-		if (this.mOutputItems != null) {
-			for (int i = 0; i < this.mOutputItems.length; i++) {
-				if (this.mOutputItems[i] != null) {
-					final NBTTagCompound tNBT = new NBTTagCompound();
-					this.mOutputItems[i].writeToNBT(tNBT);
-					aNBT.setTag("mOutputItem" + i, tNBT);
-				}
-			}
-		}
-		if (this.mOutputFluids != null) {
-			for (int i = 0; i < this.mOutputFluids.length; i++) {
-				if (this.mOutputFluids[i] != null) {
-					final NBTTagCompound tNBT = new NBTTagCompound();
-					this.mOutputFluids[i].writeToNBT(tNBT);
-					aNBT.setTag("mOutputFluids" + i, tNBT);
-				}
-			}
-		}
-
-		aNBT.setBoolean("mWrench", this.mWrench);
-		aNBT.setBoolean("mScrewdriver", this.mScrewdriver);
-		aNBT.setBoolean("mSoftHammer", this.mSoftHammer);
-		aNBT.setBoolean("mHardHammer", this.mHardHammer);
-		aNBT.setBoolean("mSolderingTool", this.mSolderingTool);
-		aNBT.setBoolean("mCrowbar", this.mCrowbar);
-	}
-
-	@Override
-	public void loadNBTData(final NBTTagCompound aNBT) {
-		this.mEUt = aNBT.getInteger("mEUt");
-		this.mProgresstime = aNBT.getInteger("mProgresstime");
-		this.mMaxProgresstime = aNBT.getInteger("mMaxProgresstime");
-		if (this.mMaxProgresstime > 0) {
-			this.mRunningOnLoad = true;
-		}
-		this.mEfficiencyIncrease = aNBT.getInteger("mEfficiencyIncrease");
-		this.mEfficiency = aNBT.getInteger("mEfficiency");
-		this.mPollution = aNBT.getInteger("mPollution");
-		this.mRuntime = aNBT.getInteger("mRuntime");
-		this.mOutputItems = new ItemStack[this.getAmountOfOutputs()];
-		for (int i = 0; i < this.mOutputItems.length; i++) {
-			this.mOutputItems[i] = GT_Utility.loadItem(aNBT, "mOutputItem" + i);
-		}
-		this.mOutputFluids = new FluidStack[this.getAmountOfOutputs()];
-		for (int i = 0; i < this.mOutputFluids.length; i++) {
-			this.mOutputFluids[i] = GT_Utility.loadFluid(aNBT, "mOutputFluids" + i);
-		}
-		this.mWrench = aNBT.getBoolean("mWrench");
-		this.mScrewdriver = aNBT.getBoolean("mScrewdriver");
-		this.mSoftHammer = aNBT.getBoolean("mSoftHammer");
-		this.mHardHammer = aNBT.getBoolean("mHardHammer");
-		this.mSolderingTool = aNBT.getBoolean("mSolderingTool");
-		this.mCrowbar = aNBT.getBoolean("mCrowbar");
-	}
-
-	@Override
-	public boolean onRightclick(final IGregTechTileEntity aBaseMetaTileEntity, final EntityPlayer aPlayer) {
-		if (aBaseMetaTileEntity.isClientSide()) {
-			return true;
-		}
-		aBaseMetaTileEntity.openGUI(aPlayer);
-		return true;
-	}
-
-	@Override
 	public Object getServerGUI(final int aID, final InventoryPlayer aPlayerInventory, final IGregTechTileEntity aBaseMetaTileEntity) {
 		return new CONTAINER_MultiMachine(aPlayerInventory, aBaseMetaTileEntity);
 	}
@@ -184,718 +54,6 @@ public abstract class GregtechMeta_MultiBlockBase extends MetaTileEntity {
 	}
 
 	@Override
-	public byte getTileEntityBaseType() {
-		return 2;
-	}
-
-	@Override
-	public void onMachineBlockUpdate() {
-		this.mUpdate = 50;
-	}
-
-	@Override
-	public void onPostTick(final IGregTechTileEntity aBaseMetaTileEntity, final long aTick) {
-		if (aBaseMetaTileEntity.isServerSide()) {
-			if (this.mEfficiency < 0) {
-				this.mEfficiency = 0;
-			}
-			if ((--this.mUpdate == 0) || (--this.mStartUpCheck == 0)) {
-				this.mInputHatches.clear();
-				this.mInputBusses.clear();
-				this.mOutputHatches.clear();
-				this.mOutputBusses.clear();
-				this.mDynamoHatches.clear();
-				this.mEnergyHatches.clear();
-				this.mMufflerHatches.clear();
-				this.mMaintenanceHatches.clear();
-				this.mMachine = this.checkMachine(aBaseMetaTileEntity, this.mInventory[1]);
-			}
-			if (this.mStartUpCheck < 0) {
-				if (this.mMachine) {
-					for (final GT_MetaTileEntity_Hatch_Maintenance tHatch : this.mMaintenanceHatches) {
-						if (isValidMetaTileEntity(tHatch)) {
-							if (!GregtechMeta_MultiBlockBase.disableMaintenance) {
-								if (tHatch.mWrench) {
-									this.mWrench = true;
-								}
-								if (tHatch.mScrewdriver) {
-									this.mScrewdriver = true;
-								}
-								if (tHatch.mSoftHammer) {
-									this.mSoftHammer = true;
-								}
-								if (tHatch.mHardHammer) {
-									this.mHardHammer = true;
-								}
-								if (tHatch.mSolderingTool) {
-									this.mSolderingTool = true;
-								}
-								if (tHatch.mCrowbar) {
-									this.mCrowbar = true;
-								}
-							} else {
-								this.mWrench = true;
-								this.mScrewdriver = true;
-								this.mSoftHammer = true;
-								this.mHardHammer = true;
-								this.mSolderingTool = true;
-								this.mCrowbar = true;
-							}
-
-							tHatch.mWrench = false;
-							tHatch.mScrewdriver = false;
-							tHatch.mSoftHammer = false;
-							tHatch.mHardHammer = false;
-							tHatch.mSolderingTool = true;
-							tHatch.mCrowbar = false;
-						}
-					}
-					if (this.getRepairStatus() > 0) {
-						if ((this.mMaxProgresstime > 0) && this.doRandomMaintenanceDamage()) {
-							if (this.onRunningTick(this.mInventory[1])) {
-								if (!this.polluteEnvironment(this.getPollutionPerTick(this.mInventory[1]))) {
-									this.stopMachine();
-								}
-								if ((this.mMaxProgresstime > 0) && (++this.mProgresstime >= this.mMaxProgresstime)) {
-									if (this.mOutputItems != null) {
-										for (final ItemStack tStack : this.mOutputItems) {
-											if (tStack != null) {
-												try {
-													GT_Mod.achievements.issueAchivementHatch(aBaseMetaTileEntity.getWorld().getPlayerEntityByName(aBaseMetaTileEntity.getOwnerName()), tStack);
-												} catch (final Exception e) {
-												}
-												this.addOutput(tStack);
-											}
-										}
-									}
-									if ((this.mOutputFluids != null) && (this.mOutputFluids.length == 1)) {
-										for (final FluidStack tStack : this.mOutputFluids) {
-											if (tStack != null) {
-												this.addOutput(tStack);
-											}
-										}
-									} else if ((this.mOutputFluids != null) && (this.mOutputFluids.length > 1)) {
-										this.addFluidOutputs(this.mOutputFluids);
-									}
-									this.mEfficiency = Math.max(0, Math.min(this.mEfficiency + this.mEfficiencyIncrease, this.getMaxEfficiency(this.mInventory[1]) - ((this.getIdealStatus() - this.getRepairStatus()) * 1000)));
-									this.mOutputItems = null;
-									this.mProgresstime = 0;
-									this.mMaxProgresstime = 0;
-									this.mEfficiencyIncrease = 0;
-									if (aBaseMetaTileEntity.isAllowedToWork()) {
-										this.checkRecipe(this.mInventory[1]);
-									}
-									if ((this.mOutputFluids != null) && (this.mOutputFluids.length > 0)) {
-										if (this.mOutputFluids.length > 1) {
-											GT_Mod.achievements.issueAchievement(aBaseMetaTileEntity.getWorld().getPlayerEntityByName(aBaseMetaTileEntity.getOwnerName()), "oilplant");
-										}
-									}
-								}
-							}
-						} else {
-							if (((aTick % 100) == 0) || aBaseMetaTileEntity.hasWorkJustBeenEnabled() || aBaseMetaTileEntity.hasInventoryBeenModified()) {
-
-								if (aBaseMetaTileEntity.isAllowedToWork()) {
-									this.checkRecipe(this.mInventory[1]);
-								}
-								if (this.mMaxProgresstime <= 0) {
-									this.mEfficiency = Math.max(0, this.mEfficiency - 1000);
-								}
-							}
-						}
-					} else {
-						this.stopMachine();
-					}
-				} else {
-					this.stopMachine();
-				}
-			}
-			aBaseMetaTileEntity.setErrorDisplayID((aBaseMetaTileEntity.getErrorDisplayID() & ~127) | (this.mWrench ? 0 : 1) | (this.mScrewdriver ? 0 : 2) | (this.mSoftHammer ? 0 : 4) | (this.mHardHammer ? 0 : 8) | (this.mSolderingTool ? 0 : 16) | (this.mCrowbar ? 0 : 32) | (this.mMachine ? 0 : 64));
-			aBaseMetaTileEntity.setActive(this.mMaxProgresstime > 0);
-		}
-	}
-
-	public boolean polluteEnvironment(final int aPollutionLevel) {
-		this.mPollution += aPollutionLevel;
-		for (final GT_MetaTileEntity_Hatch_Muffler tHatch : this.mMufflerHatches) {
-			if (isValidMetaTileEntity(tHatch)) {
-				if (this.mPollution >= 10000) {
-					if (tHatch.polluteEnvironment()) {
-						this.mPollution -= 10000;
-					}
-				} else {
-					break;
-				}
-			}
-		}
-		return this.mPollution < 10000;
-	}
-
-	/**
-	 * Called every tick the Machine runs
-	 */
-	public boolean onRunningTick(final ItemStack aStack) {
-		if (this.mEUt > 0) {
-			this.addEnergyOutput(((long) this.mEUt * this.mEfficiency) / 10000);
-			return true;
-		}
-		if (this.mEUt < 0) {
-			if (!this.drainEnergyInput(((long) -this.mEUt * 10000) / Math.max(1000, this.mEfficiency))) {
-				this.stopMachine();
-				return false;
-			}
-		}
-		return true;
-	}
-
-	/**
-	 * Checks if this is a Correct Machine Part for this kind of Machine (Turbine Rotor for example)
-	 */
-	//public abstract boolean isCorrectMachinePart(ItemStack aStack);
-
-	/**
-	 * Checks the Recipe
-	 */
-	public abstract boolean checkRecipe(ItemStack aStack);
-
-	/**
-	 * Checks the Machine. You have to assign the MetaTileEntities for the Hatches here.
-	 */
-	public abstract boolean checkMachine(IGregTechTileEntity aBaseMetaTileEntity, ItemStack aStack);
-
-	/**
-	 * Gets the maximum Efficiency that spare Part can get (0 - 10000)
-	 */
-	public abstract int getMaxEfficiency(ItemStack aStack);
-
-	/**
-	 * Gets the pollution this Device outputs to a Muffler per tick (10000 = one Pullution Block)
-	 */
-	public abstract int getPollutionPerTick(ItemStack aStack);
-
-	/**
-	 * Gets the damage to the ItemStack, usually 0 or 1.
-	 */
-	//public abstract int getDamageToComponent(ItemStack aStack);
-
-	/**
-	 * Gets the Amount of possibly outputted Items for loading the Output Stack Array from NBT.
-	 * This should be the largest Amount that can ever happen legitimately.
-	 */
-	public abstract int getAmountOfOutputs();
-
-	/**
-	 * If it explodes when the Component has to be replaced.
-	 */
-	public abstract boolean explodesOnComponentBreak(ItemStack aStack);
-
-	public void stopMachine() {
-		this.mOutputItems = null;
-		this.mEUt = 0;
-		this.mEfficiency = 0;
-		this.mProgresstime = 0;
-		this.mMaxProgresstime = 0;
-		this.mEfficiencyIncrease = 0;
-		this.getBaseMetaTileEntity().disableWorking();
-	}
-
-	public int getRepairStatus() {
-		return (this.mWrench ? 1 : 0) + (this.mScrewdriver ? 1 : 0) + (this.mSoftHammer ? 1 : 0) + (this.mHardHammer ? 1 : 0) + (this.mSolderingTool ? 1 : 0) + (this.mCrowbar ? 1 : 0);
-	}
-
-	public int getIdealStatus() {
-		return 6;
-	}
-
-	public boolean doRandomMaintenanceDamage() {
-		if (this.getRepairStatus() == 0) {
-			this.stopMachine();
-			return false;
-		}
-		if (this.mRuntime++ > 1000) {
-			this.mRuntime = 0;
-			if (this.getBaseMetaTileEntity().getRandomNumber(6000) == 0) {
-				switch (this.getBaseMetaTileEntity().getRandomNumber(6)) {
-				case 0:
-					this.mWrench = false;
-					break;
-				case 1:
-					this.mScrewdriver = false;
-					break;
-				case 2:
-					this.mSoftHammer = false;
-					break;
-				case 3:
-					this.mHardHammer = false;
-					break;
-				case 4:
-					this.mSolderingTool = true;
-					break;
-				case 5:
-					this.mCrowbar = false;
-					break;
-				}
-			}
-			if ((this.mInventory[1] != null) && (this.getBaseMetaTileEntity().getRandomNumber(2) == 0) && !this.mInventory[1].getUnlocalizedName().startsWith("gt.blockmachines.basicmachine.")) {
-				if (this.mInventory[1].getItem() instanceof GT_MetaGenerated_Tool_01) {
-					final NBTTagCompound tNBT = this.mInventory[1].getTagCompound();
-					if (tNBT != null) {
-						NBTTagCompound tNBT2 = tNBT.getCompoundTag("GT.CraftingComponents");
-						if (!tNBT.getBoolean("mDis")) {
-							tNBT2 = new NBTTagCompound();
-							final Materials tMaterial = GT_MetaGenerated_Tool.getPrimaryMaterial(this.mInventory[1]);
-							final ItemStack tTurbine = GT_OreDictUnificator.get(OrePrefixes.turbineBlade, tMaterial, 1);
-							final int i = this.mInventory[1].getItemDamage();
-							if (i == 170) {
-								ItemStack tStack = GT_Utility.copyAmount(1, tTurbine);
-								tNBT2.setTag("Ingredient.0", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.1", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.2", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.3", tStack.writeToNBT(new NBTTagCompound()));
-								tStack = GT_OreDictUnificator.get(OrePrefixes.stickLong, Materials.Magnalium, 1);
-								tNBT2.setTag("Ingredient.4", tStack.writeToNBT(new NBTTagCompound()));
-							} else if (i == 172) {
-								ItemStack tStack = GT_Utility.copyAmount(1, tTurbine);
-								tNBT2.setTag("Ingredient.0", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.1", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.2", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.3", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.5", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.6", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.7", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.8", tStack.writeToNBT(new NBTTagCompound()));
-								tStack = GT_OreDictUnificator.get(OrePrefixes.stickLong, Materials.Titanium, 1);
-								tNBT2.setTag("Ingredient.4", tStack.writeToNBT(new NBTTagCompound()));
-							} else if (i == 174) {
-								ItemStack tStack = GT_Utility.copyAmount(2, tTurbine);
-								tNBT2.setTag("Ingredient.0", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.1", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.2", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.3", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.5", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.6", tStack.writeToNBT(new NBTTagCompound()));
-								tStack = GT_OreDictUnificator.get(OrePrefixes.stickLong, Materials.TungstenSteel, 1);
-								tNBT2.setTag("Ingredient.4", tStack.writeToNBT(new NBTTagCompound()));
-							} else if (i == 176) {
-								ItemStack tStack = GT_Utility.copyAmount(2, tTurbine);
-								tNBT2.setTag("Ingredient.0", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.1", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.2", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.3", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.5", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.6", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.7", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.8", tStack.writeToNBT(new NBTTagCompound()));
-								tStack = GT_OreDictUnificator.get(OrePrefixes.stickLong, Materials.Americium, 1);
-								tNBT2.setTag("Ingredient.4", tStack.writeToNBT(new NBTTagCompound()));
-							}
-							tNBT.setTag("GT.CraftingComponents", tNBT2);
-							tNBT.setBoolean("mDis", true);
-							this.mInventory[1].setTagCompound(tNBT);
-
-						}
-					}
-
-					((GT_MetaGenerated_Tool) this.mInventory[1].getItem()).doDamage(this.mInventory[1], (long) Math.min(this.mEUt / 5, Math.pow(this.mEUt, 0.7)));
-					if (this.mInventory[1].stackSize == 0) {
-						this.mInventory[1] = null;
-					}
-				}
-			}
-		}
-		return true;
-	}
-
-	public void explodeMultiblock() {
-		this.mInventory[1] = null;
-		for (final MetaTileEntity tTileEntity : this.mInputBusses) {
-			tTileEntity.getBaseMetaTileEntity().doExplosion(V[8]);
-		}
-		for (final MetaTileEntity tTileEntity : this.mOutputBusses) {
-			tTileEntity.getBaseMetaTileEntity().doExplosion(V[8]);
-		}
-		for (final MetaTileEntity tTileEntity : this.mInputHatches) {
-			tTileEntity.getBaseMetaTileEntity().doExplosion(V[8]);
-		}
-		for (final MetaTileEntity tTileEntity : this.mOutputHatches) {
-			tTileEntity.getBaseMetaTileEntity().doExplosion(V[8]);
-		}
-		for (final MetaTileEntity tTileEntity : this.mDynamoHatches) {
-			tTileEntity.getBaseMetaTileEntity().doExplosion(V[8]);
-		}
-		for (final MetaTileEntity tTileEntity : this.mMufflerHatches) {
-			tTileEntity.getBaseMetaTileEntity().doExplosion(V[8]);
-		}
-		for (final MetaTileEntity tTileEntity : this.mEnergyHatches) {
-			tTileEntity.getBaseMetaTileEntity().doExplosion(V[8]);
-		}
-		for (final MetaTileEntity tTileEntity : this.mMaintenanceHatches) {
-			tTileEntity.getBaseMetaTileEntity().doExplosion(V[8]);
-		}
-		this.getBaseMetaTileEntity().doExplosion(V[8]);
-	}
-
-	public boolean addEnergyOutput(final long aEU) {
-		if (aEU <= 0) {
-			return true;
-		}
-		for (final GT_MetaTileEntity_Hatch_Dynamo tHatch : this.mDynamoHatches) {
-			if (isValidMetaTileEntity(tHatch)) {
-				if (tHatch.getBaseMetaTileEntity().increaseStoredEnergyUnits(aEU, false)) {
-					return true;
-				}
-			}
-		}
-		return false;
-	}
-
-	public long getMaxInputVoltage() {
-		long rVoltage = 0;
-		for (final GT_MetaTileEntity_Hatch_Energy tHatch : this.mEnergyHatches) {
-			if (isValidMetaTileEntity(tHatch)) {
-				rVoltage += tHatch.getBaseMetaTileEntity().getInputVoltage();
-			}
-		}
-		return rVoltage;
-	}
-
-	public boolean drainEnergyInput(final long aEU) {
-		if (aEU <= 0) {
-			return true;
-		}
-		for (final GT_MetaTileEntity_Hatch_Energy tHatch : this.mEnergyHatches) {
-			if (isValidMetaTileEntity(tHatch)) {
-				if (tHatch.getBaseMetaTileEntity().decreaseStoredEnergyUnits(aEU, false)) {
-					return true;
-				}
-			}
-		}
-		return false;
-	}
-
-	public boolean addOutput(final FluidStack aLiquid) {
-		if (aLiquid == null) {
-			return false;
-		}
-		final FluidStack tLiquid = aLiquid.copy();
-		for (final GT_MetaTileEntity_Hatch_Output tHatch : this.mOutputHatches) {
-			if (isValidMetaTileEntity(tHatch) && GT_ModHandler.isSteam(aLiquid) ? tHatch.outputsSteam() : tHatch.outputsLiquids()) {
-				final int tAmount = tHatch.fill(tLiquid, false);
-				if (tAmount >= tLiquid.amount) {
-					return tHatch.fill(tLiquid, true) >= tLiquid.amount;
-				} else if (tAmount > 0) {
-					tLiquid.amount = tLiquid.amount - tHatch.fill(tLiquid, true);
-				}
-			}
-		}
-		return false;
-	}
-
-	private void addFluidOutputs(final FluidStack[] mOutputFluids2) {
-		for (int i = 0; i < mOutputFluids2.length; i++) {
-			if ((this.mOutputHatches.size() > i) && (this.mOutputHatches.get(i) != null) && (mOutputFluids2[i] != null) && isValidMetaTileEntity(this.mOutputHatches.get(i))) {
-				this.mOutputHatches.get(i).fill(mOutputFluids2[i], true);
-			}
-		}
-
-	}
-
-	public boolean depleteInput(final FluidStack aLiquid) {
-		if (aLiquid == null) {
-			return false;
-		}
-		for (final GT_MetaTileEntity_Hatch_Input tHatch : this.mInputHatches) {
-			tHatch.mRecipeMap = this.getRecipeMap();
-			if (isValidMetaTileEntity(tHatch)) {
-				FluidStack tLiquid = tHatch.getFluid();
-				if ((tLiquid != null) && tLiquid.isFluidEqual(aLiquid)) {
-					tLiquid = tHatch.drain(aLiquid.amount, false);
-					if ((tLiquid != null) && (tLiquid.amount >= aLiquid.amount)) {
-						tLiquid = tHatch.drain(aLiquid.amount, true);
-						return (tLiquid != null) && (tLiquid.amount >= aLiquid.amount);
-					}
-				}
-			}
-		}
-		return false;
-	}
-
-	public boolean addOutput(ItemStack aStack) {
-		if (GT_Utility.isStackInvalid(aStack)) {
-			return false;
-		}
-		aStack = GT_Utility.copy(aStack);
-		//		FluidStack aLiquid = GT_Utility.getFluidForFilledItem(aStack, true);
-		//		if (aLiquid == null) {
-		for (final GT_MetaTileEntity_Hatch_OutputBus tHatch : this.mOutputBusses) {
-			if (isValidMetaTileEntity(tHatch)) {
-				for (int i = tHatch.getSizeInventory() - 1; i >= 0; i--) {
-					if (tHatch.getBaseMetaTileEntity().addStackToSlot(i, aStack)) {
-						return true;
-					}
-				}
-			}
-		}
-		for (final GT_MetaTileEntity_Hatch_Output tHatch : this.mOutputHatches) {
-			if (isValidMetaTileEntity(tHatch) && tHatch.outputsItems()) {
-				if (tHatch.getBaseMetaTileEntity().addStackToSlot(1, aStack)) {
-					return true;
-				}
-			}
-		}
-		//		}else {
-		//			for (GT_MetaTileEntity_Hatch_Output tHatch : mOutputHatches) {
-		//				if (isValidMetaTileEntity(tHatch) && GT_ModHandler.isSteam(aLiquid)?tHatch.outputsSteam():tHatch.outputsLiquids()) {
-		//					int tAmount = tHatch.fill(aLiquid, false);
-		//					if (tAmount >= aLiquid.amount) {
-		//						return tHatch.fill(aLiquid, true) >= aLiquid.amount;
-		//					}
-		//				}
-		//			}
-		//		}
-		return false;
-	}
-
-	public boolean depleteInput(final ItemStack aStack) {
-		if (GT_Utility.isStackInvalid(aStack)) {
-			return false;
-		}
-		final FluidStack aLiquid = GT_Utility.getFluidForFilledItem(aStack, true);
-		if (aLiquid != null) {
-			return this.depleteInput(aLiquid);
-		}
-		for (final GT_MetaTileEntity_Hatch_Input tHatch : this.mInputHatches) {
-			tHatch.mRecipeMap = this.getRecipeMap();
-			if (isValidMetaTileEntity(tHatch)) {
-				if (GT_Utility.areStacksEqual(aStack, tHatch.getBaseMetaTileEntity().getStackInSlot(0))) {
-					if (tHatch.getBaseMetaTileEntity().getStackInSlot(0).stackSize >= aStack.stackSize) {
-						tHatch.getBaseMetaTileEntity().decrStackSize(0, aStack.stackSize);
-						return true;
-					}
-				}
-			}
-		}
-		for (final GT_MetaTileEntity_Hatch_InputBus tHatch : this.mInputBusses) {
-			tHatch.mRecipeMap = this.getRecipeMap();
-			if (isValidMetaTileEntity(tHatch)) {
-				for (int i = tHatch.getBaseMetaTileEntity().getSizeInventory() - 1; i >= 0; i--) {
-					if (GT_Utility.areStacksEqual(aStack, tHatch.getBaseMetaTileEntity().getStackInSlot(i))) {
-						if (tHatch.getBaseMetaTileEntity().getStackInSlot(0).stackSize >= aStack.stackSize) {
-							tHatch.getBaseMetaTileEntity().decrStackSize(0, aStack.stackSize);
-							return true;
-						}
-					}
-				}
-			}
-		}
-		return false;
-	}
-
-	public ArrayList<ItemStack> getStoredOutputs() {
-		final ArrayList<ItemStack> rList = new ArrayList<>();
-		for (final GT_MetaTileEntity_Hatch_Output tHatch : this.mOutputHatches) {
-			if (isValidMetaTileEntity(tHatch)) {
-				rList.add(tHatch.getBaseMetaTileEntity().getStackInSlot(1));
-			}
-		}
-		for (final GT_MetaTileEntity_Hatch_OutputBus tHatch : this.mOutputBusses) {
-			if (isValidMetaTileEntity(tHatch)) {
-				for (int i = tHatch.getBaseMetaTileEntity().getSizeInventory() - 1; i >= 0; i--) {
-					rList.add(tHatch.getBaseMetaTileEntity().getStackInSlot(i));
-				}
-			}
-		}
-		return rList;
-	}
-
-	public ArrayList<FluidStack> getStoredFluids() {
-		final ArrayList<FluidStack> rList = new ArrayList<>();
-		for (final GT_MetaTileEntity_Hatch_Input tHatch : this.mInputHatches) {
-			tHatch.mRecipeMap = this.getRecipeMap();
-			if (isValidMetaTileEntity(tHatch) && (tHatch.getFillableStack() != null)) {
-				rList.add(tHatch.getFillableStack());
-			}
-		}
-		return rList;
-	}
-
-	public ArrayList<ItemStack> getStoredInputs() {
-		final ArrayList<ItemStack> rList = new ArrayList<>();
-		for (final GT_MetaTileEntity_Hatch_Input tHatch : this.mInputHatches) {
-			tHatch.mRecipeMap = this.getRecipeMap();
-			if (isValidMetaTileEntity(tHatch) && (tHatch.getBaseMetaTileEntity().getStackInSlot(0) != null)) {
-				rList.add(tHatch.getBaseMetaTileEntity().getStackInSlot(0));
-			}
-		}
-		for (final GT_MetaTileEntity_Hatch_InputBus tHatch : this.mInputBusses) {
-			tHatch.mRecipeMap = this.getRecipeMap();
-			if (isValidMetaTileEntity(tHatch)) {
-				for (int i = tHatch.getBaseMetaTileEntity().getSizeInventory() - 1; i >= 0; i--) {
-					if (tHatch.getBaseMetaTileEntity().getStackInSlot(i) != null) {
-						rList.add(tHatch.getBaseMetaTileEntity().getStackInSlot(i));
-					}
-				}
-			}
-		}
-		return rList;
-	}
-
-	public GT_Recipe_Map getRecipeMap() {
-		return null;
-	}
-
-	public void updateSlots() {
-		for (final GT_MetaTileEntity_Hatch_Input tHatch : this.mInputHatches) {
-			if (isValidMetaTileEntity(tHatch)) {
-				tHatch.updateSlots();
-			}
-		}
-		for (final GT_MetaTileEntity_Hatch_InputBus tHatch : this.mInputBusses) {
-			if (isValidMetaTileEntity(tHatch)) {
-				tHatch.updateSlots();
-			}
-		}
-	}
-
-	public boolean addToMachineList(final IGregTechTileEntity aTileEntity, final int aBaseCasingIndex) {
-		if (aTileEntity == null) {
-			return false;
-		}
-		final IMetaTileEntity aMetaTileEntity = aTileEntity.getMetaTileEntity();
-		if (aMetaTileEntity == null) {
-			return false;
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Input) {
-			return this.mInputHatches.add((GT_MetaTileEntity_Hatch_Input) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_InputBus) {
-			return this.mInputBusses.add((GT_MetaTileEntity_Hatch_InputBus) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Output) {
-			return this.mOutputHatches.add((GT_MetaTileEntity_Hatch_Output) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_OutputBus) {
-			return this.mOutputBusses.add((GT_MetaTileEntity_Hatch_OutputBus) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Energy) {
-			return this.mEnergyHatches.add((GT_MetaTileEntity_Hatch_Energy) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Dynamo) {
-			return this.mDynamoHatches.add((GT_MetaTileEntity_Hatch_Dynamo) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Maintenance) {
-			return this.mMaintenanceHatches.add((GT_MetaTileEntity_Hatch_Maintenance) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Muffler) {
-			return this.mMufflerHatches.add((GT_MetaTileEntity_Hatch_Muffler) aMetaTileEntity);
-		}
-		return false;
-	}
-
-	public boolean addMaintenanceToMachineList(final IGregTechTileEntity aTileEntity, final int aBaseCasingIndex) {
-		if (aTileEntity == null) {
-			return false;
-		}
-		final IMetaTileEntity aMetaTileEntity = aTileEntity.getMetaTileEntity();
-		if (aMetaTileEntity == null) {
-			return false;
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Maintenance) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-			return this.mMaintenanceHatches.add((GT_MetaTileEntity_Hatch_Maintenance) aMetaTileEntity);
-		}
-		return false;
-	}
-
-	public boolean addEnergyInputToMachineList(final IGregTechTileEntity aTileEntity, final int aBaseCasingIndex) {
-		if (aTileEntity == null) {
-			return false;
-		}
-		final IMetaTileEntity aMetaTileEntity = aTileEntity.getMetaTileEntity();
-		if (aMetaTileEntity == null) {
-			return false;
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Energy) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-			return this.mEnergyHatches.add((GT_MetaTileEntity_Hatch_Energy) aMetaTileEntity);
-		}
-		return false;
-	}
-
-	public boolean addDynamoToMachineList(final IGregTechTileEntity aTileEntity, final int aBaseCasingIndex) {
-		if (aTileEntity == null) {
-			return false;
-		}
-		final IMetaTileEntity aMetaTileEntity = aTileEntity.getMetaTileEntity();
-		if (aMetaTileEntity == null) {
-			return false;
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Dynamo) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-			return this.mDynamoHatches.add((GT_MetaTileEntity_Hatch_Dynamo) aMetaTileEntity);
-		}
-		return false;
-	}
-
-	public boolean addMufflerToMachineList(final IGregTechTileEntity aTileEntity, final int aBaseCasingIndex) {
-		if (aTileEntity == null) {
-			return false;
-		}
-		final IMetaTileEntity aMetaTileEntity = aTileEntity.getMetaTileEntity();
-		if (aMetaTileEntity == null) {
-			return false;
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Muffler) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-			return this.mMufflerHatches.add((GT_MetaTileEntity_Hatch_Muffler) aMetaTileEntity);
-		}
-		return false;
-	}
-
-	public boolean addInputToMachineList(final IGregTechTileEntity aTileEntity, final int aBaseCasingIndex) {
-		if (aTileEntity == null) {
-			return false;
-		}
-		final IMetaTileEntity aMetaTileEntity = aTileEntity.getMetaTileEntity();
-		if (aMetaTileEntity == null) {
-			return false;
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Input) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-			((GT_MetaTileEntity_Hatch_Input) aMetaTileEntity).mRecipeMap = this.getRecipeMap();
-			return this.mInputHatches.add((GT_MetaTileEntity_Hatch_Input) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_InputBus) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-			((GT_MetaTileEntity_Hatch_InputBus) aMetaTileEntity).mRecipeMap = this.getRecipeMap();
-			return this.mInputBusses.add((GT_MetaTileEntity_Hatch_InputBus) aMetaTileEntity);
-		}
-		return false;
-	}
-
-	public boolean addOutputToMachineList(final IGregTechTileEntity aTileEntity, final int aBaseCasingIndex) {
-		if (aTileEntity == null) {
-			return false;
-		}
-		final IMetaTileEntity aMetaTileEntity = aTileEntity.getMetaTileEntity();
-		if (aMetaTileEntity == null) {
-			return false;
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Output) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-			return this.mOutputHatches.add((GT_MetaTileEntity_Hatch_Output) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_OutputBus) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-			return this.mOutputBusses.add((GT_MetaTileEntity_Hatch_OutputBus) aMetaTileEntity);
-		}
-		return false;
-	}
-
-	@Override
 	public String[] getInfoData() {
 		return new String[]{"Progress:", (this.mProgresstime / 20) + "secs", (this.mMaxProgresstime / 20) + "secs", "Efficiency:", (this.mEfficiency / 100.0F) + "%", "Problems:", "" + (this.getIdealStatus() - this.getRepairStatus())};
 	}
@@ -904,37 +62,24 @@ public abstract class GregtechMeta_MultiBlockBase extends MetaTileEntity {
 	public boolean isGivingInformation() {
 		return true;
 	}
-
-	@Override
-	public boolean allowPullStack(final IGregTechTileEntity aBaseMetaTileEntity, final int aIndex, final byte aSide, final ItemStack aStack) {
-		return false;
+	
+	public int getAmountOfOutputs() {
+		return 1;
 	}
-
+	
 	@Override
-	public boolean allowPutStack(final IGregTechTileEntity aBaseMetaTileEntity, final int aIndex, final byte aSide, final ItemStack aStack) {
-		return false;
-	}
-
-	/**
-	 * Called whenever the Machine successfully started a Process, useful for Sound Effects
-	 */
-	public void startProcess() {
-		//
+	public boolean isCorrectMachinePart(ItemStack paramItemStack) {
+		return true;
 	}
 
-	/**
-	 * Called whenever the Machine successfully finished a Process, useful for Sound Effects
-	 */
-	public void endProcess() {
-		//
+	@Override
+	public int getDamageToComponent(ItemStack paramItemStack) {
+		return 0;
 	}
+	
+    public void startSoundLoop(byte aIndex, double aX, double aY, double aZ) {}
 
-	/**
-	 * Called whenever the Machine aborted a Process, useful for Sound Effects
-	 */
-	public void abortProcess() {
-		//
-	}
+    public void startProcess() {}
 
 	public int getValidOutputSlots(final IGregTechTileEntity machineCalling, final GT_Recipe sRecipes, final ItemStack[] sInputs){
 		//Utils.LOG_INFO("Finding valid output slots for "+machineCalling.getInventoryName());
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_AlloyBlastSmelter.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_AlloyBlastSmelter.java
index be9236d..155bb71 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_AlloyBlastSmelter.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_AlloyBlastSmelter.java
@@ -3,6 +3,7 @@ package gtPlusPlus.xmod.gregtech.common.tileentities.machines.multi;
 import java.util.ArrayList;
 import java.util.Arrays;
 
+import gregtech.api.GregTech_API;
 import gregtech.api.enums.TAE;
 import gregtech.api.enums.Textures;
 import gregtech.api.gui.GT_GUIContainer_MultiMachine;
@@ -81,6 +82,17 @@ extends GT_MetaTileEntity_MultiBlockBase {
 	public boolean isCorrectMachinePart(final ItemStack aStack) {
 		return true;
 	}
+	
+	public void startSoundLoop(byte aIndex, double aX, double aY, double aZ) {
+        super.startSoundLoop(aIndex, aX, aY, aZ);
+        if (aIndex == 1) {
+            GT_Utility.doSoundAtClient((String) GregTech_API.sSoundList.get(Integer.valueOf(208)), 10, 1.0F, aX, aY, aZ);
+        }
+    }
+
+    public void startProcess() {
+        sendLoopStart((byte) 1);
+    }
 
 	@Override
 	public boolean isFacingValid(final byte aFacing) {
@@ -164,8 +176,6 @@ extends GT_MetaTileEntity_MultiBlockBase {
 		}
 		this.addMufflerToMachineList(aBaseMetaTileEntity.getIGregTechTileEntityOffset(xDir, 3, zDir), TAE.GTPP_INDEX(15));
 
-		final byte tUsedMeta = aBaseMetaTileEntity.getMetaIDOffset(xDir + 1, 2, zDir);
-
 		this.mHeatingCapacity = 20000;
 
 		for (int i = -1; i < 2; i++) {
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCokeOven.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCokeOven.java
index c39bd2e..6eb26eb 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCokeOven.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCokeOven.java
@@ -3,6 +3,7 @@ package gtPlusPlus.xmod.gregtech.common.tileentities.machines.multi;
 import java.util.ArrayList;
 import java.util.Arrays;
 
+import gregtech.api.GregTech_API;
 import gregtech.api.enums.TAE;
 import gregtech.api.enums.Textures;
 import gregtech.api.interfaces.ITexture;
@@ -76,6 +77,17 @@ extends GregtechMeta_MultiBlockBase {
 		return Recipe_GT.Gregtech_Recipe_Map.sCokeOvenRecipes;
 
 	}
+	
+	public void startSoundLoop(byte aIndex, double aX, double aY, double aZ) {
+        super.startSoundLoop(aIndex, aX, aY, aZ);
+        if (aIndex == 1) {
+            GT_Utility.doSoundAtClient((String) GregTech_API.sSoundList.get(Integer.valueOf(207)), 10, 1.0F, aX, aY, aZ);
+        }
+    }
+
+    public void startProcess() {
+        sendLoopStart((byte) 1);
+}
 
 	/* @Override
 	public boolean isCorrectMachinePart(ItemStack aStack) {
@@ -184,9 +196,6 @@ extends GregtechMeta_MultiBlockBase {
 	public boolean checkMachine(final IGregTechTileEntity aBaseMetaTileEntity, final ItemStack aStack) {
 		final int xDir = ForgeDirection.getOrientation(aBaseMetaTileEntity.getBackFacing()).offsetX;
 		final int zDir = ForgeDirection.getOrientation(aBaseMetaTileEntity.getBackFacing()).offsetZ;
-		int xr = aBaseMetaTileEntity.getXCoord();
-		int yr = aBaseMetaTileEntity.getYCoord();
-		int zr = aBaseMetaTileEntity.getZCoord();
 		this.mLevel = 0;
 		if (!aBaseMetaTileEntity.getAirOffset(xDir, 1, zDir)) {
 			return false;
@@ -224,20 +233,8 @@ extends GregtechMeta_MultiBlockBase {
 			}
 		}
 		for (int i = -1; i < 2; i++) {
-			xr = aBaseMetaTileEntity.getXCoord();
-			yr = aBaseMetaTileEntity.getYCoord();
-			zr = aBaseMetaTileEntity.getZCoord();
-			//Utils.LOG_WARNING("STEP 1 - x ["+xr+"]  y ["+yr+"]  z ["+zr+"]");
 			for (int j = -1; j < 2; j++) {
-				xr = aBaseMetaTileEntity.getXCoord();
-				yr = aBaseMetaTileEntity.getYCoord();
-				zr = aBaseMetaTileEntity.getZCoord();
-				//Utils.LOG_WARNING("STEP 2 - x ["+xr+"]  y ["+yr+"]  z ["+zr+"]");
 				if (((xDir + i) != 0) || ((zDir + j) != 0)) {
-					xr = aBaseMetaTileEntity.getXCoord();
-					yr = aBaseMetaTileEntity.getYCoord();
-					zr = aBaseMetaTileEntity.getZCoord();
-					//Utils.LOG_WARNING("STEP 3 - x ["+xr+"]  y ["+yr+"]  z ["+zr+"]");
 					final IGregTechTileEntity tTileEntity = aBaseMetaTileEntity.getIGregTechTileEntityOffset(xDir + i, 0, zDir + j);
 					if ((!this.addMaintenanceToMachineList(tTileEntity, TAE.GTPP_INDEX(1))) && (!this.addInputToMachineList(tTileEntity, TAE.GTPP_INDEX(1))) && (!this.addOutputToMachineList(tTileEntity, TAE.GTPP_INDEX(1))) && (!this.addEnergyInputToMachineList(tTileEntity, TAE.GTPP_INDEX(1)))) {
 						if (aBaseMetaTileEntity.getBlockOffset(xDir + i, 0, zDir + j) != ModBlocks.blockCasingsMisc) {
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialElectrolyzer.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialElectrolyzer.java
index 0930447..280af1d 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialElectrolyzer.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialElectrolyzer.java
@@ -18,7 +18,6 @@ import gregtech.api.util.GT_Utility;
 import gtPlusPlus.core.block.ModBlocks;
 import gtPlusPlus.core.lib.CORE;
 import gtPlusPlus.core.util.Utils;
-import gtPlusPlus.core.util.math.MathUtils;
 import gtPlusPlus.xmod.gregtech.api.gui.GUI_MultiMachine;
 import gtPlusPlus.xmod.gregtech.api.metatileentity.implementations.base.GregtechMeta_MultiBlockBase;
 import net.minecraft.block.Block;
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialThermalCentrifuge.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialThermalCentrifuge.java
index dce7d91..144784c 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialThermalCentrifuge.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialThermalCentrifuge.java
@@ -53,7 +53,7 @@ extends GregtechMeta_MultiBlockBase {
 				"Thermal processing Casings for the rest (8 at least!)",
 				"Causes " + (20 * getPollutionPerTick(null)) + " Pollution per second",
 				CORE.GT_Tooltip
-				
+
 		};
 	}
 
@@ -75,6 +75,17 @@ extends GregtechMeta_MultiBlockBase {
 		return GT_Recipe.GT_Recipe_Map.sThermalCentrifugeRecipes;
 	}
 
+	public void startSoundLoop(byte aIndex, double aX, double aY, double aZ) {
+		super.startSoundLoop(aIndex, aX, aY, aZ);
+		if (aIndex == 1) {
+			GT_Utility.doSoundAtClient((String) GregTech_API.sSoundList.get(Integer.valueOf(207)), 10, 1.0F, aX, aY, aZ);
+		}
+	}
+
+	public void startProcess() {
+		sendLoopStart((byte) 1);
+	}
+
 	@Override
 	public boolean isFacingValid(final byte aFacing) {
 		return aFacing > 1;
@@ -114,15 +125,15 @@ extends GregtechMeta_MultiBlockBase {
 							this.mEUt = (-this.mEUt);
 						}
 						this.mMaxProgresstime = Math.max(1, this.mMaxProgresstime);
-						
+
 						ItemStack mNewOutputs[] = new ItemStack[16];
-						
 
-						
+
+
 						for (int f=0;f<tRecipe.mOutputs.length;f++){
 							mNewOutputs[f] = tRecipe.getOutput(f);
 						}
-						
+
 						this.mOutputItems = mNewOutputs;
 						this.updateSlots();
 						return true;
-- 
1.9.5.msysgit.0

From 9828a8184b37db383957cb850ff127a959d4068b Mon Sep 17 00:00:00 2001
From: Alkalus <draknyte1@hotmail.com>
Date: Sat, 7 Oct 2017 15:01:41 +1000
Subject: [PATCH] + Added sounds to more Multi-Blocks $ Made my base Multiblock
 extend the GT base multi-block.

---
 .../base/GregtechMeta_MultiBlockBase.java          | 885 +--------------------
 .../GregtechMetaTileEntity_AlloyBlastSmelter.java  |  14 +-
 .../GregtechMetaTileEntity_IndustrialCokeOven.java |  27 +-
 ...gtechMetaTileEntity_IndustrialElectrolyzer.java |   1 -
 ...MetaTileEntity_IndustrialThermalCentrifuge.java |  21 +-
 5 files changed, 55 insertions(+), 893 deletions(-)

diff --git a/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/base/GregtechMeta_MultiBlockBase.java b/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/base/GregtechMeta_MultiBlockBase.java
index 738b14e..72e5a17 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/base/GregtechMeta_MultiBlockBase.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/base/GregtechMeta_MultiBlockBase.java
@@ -10,7 +10,6 @@ import gregtech.api.enums.*;
 import gregtech.api.interfaces.metatileentity.IMetaTileEntity;
 import gregtech.api.interfaces.tileentity.IGregTechTileEntity;
 import gregtech.api.items.GT_MetaGenerated_Tool;
-import gregtech.api.metatileentity.BaseMetaTileEntity;
 import gregtech.api.metatileentity.MetaTileEntity;
 import gregtech.api.metatileentity.implementations.*;
 import gregtech.api.objects.GT_ItemStack;
@@ -18,7 +17,6 @@ import gregtech.api.util.*;
 import gregtech.api.util.GT_Recipe.GT_Recipe_Map;
 import gregtech.common.items.GT_MetaGenerated_Tool_01;
 import gtPlusPlus.core.util.Utils;
-import gtPlusPlus.core.util.array.Pair;
 import gtPlusPlus.core.util.math.MathUtils;
 import gtPlusPlus.xmod.gregtech.api.gui.CONTAINER_MultiMachine;
 import gtPlusPlus.xmod.gregtech.api.gui.GUI_MultiMachine;
@@ -29,30 +27,16 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraftforge.fluids.FluidStack;
 
-public abstract class GregtechMeta_MultiBlockBase extends MetaTileEntity {
+public abstract class GregtechMeta_MultiBlockBase extends GT_MetaTileEntity_MultiBlockBase {
 
 	public static boolean disableMaintenance;
-	public boolean mMachine = false, mWrench = false, mScrewdriver = false, mSoftHammer = false, mHardHammer = false, mSolderingTool = true, mCrowbar = false, mRunningOnLoad = false;
-	public int mPollution = 0, mProgresstime = 0, mMaxProgresstime = 0, mEUt = 0, mEfficiencyIncrease = 0, mUpdate = 0, mStartUpCheck = 100, mRuntime = 0, mEfficiency = 0;
-	public ItemStack[] mOutputItems = null;
-	public FluidStack[] mOutputFluids = null;
-	public ArrayList<GT_MetaTileEntity_Hatch_Input> mInputHatches = new ArrayList<>();
-	public ArrayList<GT_MetaTileEntity_Hatch_Output> mOutputHatches = new ArrayList<>();
-	public ArrayList<GT_MetaTileEntity_Hatch_InputBus> mInputBusses = new ArrayList<>();
-	public ArrayList<GT_MetaTileEntity_Hatch_OutputBus> mOutputBusses = new ArrayList<>();
-	public ArrayList<GT_MetaTileEntity_Hatch_Dynamo> mDynamoHatches = new ArrayList<>();
-	public ArrayList<GT_MetaTileEntity_Hatch_Muffler> mMufflerHatches = new ArrayList<>();
-	public ArrayList<GT_MetaTileEntity_Hatch_Energy> mEnergyHatches = new ArrayList<>();
-	public ArrayList<GT_MetaTileEntity_Hatch_Maintenance> mMaintenanceHatches = new ArrayList<>();
 
 	public GregtechMeta_MultiBlockBase(final int aID, final String aName, final String aNameRegional) {
-		super(aID, aName, aNameRegional, 2);
-		GregtechMeta_MultiBlockBase.disableMaintenance = GregTech_API.sMachineFile.get(ConfigCategories.machineconfig, "MultiBlockMachines.disableMaintenance", false);
+		super(aID, aName, aNameRegional);
 	}
 
 	public GregtechMeta_MultiBlockBase(final String aName) {
-		super(aName, 2);
-		GregtechMeta_MultiBlockBase.disableMaintenance = GregTech_API.sMachineFile.get(ConfigCategories.machineconfig, "MultiBlockMachines.disableMaintenance", false);
+		super(aName);
 	}
 
 	public static boolean isValidMetaTileEntity(final MetaTileEntity aMetaTileEntity) {
@@ -60,120 +44,6 @@ public abstract class GregtechMeta_MultiBlockBase extends MetaTileEntity {
 	}
 
 	@Override
-	public boolean allowCoverOnSide(final byte aSide, final GT_ItemStack aCoverID) {
-		return aSide != this.getBaseMetaTileEntity().getFrontFacing();
-	}
-
-	@Override
-	public boolean isSimpleMachine() {
-		return false;
-	}
-
-	@Override
-	public boolean isFacingValid(final byte aFacing) {
-		return true;
-	}
-
-	@Override
-	public boolean isAccessAllowed(final EntityPlayer aPlayer) {
-		return true;
-	}
-
-	@Override
-	public boolean isValidSlot(final int aIndex) {
-		return aIndex > 0;
-	}
-
-	@Override
-	public int getProgresstime() {
-		return this.mProgresstime;
-	}
-
-	@Override
-	public int maxProgresstime() {
-		return this.mMaxProgresstime;
-	}
-
-	@Override
-	public int increaseProgress(final int aProgress) {
-		return aProgress;
-	}
-
-	@Override
-	public void saveNBTData(final NBTTagCompound aNBT) {
-		aNBT.setInteger("mEUt", this.mEUt);
-		aNBT.setInteger("mProgresstime", this.mProgresstime);
-		aNBT.setInteger("mMaxProgresstime", this.mMaxProgresstime);
-		aNBT.setInteger("mEfficiencyIncrease", this.mEfficiencyIncrease);
-		aNBT.setInteger("mEfficiency", this.mEfficiency);
-		aNBT.setInteger("mPollution", this.mPollution);
-		aNBT.setInteger("mRuntime", this.mRuntime);
-
-		if (this.mOutputItems != null) {
-			for (int i = 0; i < this.mOutputItems.length; i++) {
-				if (this.mOutputItems[i] != null) {
-					final NBTTagCompound tNBT = new NBTTagCompound();
-					this.mOutputItems[i].writeToNBT(tNBT);
-					aNBT.setTag("mOutputItem" + i, tNBT);
-				}
-			}
-		}
-		if (this.mOutputFluids != null) {
-			for (int i = 0; i < this.mOutputFluids.length; i++) {
-				if (this.mOutputFluids[i] != null) {
-					final NBTTagCompound tNBT = new NBTTagCompound();
-					this.mOutputFluids[i].writeToNBT(tNBT);
-					aNBT.setTag("mOutputFluids" + i, tNBT);
-				}
-			}
-		}
-
-		aNBT.setBoolean("mWrench", this.mWrench);
-		aNBT.setBoolean("mScrewdriver", this.mScrewdriver);
-		aNBT.setBoolean("mSoftHammer", this.mSoftHammer);
-		aNBT.setBoolean("mHardHammer", this.mHardHammer);
-		aNBT.setBoolean("mSolderingTool", this.mSolderingTool);
-		aNBT.setBoolean("mCrowbar", this.mCrowbar);
-	}
-
-	@Override
-	public void loadNBTData(final NBTTagCompound aNBT) {
-		this.mEUt = aNBT.getInteger("mEUt");
-		this.mProgresstime = aNBT.getInteger("mProgresstime");
-		this.mMaxProgresstime = aNBT.getInteger("mMaxProgresstime");
-		if (this.mMaxProgresstime > 0) {
-			this.mRunningOnLoad = true;
-		}
-		this.mEfficiencyIncrease = aNBT.getInteger("mEfficiencyIncrease");
-		this.mEfficiency = aNBT.getInteger("mEfficiency");
-		this.mPollution = aNBT.getInteger("mPollution");
-		this.mRuntime = aNBT.getInteger("mRuntime");
-		this.mOutputItems = new ItemStack[this.getAmountOfOutputs()];
-		for (int i = 0; i < this.mOutputItems.length; i++) {
-			this.mOutputItems[i] = GT_Utility.loadItem(aNBT, "mOutputItem" + i);
-		}
-		this.mOutputFluids = new FluidStack[this.getAmountOfOutputs()];
-		for (int i = 0; i < this.mOutputFluids.length; i++) {
-			this.mOutputFluids[i] = GT_Utility.loadFluid(aNBT, "mOutputFluids" + i);
-		}
-		this.mWrench = aNBT.getBoolean("mWrench");
-		this.mScrewdriver = aNBT.getBoolean("mScrewdriver");
-		this.mSoftHammer = aNBT.getBoolean("mSoftHammer");
-		this.mHardHammer = aNBT.getBoolean("mHardHammer");
-		this.mSolderingTool = aNBT.getBoolean("mSolderingTool");
-		this.mCrowbar = aNBT.getBoolean("mCrowbar");
-	}
-
-	@Override
-	public boolean onRightclick(final IGregTechTileEntity aBaseMetaTileEntity, final EntityPlayer aPlayer) {
-		if (aBaseMetaTileEntity.isClientSide()) {
-			return true;
-		}
-		aBaseMetaTileEntity.openGUI(aPlayer);
-		return true;
-	}
-
-	@Override
 	public Object getServerGUI(final int aID, final InventoryPlayer aPlayerInventory, final IGregTechTileEntity aBaseMetaTileEntity) {
 		return new CONTAINER_MultiMachine(aPlayerInventory, aBaseMetaTileEntity);
 	}
@@ -184,718 +54,6 @@ public abstract class GregtechMeta_MultiBlockBase extends MetaTileEntity {
 	}
 
 	@Override
-	public byte getTileEntityBaseType() {
-		return 2;
-	}
-
-	@Override
-	public void onMachineBlockUpdate() {
-		this.mUpdate = 50;
-	}
-
-	@Override
-	public void onPostTick(final IGregTechTileEntity aBaseMetaTileEntity, final long aTick) {
-		if (aBaseMetaTileEntity.isServerSide()) {
-			if (this.mEfficiency < 0) {
-				this.mEfficiency = 0;
-			}
-			if ((--this.mUpdate == 0) || (--this.mStartUpCheck == 0)) {
-				this.mInputHatches.clear();
-				this.mInputBusses.clear();
-				this.mOutputHatches.clear();
-				this.mOutputBusses.clear();
-				this.mDynamoHatches.clear();
-				this.mEnergyHatches.clear();
-				this.mMufflerHatches.clear();
-				this.mMaintenanceHatches.clear();
-				this.mMachine = this.checkMachine(aBaseMetaTileEntity, this.mInventory[1]);
-			}
-			if (this.mStartUpCheck < 0) {
-				if (this.mMachine) {
-					for (final GT_MetaTileEntity_Hatch_Maintenance tHatch : this.mMaintenanceHatches) {
-						if (isValidMetaTileEntity(tHatch)) {
-							if (!GregtechMeta_MultiBlockBase.disableMaintenance) {
-								if (tHatch.mWrench) {
-									this.mWrench = true;
-								}
-								if (tHatch.mScrewdriver) {
-									this.mScrewdriver = true;
-								}
-								if (tHatch.mSoftHammer) {
-									this.mSoftHammer = true;
-								}
-								if (tHatch.mHardHammer) {
-									this.mHardHammer = true;
-								}
-								if (tHatch.mSolderingTool) {
-									this.mSolderingTool = true;
-								}
-								if (tHatch.mCrowbar) {
-									this.mCrowbar = true;
-								}
-							} else {
-								this.mWrench = true;
-								this.mScrewdriver = true;
-								this.mSoftHammer = true;
-								this.mHardHammer = true;
-								this.mSolderingTool = true;
-								this.mCrowbar = true;
-							}
-
-							tHatch.mWrench = false;
-							tHatch.mScrewdriver = false;
-							tHatch.mSoftHammer = false;
-							tHatch.mHardHammer = false;
-							tHatch.mSolderingTool = true;
-							tHatch.mCrowbar = false;
-						}
-					}
-					if (this.getRepairStatus() > 0) {
-						if ((this.mMaxProgresstime > 0) && this.doRandomMaintenanceDamage()) {
-							if (this.onRunningTick(this.mInventory[1])) {
-								if (!this.polluteEnvironment(this.getPollutionPerTick(this.mInventory[1]))) {
-									this.stopMachine();
-								}
-								if ((this.mMaxProgresstime > 0) && (++this.mProgresstime >= this.mMaxProgresstime)) {
-									if (this.mOutputItems != null) {
-										for (final ItemStack tStack : this.mOutputItems) {
-											if (tStack != null) {
-												try {
-													GT_Mod.achievements.issueAchivementHatch(aBaseMetaTileEntity.getWorld().getPlayerEntityByName(aBaseMetaTileEntity.getOwnerName()), tStack);
-												} catch (final Exception e) {
-												}
-												this.addOutput(tStack);
-											}
-										}
-									}
-									if ((this.mOutputFluids != null) && (this.mOutputFluids.length == 1)) {
-										for (final FluidStack tStack : this.mOutputFluids) {
-											if (tStack != null) {
-												this.addOutput(tStack);
-											}
-										}
-									} else if ((this.mOutputFluids != null) && (this.mOutputFluids.length > 1)) {
-										this.addFluidOutputs(this.mOutputFluids);
-									}
-									this.mEfficiency = Math.max(0, Math.min(this.mEfficiency + this.mEfficiencyIncrease, this.getMaxEfficiency(this.mInventory[1]) - ((this.getIdealStatus() - this.getRepairStatus()) * 1000)));
-									this.mOutputItems = null;
-									this.mProgresstime = 0;
-									this.mMaxProgresstime = 0;
-									this.mEfficiencyIncrease = 0;
-									if (aBaseMetaTileEntity.isAllowedToWork()) {
-										this.checkRecipe(this.mInventory[1]);
-									}
-									if ((this.mOutputFluids != null) && (this.mOutputFluids.length > 0)) {
-										if (this.mOutputFluids.length > 1) {
-											GT_Mod.achievements.issueAchievement(aBaseMetaTileEntity.getWorld().getPlayerEntityByName(aBaseMetaTileEntity.getOwnerName()), "oilplant");
-										}
-									}
-								}
-							}
-						} else {
-							if (((aTick % 100) == 0) || aBaseMetaTileEntity.hasWorkJustBeenEnabled() || aBaseMetaTileEntity.hasInventoryBeenModified()) {
-
-								if (aBaseMetaTileEntity.isAllowedToWork()) {
-									this.checkRecipe(this.mInventory[1]);
-								}
-								if (this.mMaxProgresstime <= 0) {
-									this.mEfficiency = Math.max(0, this.mEfficiency - 1000);
-								}
-							}
-						}
-					} else {
-						this.stopMachine();
-					}
-				} else {
-					this.stopMachine();
-				}
-			}
-			aBaseMetaTileEntity.setErrorDisplayID((aBaseMetaTileEntity.getErrorDisplayID() & ~127) | (this.mWrench ? 0 : 1) | (this.mScrewdriver ? 0 : 2) | (this.mSoftHammer ? 0 : 4) | (this.mHardHammer ? 0 : 8) | (this.mSolderingTool ? 0 : 16) | (this.mCrowbar ? 0 : 32) | (this.mMachine ? 0 : 64));
-			aBaseMetaTileEntity.setActive(this.mMaxProgresstime > 0);
-		}
-	}
-
-	public boolean polluteEnvironment(final int aPollutionLevel) {
-		this.mPollution += aPollutionLevel;
-		for (final GT_MetaTileEntity_Hatch_Muffler tHatch : this.mMufflerHatches) {
-			if (isValidMetaTileEntity(tHatch)) {
-				if (this.mPollution >= 10000) {
-					if (tHatch.polluteEnvironment()) {
-						this.mPollution -= 10000;
-					}
-				} else {
-					break;
-				}
-			}
-		}
-		return this.mPollution < 10000;
-	}
-
-	/**
-	 * Called every tick the Machine runs
-	 */
-	public boolean onRunningTick(final ItemStack aStack) {
-		if (this.mEUt > 0) {
-			this.addEnergyOutput(((long) this.mEUt * this.mEfficiency) / 10000);
-			return true;
-		}
-		if (this.mEUt < 0) {
-			if (!this.drainEnergyInput(((long) -this.mEUt * 10000) / Math.max(1000, this.mEfficiency))) {
-				this.stopMachine();
-				return false;
-			}
-		}
-		return true;
-	}
-
-	/**
-	 * Checks if this is a Correct Machine Part for this kind of Machine (Turbine Rotor for example)
-	 */
-	//public abstract boolean isCorrectMachinePart(ItemStack aStack);
-
-	/**
-	 * Checks the Recipe
-	 */
-	public abstract boolean checkRecipe(ItemStack aStack);
-
-	/**
-	 * Checks the Machine. You have to assign the MetaTileEntities for the Hatches here.
-	 */
-	public abstract boolean checkMachine(IGregTechTileEntity aBaseMetaTileEntity, ItemStack aStack);
-
-	/**
-	 * Gets the maximum Efficiency that spare Part can get (0 - 10000)
-	 */
-	public abstract int getMaxEfficiency(ItemStack aStack);
-
-	/**
-	 * Gets the pollution this Device outputs to a Muffler per tick (10000 = one Pullution Block)
-	 */
-	public abstract int getPollutionPerTick(ItemStack aStack);
-
-	/**
-	 * Gets the damage to the ItemStack, usually 0 or 1.
-	 */
-	//public abstract int getDamageToComponent(ItemStack aStack);
-
-	/**
-	 * Gets the Amount of possibly outputted Items for loading the Output Stack Array from NBT.
-	 * This should be the largest Amount that can ever happen legitimately.
-	 */
-	public abstract int getAmountOfOutputs();
-
-	/**
-	 * If it explodes when the Component has to be replaced.
-	 */
-	public abstract boolean explodesOnComponentBreak(ItemStack aStack);
-
-	public void stopMachine() {
-		this.mOutputItems = null;
-		this.mEUt = 0;
-		this.mEfficiency = 0;
-		this.mProgresstime = 0;
-		this.mMaxProgresstime = 0;
-		this.mEfficiencyIncrease = 0;
-		this.getBaseMetaTileEntity().disableWorking();
-	}
-
-	public int getRepairStatus() {
-		return (this.mWrench ? 1 : 0) + (this.mScrewdriver ? 1 : 0) + (this.mSoftHammer ? 1 : 0) + (this.mHardHammer ? 1 : 0) + (this.mSolderingTool ? 1 : 0) + (this.mCrowbar ? 1 : 0);
-	}
-
-	public int getIdealStatus() {
-		return 6;
-	}
-
-	public boolean doRandomMaintenanceDamage() {
-		if (this.getRepairStatus() == 0) {
-			this.stopMachine();
-			return false;
-		}
-		if (this.mRuntime++ > 1000) {
-			this.mRuntime = 0;
-			if (this.getBaseMetaTileEntity().getRandomNumber(6000) == 0) {
-				switch (this.getBaseMetaTileEntity().getRandomNumber(6)) {
-				case 0:
-					this.mWrench = false;
-					break;
-				case 1:
-					this.mScrewdriver = false;
-					break;
-				case 2:
-					this.mSoftHammer = false;
-					break;
-				case 3:
-					this.mHardHammer = false;
-					break;
-				case 4:
-					this.mSolderingTool = true;
-					break;
-				case 5:
-					this.mCrowbar = false;
-					break;
-				}
-			}
-			if ((this.mInventory[1] != null) && (this.getBaseMetaTileEntity().getRandomNumber(2) == 0) && !this.mInventory[1].getUnlocalizedName().startsWith("gt.blockmachines.basicmachine.")) {
-				if (this.mInventory[1].getItem() instanceof GT_MetaGenerated_Tool_01) {
-					final NBTTagCompound tNBT = this.mInventory[1].getTagCompound();
-					if (tNBT != null) {
-						NBTTagCompound tNBT2 = tNBT.getCompoundTag("GT.CraftingComponents");
-						if (!tNBT.getBoolean("mDis")) {
-							tNBT2 = new NBTTagCompound();
-							final Materials tMaterial = GT_MetaGenerated_Tool.getPrimaryMaterial(this.mInventory[1]);
-							final ItemStack tTurbine = GT_OreDictUnificator.get(OrePrefixes.turbineBlade, tMaterial, 1);
-							final int i = this.mInventory[1].getItemDamage();
-							if (i == 170) {
-								ItemStack tStack = GT_Utility.copyAmount(1, tTurbine);
-								tNBT2.setTag("Ingredient.0", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.1", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.2", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.3", tStack.writeToNBT(new NBTTagCompound()));
-								tStack = GT_OreDictUnificator.get(OrePrefixes.stickLong, Materials.Magnalium, 1);
-								tNBT2.setTag("Ingredient.4", tStack.writeToNBT(new NBTTagCompound()));
-							} else if (i == 172) {
-								ItemStack tStack = GT_Utility.copyAmount(1, tTurbine);
-								tNBT2.setTag("Ingredient.0", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.1", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.2", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.3", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.5", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.6", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.7", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.8", tStack.writeToNBT(new NBTTagCompound()));
-								tStack = GT_OreDictUnificator.get(OrePrefixes.stickLong, Materials.Titanium, 1);
-								tNBT2.setTag("Ingredient.4", tStack.writeToNBT(new NBTTagCompound()));
-							} else if (i == 174) {
-								ItemStack tStack = GT_Utility.copyAmount(2, tTurbine);
-								tNBT2.setTag("Ingredient.0", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.1", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.2", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.3", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.5", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.6", tStack.writeToNBT(new NBTTagCompound()));
-								tStack = GT_OreDictUnificator.get(OrePrefixes.stickLong, Materials.TungstenSteel, 1);
-								tNBT2.setTag("Ingredient.4", tStack.writeToNBT(new NBTTagCompound()));
-							} else if (i == 176) {
-								ItemStack tStack = GT_Utility.copyAmount(2, tTurbine);
-								tNBT2.setTag("Ingredient.0", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.1", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.2", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.3", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.5", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.6", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.7", tStack.writeToNBT(new NBTTagCompound()));
-								tNBT2.setTag("Ingredient.8", tStack.writeToNBT(new NBTTagCompound()));
-								tStack = GT_OreDictUnificator.get(OrePrefixes.stickLong, Materials.Americium, 1);
-								tNBT2.setTag("Ingredient.4", tStack.writeToNBT(new NBTTagCompound()));
-							}
-							tNBT.setTag("GT.CraftingComponents", tNBT2);
-							tNBT.setBoolean("mDis", true);
-							this.mInventory[1].setTagCompound(tNBT);
-
-						}
-					}
-
-					((GT_MetaGenerated_Tool) this.mInventory[1].getItem()).doDamage(this.mInventory[1], (long) Math.min(this.mEUt / 5, Math.pow(this.mEUt, 0.7)));
-					if (this.mInventory[1].stackSize == 0) {
-						this.mInventory[1] = null;
-					}
-				}
-			}
-		}
-		return true;
-	}
-
-	public void explodeMultiblock() {
-		this.mInventory[1] = null;
-		for (final MetaTileEntity tTileEntity : this.mInputBusses) {
-			tTileEntity.getBaseMetaTileEntity().doExplosion(V[8]);
-		}
-		for (final MetaTileEntity tTileEntity : this.mOutputBusses) {
-			tTileEntity.getBaseMetaTileEntity().doExplosion(V[8]);
-		}
-		for (final MetaTileEntity tTileEntity : this.mInputHatches) {
-			tTileEntity.getBaseMetaTileEntity().doExplosion(V[8]);
-		}
-		for (final MetaTileEntity tTileEntity : this.mOutputHatches) {
-			tTileEntity.getBaseMetaTileEntity().doExplosion(V[8]);
-		}
-		for (final MetaTileEntity tTileEntity : this.mDynamoHatches) {
-			tTileEntity.getBaseMetaTileEntity().doExplosion(V[8]);
-		}
-		for (final MetaTileEntity tTileEntity : this.mMufflerHatches) {
-			tTileEntity.getBaseMetaTileEntity().doExplosion(V[8]);
-		}
-		for (final MetaTileEntity tTileEntity : this.mEnergyHatches) {
-			tTileEntity.getBaseMetaTileEntity().doExplosion(V[8]);
-		}
-		for (final MetaTileEntity tTileEntity : this.mMaintenanceHatches) {
-			tTileEntity.getBaseMetaTileEntity().doExplosion(V[8]);
-		}
-		this.getBaseMetaTileEntity().doExplosion(V[8]);
-	}
-
-	public boolean addEnergyOutput(final long aEU) {
-		if (aEU <= 0) {
-			return true;
-		}
-		for (final GT_MetaTileEntity_Hatch_Dynamo tHatch : this.mDynamoHatches) {
-			if (isValidMetaTileEntity(tHatch)) {
-				if (tHatch.getBaseMetaTileEntity().increaseStoredEnergyUnits(aEU, false)) {
-					return true;
-				}
-			}
-		}
-		return false;
-	}
-
-	public long getMaxInputVoltage() {
-		long rVoltage = 0;
-		for (final GT_MetaTileEntity_Hatch_Energy tHatch : this.mEnergyHatches) {
-			if (isValidMetaTileEntity(tHatch)) {
-				rVoltage += tHatch.getBaseMetaTileEntity().getInputVoltage();
-			}
-		}
-		return rVoltage;
-	}
-
-	public boolean drainEnergyInput(final long aEU) {
-		if (aEU <= 0) {
-			return true;
-		}
-		for (final GT_MetaTileEntity_Hatch_Energy tHatch : this.mEnergyHatches) {
-			if (isValidMetaTileEntity(tHatch)) {
-				if (tHatch.getBaseMetaTileEntity().decreaseStoredEnergyUnits(aEU, false)) {
-					return true;
-				}
-			}
-		}
-		return false;
-	}
-
-	public boolean addOutput(final FluidStack aLiquid) {
-		if (aLiquid == null) {
-			return false;
-		}
-		final FluidStack tLiquid = aLiquid.copy();
-		for (final GT_MetaTileEntity_Hatch_Output tHatch : this.mOutputHatches) {
-			if (isValidMetaTileEntity(tHatch) && GT_ModHandler.isSteam(aLiquid) ? tHatch.outputsSteam() : tHatch.outputsLiquids()) {
-				final int tAmount = tHatch.fill(tLiquid, false);
-				if (tAmount >= tLiquid.amount) {
-					return tHatch.fill(tLiquid, true) >= tLiquid.amount;
-				} else if (tAmount > 0) {
-					tLiquid.amount = tLiquid.amount - tHatch.fill(tLiquid, true);
-				}
-			}
-		}
-		return false;
-	}
-
-	private void addFluidOutputs(final FluidStack[] mOutputFluids2) {
-		for (int i = 0; i < mOutputFluids2.length; i++) {
-			if ((this.mOutputHatches.size() > i) && (this.mOutputHatches.get(i) != null) && (mOutputFluids2[i] != null) && isValidMetaTileEntity(this.mOutputHatches.get(i))) {
-				this.mOutputHatches.get(i).fill(mOutputFluids2[i], true);
-			}
-		}
-
-	}
-
-	public boolean depleteInput(final FluidStack aLiquid) {
-		if (aLiquid == null) {
-			return false;
-		}
-		for (final GT_MetaTileEntity_Hatch_Input tHatch : this.mInputHatches) {
-			tHatch.mRecipeMap = this.getRecipeMap();
-			if (isValidMetaTileEntity(tHatch)) {
-				FluidStack tLiquid = tHatch.getFluid();
-				if ((tLiquid != null) && tLiquid.isFluidEqual(aLiquid)) {
-					tLiquid = tHatch.drain(aLiquid.amount, false);
-					if ((tLiquid != null) && (tLiquid.amount >= aLiquid.amount)) {
-						tLiquid = tHatch.drain(aLiquid.amount, true);
-						return (tLiquid != null) && (tLiquid.amount >= aLiquid.amount);
-					}
-				}
-			}
-		}
-		return false;
-	}
-
-	public boolean addOutput(ItemStack aStack) {
-		if (GT_Utility.isStackInvalid(aStack)) {
-			return false;
-		}
-		aStack = GT_Utility.copy(aStack);
-		//		FluidStack aLiquid = GT_Utility.getFluidForFilledItem(aStack, true);
-		//		if (aLiquid == null) {
-		for (final GT_MetaTileEntity_Hatch_OutputBus tHatch : this.mOutputBusses) {
-			if (isValidMetaTileEntity(tHatch)) {
-				for (int i = tHatch.getSizeInventory() - 1; i >= 0; i--) {
-					if (tHatch.getBaseMetaTileEntity().addStackToSlot(i, aStack)) {
-						return true;
-					}
-				}
-			}
-		}
-		for (final GT_MetaTileEntity_Hatch_Output tHatch : this.mOutputHatches) {
-			if (isValidMetaTileEntity(tHatch) && tHatch.outputsItems()) {
-				if (tHatch.getBaseMetaTileEntity().addStackToSlot(1, aStack)) {
-					return true;
-				}
-			}
-		}
-		//		}else {
-		//			for (GT_MetaTileEntity_Hatch_Output tHatch : mOutputHatches) {
-		//				if (isValidMetaTileEntity(tHatch) && GT_ModHandler.isSteam(aLiquid)?tHatch.outputsSteam():tHatch.outputsLiquids()) {
-		//					int tAmount = tHatch.fill(aLiquid, false);
-		//					if (tAmount >= aLiquid.amount) {
-		//						return tHatch.fill(aLiquid, true) >= aLiquid.amount;
-		//					}
-		//				}
-		//			}
-		//		}
-		return false;
-	}
-
-	public boolean depleteInput(final ItemStack aStack) {
-		if (GT_Utility.isStackInvalid(aStack)) {
-			return false;
-		}
-		final FluidStack aLiquid = GT_Utility.getFluidForFilledItem(aStack, true);
-		if (aLiquid != null) {
-			return this.depleteInput(aLiquid);
-		}
-		for (final GT_MetaTileEntity_Hatch_Input tHatch : this.mInputHatches) {
-			tHatch.mRecipeMap = this.getRecipeMap();
-			if (isValidMetaTileEntity(tHatch)) {
-				if (GT_Utility.areStacksEqual(aStack, tHatch.getBaseMetaTileEntity().getStackInSlot(0))) {
-					if (tHatch.getBaseMetaTileEntity().getStackInSlot(0).stackSize >= aStack.stackSize) {
-						tHatch.getBaseMetaTileEntity().decrStackSize(0, aStack.stackSize);
-						return true;
-					}
-				}
-			}
-		}
-		for (final GT_MetaTileEntity_Hatch_InputBus tHatch : this.mInputBusses) {
-			tHatch.mRecipeMap = this.getRecipeMap();
-			if (isValidMetaTileEntity(tHatch)) {
-				for (int i = tHatch.getBaseMetaTileEntity().getSizeInventory() - 1; i >= 0; i--) {
-					if (GT_Utility.areStacksEqual(aStack, tHatch.getBaseMetaTileEntity().getStackInSlot(i))) {
-						if (tHatch.getBaseMetaTileEntity().getStackInSlot(0).stackSize >= aStack.stackSize) {
-							tHatch.getBaseMetaTileEntity().decrStackSize(0, aStack.stackSize);
-							return true;
-						}
-					}
-				}
-			}
-		}
-		return false;
-	}
-
-	public ArrayList<ItemStack> getStoredOutputs() {
-		final ArrayList<ItemStack> rList = new ArrayList<>();
-		for (final GT_MetaTileEntity_Hatch_Output tHatch : this.mOutputHatches) {
-			if (isValidMetaTileEntity(tHatch)) {
-				rList.add(tHatch.getBaseMetaTileEntity().getStackInSlot(1));
-			}
-		}
-		for (final GT_MetaTileEntity_Hatch_OutputBus tHatch : this.mOutputBusses) {
-			if (isValidMetaTileEntity(tHatch)) {
-				for (int i = tHatch.getBaseMetaTileEntity().getSizeInventory() - 1; i >= 0; i--) {
-					rList.add(tHatch.getBaseMetaTileEntity().getStackInSlot(i));
-				}
-			}
-		}
-		return rList;
-	}
-
-	public ArrayList<FluidStack> getStoredFluids() {
-		final ArrayList<FluidStack> rList = new ArrayList<>();
-		for (final GT_MetaTileEntity_Hatch_Input tHatch : this.mInputHatches) {
-			tHatch.mRecipeMap = this.getRecipeMap();
-			if (isValidMetaTileEntity(tHatch) && (tHatch.getFillableStack() != null)) {
-				rList.add(tHatch.getFillableStack());
-			}
-		}
-		return rList;
-	}
-
-	public ArrayList<ItemStack> getStoredInputs() {
-		final ArrayList<ItemStack> rList = new ArrayList<>();
-		for (final GT_MetaTileEntity_Hatch_Input tHatch : this.mInputHatches) {
-			tHatch.mRecipeMap = this.getRecipeMap();
-			if (isValidMetaTileEntity(tHatch) && (tHatch.getBaseMetaTileEntity().getStackInSlot(0) != null)) {
-				rList.add(tHatch.getBaseMetaTileEntity().getStackInSlot(0));
-			}
-		}
-		for (final GT_MetaTileEntity_Hatch_InputBus tHatch : this.mInputBusses) {
-			tHatch.mRecipeMap = this.getRecipeMap();
-			if (isValidMetaTileEntity(tHatch)) {
-				for (int i = tHatch.getBaseMetaTileEntity().getSizeInventory() - 1; i >= 0; i--) {
-					if (tHatch.getBaseMetaTileEntity().getStackInSlot(i) != null) {
-						rList.add(tHatch.getBaseMetaTileEntity().getStackInSlot(i));
-					}
-				}
-			}
-		}
-		return rList;
-	}
-
-	public GT_Recipe_Map getRecipeMap() {
-		return null;
-	}
-
-	public void updateSlots() {
-		for (final GT_MetaTileEntity_Hatch_Input tHatch : this.mInputHatches) {
-			if (isValidMetaTileEntity(tHatch)) {
-				tHatch.updateSlots();
-			}
-		}
-		for (final GT_MetaTileEntity_Hatch_InputBus tHatch : this.mInputBusses) {
-			if (isValidMetaTileEntity(tHatch)) {
-				tHatch.updateSlots();
-			}
-		}
-	}
-
-	public boolean addToMachineList(final IGregTechTileEntity aTileEntity, final int aBaseCasingIndex) {
-		if (aTileEntity == null) {
-			return false;
-		}
-		final IMetaTileEntity aMetaTileEntity = aTileEntity.getMetaTileEntity();
-		if (aMetaTileEntity == null) {
-			return false;
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Input) {
-			return this.mInputHatches.add((GT_MetaTileEntity_Hatch_Input) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_InputBus) {
-			return this.mInputBusses.add((GT_MetaTileEntity_Hatch_InputBus) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Output) {
-			return this.mOutputHatches.add((GT_MetaTileEntity_Hatch_Output) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_OutputBus) {
-			return this.mOutputBusses.add((GT_MetaTileEntity_Hatch_OutputBus) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Energy) {
-			return this.mEnergyHatches.add((GT_MetaTileEntity_Hatch_Energy) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Dynamo) {
-			return this.mDynamoHatches.add((GT_MetaTileEntity_Hatch_Dynamo) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Maintenance) {
-			return this.mMaintenanceHatches.add((GT_MetaTileEntity_Hatch_Maintenance) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Muffler) {
-			return this.mMufflerHatches.add((GT_MetaTileEntity_Hatch_Muffler) aMetaTileEntity);
-		}
-		return false;
-	}
-
-	public boolean addMaintenanceToMachineList(final IGregTechTileEntity aTileEntity, final int aBaseCasingIndex) {
-		if (aTileEntity == null) {
-			return false;
-		}
-		final IMetaTileEntity aMetaTileEntity = aTileEntity.getMetaTileEntity();
-		if (aMetaTileEntity == null) {
-			return false;
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Maintenance) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-			return this.mMaintenanceHatches.add((GT_MetaTileEntity_Hatch_Maintenance) aMetaTileEntity);
-		}
-		return false;
-	}
-
-	public boolean addEnergyInputToMachineList(final IGregTechTileEntity aTileEntity, final int aBaseCasingIndex) {
-		if (aTileEntity == null) {
-			return false;
-		}
-		final IMetaTileEntity aMetaTileEntity = aTileEntity.getMetaTileEntity();
-		if (aMetaTileEntity == null) {
-			return false;
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Energy) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-			return this.mEnergyHatches.add((GT_MetaTileEntity_Hatch_Energy) aMetaTileEntity);
-		}
-		return false;
-	}
-
-	public boolean addDynamoToMachineList(final IGregTechTileEntity aTileEntity, final int aBaseCasingIndex) {
-		if (aTileEntity == null) {
-			return false;
-		}
-		final IMetaTileEntity aMetaTileEntity = aTileEntity.getMetaTileEntity();
-		if (aMetaTileEntity == null) {
-			return false;
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Dynamo) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-			return this.mDynamoHatches.add((GT_MetaTileEntity_Hatch_Dynamo) aMetaTileEntity);
-		}
-		return false;
-	}
-
-	public boolean addMufflerToMachineList(final IGregTechTileEntity aTileEntity, final int aBaseCasingIndex) {
-		if (aTileEntity == null) {
-			return false;
-		}
-		final IMetaTileEntity aMetaTileEntity = aTileEntity.getMetaTileEntity();
-		if (aMetaTileEntity == null) {
-			return false;
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Muffler) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-			return this.mMufflerHatches.add((GT_MetaTileEntity_Hatch_Muffler) aMetaTileEntity);
-		}
-		return false;
-	}
-
-	public boolean addInputToMachineList(final IGregTechTileEntity aTileEntity, final int aBaseCasingIndex) {
-		if (aTileEntity == null) {
-			return false;
-		}
-		final IMetaTileEntity aMetaTileEntity = aTileEntity.getMetaTileEntity();
-		if (aMetaTileEntity == null) {
-			return false;
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Input) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-			((GT_MetaTileEntity_Hatch_Input) aMetaTileEntity).mRecipeMap = this.getRecipeMap();
-			return this.mInputHatches.add((GT_MetaTileEntity_Hatch_Input) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_InputBus) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-			((GT_MetaTileEntity_Hatch_InputBus) aMetaTileEntity).mRecipeMap = this.getRecipeMap();
-			return this.mInputBusses.add((GT_MetaTileEntity_Hatch_InputBus) aMetaTileEntity);
-		}
-		return false;
-	}
-
-	public boolean addOutputToMachineList(final IGregTechTileEntity aTileEntity, final int aBaseCasingIndex) {
-		if (aTileEntity == null) {
-			return false;
-		}
-		final IMetaTileEntity aMetaTileEntity = aTileEntity.getMetaTileEntity();
-		if (aMetaTileEntity == null) {
-			return false;
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_Output) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-			return this.mOutputHatches.add((GT_MetaTileEntity_Hatch_Output) aMetaTileEntity);
-		}
-		if (aMetaTileEntity instanceof GT_MetaTileEntity_Hatch_OutputBus) {
-			((GT_MetaTileEntity_Hatch) aMetaTileEntity).mMachineBlock = (byte) aBaseCasingIndex;
-			return this.mOutputBusses.add((GT_MetaTileEntity_Hatch_OutputBus) aMetaTileEntity);
-		}
-		return false;
-	}
-
-	@Override
 	public String[] getInfoData() {
 		return new String[]{"Progress:", (this.mProgresstime / 20) + "secs", (this.mMaxProgresstime / 20) + "secs", "Efficiency:", (this.mEfficiency / 100.0F) + "%", "Problems:", "" + (this.getIdealStatus() - this.getRepairStatus())};
 	}
@@ -904,37 +62,24 @@ public abstract class GregtechMeta_MultiBlockBase extends MetaTileEntity {
 	public boolean isGivingInformation() {
 		return true;
 	}
-
-	@Override
-	public boolean allowPullStack(final IGregTechTileEntity aBaseMetaTileEntity, final int aIndex, final byte aSide, final ItemStack aStack) {
-		return false;
+	
+	public int getAmountOfOutputs() {
+		return 1;
 	}
-
+	
 	@Override
-	public boolean allowPutStack(final IGregTechTileEntity aBaseMetaTileEntity, final int aIndex, final byte aSide, final ItemStack aStack) {
-		return false;
-	}
-
-	/**
-	 * Called whenever the Machine successfully started a Process, useful for Sound Effects
-	 */
-	public void startProcess() {
-		//
+	public boolean isCorrectMachinePart(ItemStack paramItemStack) {
+		return true;
 	}
 
-	/**
-	 * Called whenever the Machine successfully finished a Process, useful for Sound Effects
-	 */
-	public void endProcess() {
-		//
+	@Override
+	public int getDamageToComponent(ItemStack paramItemStack) {
+		return 0;
 	}
+	
+    public void startSoundLoop(byte aIndex, double aX, double aY, double aZ) {}
 
-	/**
-	 * Called whenever the Machine aborted a Process, useful for Sound Effects
-	 */
-	public void abortProcess() {
-		//
-	}
+    public void startProcess() {}
 
 	public int getValidOutputSlots(final IGregTechTileEntity machineCalling, final GT_Recipe sRecipes, final ItemStack[] sInputs){
 		//Utils.LOG_INFO("Finding valid output slots for "+machineCalling.getInventoryName());
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_AlloyBlastSmelter.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_AlloyBlastSmelter.java
index be9236d..155bb71 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_AlloyBlastSmelter.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_AlloyBlastSmelter.java
@@ -3,6 +3,7 @@ package gtPlusPlus.xmod.gregtech.common.tileentities.machines.multi;
 import java.util.ArrayList;
 import java.util.Arrays;
 
+import gregtech.api.GregTech_API;
 import gregtech.api.enums.TAE;
 import gregtech.api.enums.Textures;
 import gregtech.api.gui.GT_GUIContainer_MultiMachine;
@@ -81,6 +82,17 @@ extends GT_MetaTileEntity_MultiBlockBase {
 	public boolean isCorrectMachinePart(final ItemStack aStack) {
 		return true;
 	}
+	
+	public void startSoundLoop(byte aIndex, double aX, double aY, double aZ) {
+        super.startSoundLoop(aIndex, aX, aY, aZ);
+        if (aIndex == 1) {
+            GT_Utility.doSoundAtClient((String) GregTech_API.sSoundList.get(Integer.valueOf(208)), 10, 1.0F, aX, aY, aZ);
+        }
+    }
+
+    public void startProcess() {
+        sendLoopStart((byte) 1);
+    }
 
 	@Override
 	public boolean isFacingValid(final byte aFacing) {
@@ -164,8 +176,6 @@ extends GT_MetaTileEntity_MultiBlockBase {
 		}
 		this.addMufflerToMachineList(aBaseMetaTileEntity.getIGregTechTileEntityOffset(xDir, 3, zDir), TAE.GTPP_INDEX(15));
 
-		final byte tUsedMeta = aBaseMetaTileEntity.getMetaIDOffset(xDir + 1, 2, zDir);
-
 		this.mHeatingCapacity = 20000;
 
 		for (int i = -1; i < 2; i++) {
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCokeOven.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCokeOven.java
index c39bd2e..6eb26eb 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCokeOven.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialCokeOven.java
@@ -3,6 +3,7 @@ package gtPlusPlus.xmod.gregtech.common.tileentities.machines.multi;
 import java.util.ArrayList;
 import java.util.Arrays;
 
+import gregtech.api.GregTech_API;
 import gregtech.api.enums.TAE;
 import gregtech.api.enums.Textures;
 import gregtech.api.interfaces.ITexture;
@@ -76,6 +77,17 @@ extends GregtechMeta_MultiBlockBase {
 		return Recipe_GT.Gregtech_Recipe_Map.sCokeOvenRecipes;
 
 	}
+	
+	public void startSoundLoop(byte aIndex, double aX, double aY, double aZ) {
+        super.startSoundLoop(aIndex, aX, aY, aZ);
+        if (aIndex == 1) {
+            GT_Utility.doSoundAtClient((String) GregTech_API.sSoundList.get(Integer.valueOf(207)), 10, 1.0F, aX, aY, aZ);
+        }
+    }
+
+    public void startProcess() {
+        sendLoopStart((byte) 1);
+}
 
 	/* @Override
 	public boolean isCorrectMachinePart(ItemStack aStack) {
@@ -184,9 +196,6 @@ extends GregtechMeta_MultiBlockBase {
 	public boolean checkMachine(final IGregTechTileEntity aBaseMetaTileEntity, final ItemStack aStack) {
 		final int xDir = ForgeDirection.getOrientation(aBaseMetaTileEntity.getBackFacing()).offsetX;
 		final int zDir = ForgeDirection.getOrientation(aBaseMetaTileEntity.getBackFacing()).offsetZ;
-		int xr = aBaseMetaTileEntity.getXCoord();
-		int yr = aBaseMetaTileEntity.getYCoord();
-		int zr = aBaseMetaTileEntity.getZCoord();
 		this.mLevel = 0;
 		if (!aBaseMetaTileEntity.getAirOffset(xDir, 1, zDir)) {
 			return false;
@@ -224,20 +233,8 @@ extends GregtechMeta_MultiBlockBase {
 			}
 		}
 		for (int i = -1; i < 2; i++) {
-			xr = aBaseMetaTileEntity.getXCoord();
-			yr = aBaseMetaTileEntity.getYCoord();
-			zr = aBaseMetaTileEntity.getZCoord();
-			//Utils.LOG_WARNING("STEP 1 - x ["+xr+"]  y ["+yr+"]  z ["+zr+"]");
 			for (int j = -1; j < 2; j++) {
-				xr = aBaseMetaTileEntity.getXCoord();
-				yr = aBaseMetaTileEntity.getYCoord();
-				zr = aBaseMetaTileEntity.getZCoord();
-				//Utils.LOG_WARNING("STEP 2 - x ["+xr+"]  y ["+yr+"]  z ["+zr+"]");
 				if (((xDir + i) != 0) || ((zDir + j) != 0)) {
-					xr = aBaseMetaTileEntity.getXCoord();
-					yr = aBaseMetaTileEntity.getYCoord();
-					zr = aBaseMetaTileEntity.getZCoord();
-					//Utils.LOG_WARNING("STEP 3 - x ["+xr+"]  y ["+yr+"]  z ["+zr+"]");
 					final IGregTechTileEntity tTileEntity = aBaseMetaTileEntity.getIGregTechTileEntityOffset(xDir + i, 0, zDir + j);
 					if ((!this.addMaintenanceToMachineList(tTileEntity, TAE.GTPP_INDEX(1))) && (!this.addInputToMachineList(tTileEntity, TAE.GTPP_INDEX(1))) && (!this.addOutputToMachineList(tTileEntity, TAE.GTPP_INDEX(1))) && (!this.addEnergyInputToMachineList(tTileEntity, TAE.GTPP_INDEX(1)))) {
 						if (aBaseMetaTileEntity.getBlockOffset(xDir + i, 0, zDir + j) != ModBlocks.blockCasingsMisc) {
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialElectrolyzer.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialElectrolyzer.java
index 0930447..280af1d 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialElectrolyzer.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialElectrolyzer.java
@@ -18,7 +18,6 @@ import gregtech.api.util.GT_Utility;
 import gtPlusPlus.core.block.ModBlocks;
 import gtPlusPlus.core.lib.CORE;
 import gtPlusPlus.core.util.Utils;
-import gtPlusPlus.core.util.math.MathUtils;
 import gtPlusPlus.xmod.gregtech.api.gui.GUI_MultiMachine;
 import gtPlusPlus.xmod.gregtech.api.metatileentity.implementations.base.GregtechMeta_MultiBlockBase;
 import net.minecraft.block.Block;
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialThermalCentrifuge.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialThermalCentrifuge.java
index dce7d91..144784c 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialThermalCentrifuge.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialThermalCentrifuge.java
@@ -53,7 +53,7 @@ extends GregtechMeta_MultiBlockBase {
 				"Thermal processing Casings for the rest (8 at least!)",
 				"Causes " + (20 * getPollutionPerTick(null)) + " Pollution per second",
 				CORE.GT_Tooltip
-				
+
 		};
 	}
 
@@ -75,6 +75,17 @@ extends GregtechMeta_MultiBlockBase {
 		return GT_Recipe.GT_Recipe_Map.sThermalCentrifugeRecipes;
 	}
 
+	public void startSoundLoop(byte aIndex, double aX, double aY, double aZ) {
+		super.startSoundLoop(aIndex, aX, aY, aZ);
+		if (aIndex == 1) {
+			GT_Utility.doSoundAtClient((String) GregTech_API.sSoundList.get(Integer.valueOf(207)), 10, 1.0F, aX, aY, aZ);
+		}
+	}
+
+	public void startProcess() {
+		sendLoopStart((byte) 1);
+	}
+
 	@Override
 	public boolean isFacingValid(final byte aFacing) {
 		return aFacing > 1;
@@ -114,15 +125,15 @@ extends GregtechMeta_MultiBlockBase {
 							this.mEUt = (-this.mEUt);
 						}
 						this.mMaxProgresstime = Math.max(1, this.mMaxProgresstime);
-						
+
 						ItemStack mNewOutputs[] = new ItemStack[16];
-						
 
-						
+
+
 						for (int f=0;f<tRecipe.mOutputs.length;f++){
 							mNewOutputs[f] = tRecipe.getOutput(f);
 						}
-						
+
 						this.mOutputItems = mNewOutputs;
 						this.updateSlots();
 						return true;
-- 
1.9.5.msysgit.0

From 5ef4193b95b4345669c4d8bf5efc668b57447fb1 Mon Sep 17 00:00:00 2001
From: Alkalus <draknyte1@hotmail.com>
Date: Sat, 7 Oct 2017 14:21:43 +1000
Subject: [PATCH] + Made Alloy Blast Smelter actually check for a muffler. %
 Changed Industrial Electrolyzer controller texture. % Changed Large Sifter
 controller texture. $ Fixed names of custom IC2 cells. $ Fixed the empty item
 having an invalid texture.

---
 .../implementations/base/GregtechMeta_MultiBlockBase.java |   3 +++
 .../multi/GregtechMetaTileEntity_AlloyBlastSmelter.java   |  10 ++++++++++
 .../GregtechMetaTileEntity_IndustrialElectrolyzer.java    |   2 +-
 .../multi/GregtechMetaTileEntity_IndustrialSifter.java    |   2 +-
 src/resources/assets/ic2/lang/en_US.lang                  |   5 +++--
 .../assets/miscutils/textures/items/item.empty.png        | Bin 0 -> 179 bytes
 6 files changed, 18 insertions(+), 4 deletions(-)
 create mode 100644 src/resources/assets/miscutils/textures/items/item.empty.png

diff --git a/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/base/GregtechMeta_MultiBlockBase.java b/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/base/GregtechMeta_MultiBlockBase.java
index 5949d00..738b14e 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/base/GregtechMeta_MultiBlockBase.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/base/GregtechMeta_MultiBlockBase.java
@@ -1004,12 +1004,15 @@ public abstract class GregtechMeta_MultiBlockBase extends MetaTileEntity {
 			int tempTime = MathUtils.findPercentageOfInt(cloneRecipe.mDuration, (100-percentage));
 			cloneRecipe.mDuration = tempTime;
 			if (cloneRecipe.mDuration < originalTime){
+				Utils.LOG_INFO("Generated recipe with a smaller time. | "+originalTime+" | "+cloneRecipe.mDuration+" |");
 				return cloneRecipe;
 			}
 			else {
+				Utils.LOG_INFO("Did not generate recipe with a smaller time. | "+originalTime+" | "+cloneRecipe.mDuration+" |");
 				return tRecipe;
 			}
 		}
+		Utils.LOG_INFO("Error generating recipe, returning null.");
 		return null;
 
 
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_AlloyBlastSmelter.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_AlloyBlastSmelter.java
index 5e85120..be9236d 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_AlloyBlastSmelter.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_AlloyBlastSmelter.java
@@ -45,6 +45,7 @@ extends GT_MetaTileEntity_MultiBlockBase {
 				"Controller Block for the Alloy Blast Smelter", //Outputs 144mb fluid for every inputStack.stackSize; Time to use those hot metals.
 				"20% Faster than the Electric Blast Furnace",
 				"Allows Complex GT++ alloys to be created",
+				"Circuit for recipe goes in the Input Bus",
 				"Size: 3x3x4 (Hollow)",
 				"Controller (front middle at bottom)",
 				"16x Blast Smelter Heat Containment Coils (two middle Layers, hollow)",
@@ -207,6 +208,15 @@ extends GT_MetaTileEntity_MultiBlockBase {
 			}
 		}
 		this.mHeatingCapacity += 100 * (GT_Utility.getTier(this.getMaxInputVoltage()) - 2);
+
+		if (	this.mMaintenanceHatches.size() != 1 || 
+				this.mMufflerHatches.size() != 1 || 
+				this.mInputBusses.size() < 1 || 
+				this.mOutputHatches.size() < 1 || 
+				this.mEnergyHatches.size() != 1 )  {
+			return false;
+		}
+
 		return true;
 	}
 
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialElectrolyzer.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialElectrolyzer.java
index d73265e..0930447 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialElectrolyzer.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialElectrolyzer.java
@@ -63,7 +63,7 @@ extends GregtechMeta_MultiBlockBase {
 	@Override
 	public ITexture[] getTexture(final IGregTechTileEntity aBaseMetaTileEntity, final byte aSide, final byte aFacing, final byte aColorIndex, final boolean aActive, final boolean aRedstone) {
 		if (aSide == aFacing) {
-			return new ITexture[]{Textures.BlockIcons.CASING_BLOCKS[TAE.GTPP_INDEX(5)], new GT_RenderedTexture(aActive ? Textures.BlockIcons.STEAM_TURBINE_SIDE_ACTIVE : Textures.BlockIcons.STEAM_TURBINE_SIDE)};
+			return new ITexture[]{Textures.BlockIcons.CASING_BLOCKS[TAE.GTPP_INDEX(5)], new GT_RenderedTexture(aActive ? Textures.BlockIcons.OVERLAY_FRONT_VACUUM_FREEZER_ACTIVE : Textures.BlockIcons.OVERLAY_FRONT_VACUUM_FREEZER)};
 		}
 		return new ITexture[]{Textures.BlockIcons.CASING_BLOCKS[TAE.GTPP_INDEX(5)]};
 	}
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialSifter.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialSifter.java
index caab1cc..a6bfeab 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialSifter.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMetaTileEntity_IndustrialSifter.java
@@ -62,7 +62,7 @@ extends GregtechMeta_MultiBlockBase {
 	@Override
 	public ITexture[] getTexture(final IGregTechTileEntity aBaseMetaTileEntity, final byte aSide, final byte aFacing, final byte aColorIndex, final boolean aActive, final boolean aRedstone) {
 		if (aSide == aFacing) {
-			return new ITexture[]{Textures.BlockIcons.CASING_BLOCKS[TAE.GTPP_INDEX(21)], new GT_RenderedTexture(aActive ? TexturesGtBlock.Overlay_Machine_Diesel_Horizontal_Active : TexturesGtBlock.Overlay_Machine_Diesel_Horizontal)};
+			return new ITexture[]{Textures.BlockIcons.CASING_BLOCKS[TAE.GTPP_INDEX(21)], new GT_RenderedTexture(aActive ? Textures.BlockIcons.OVERLAY_FRONT_VACUUM_FREEZER_ACTIVE : Textures.BlockIcons.OVERLAY_FRONT_VACUUM_FREEZER)};
 		}
 		return new ITexture[]{Textures.BlockIcons.CASING_BLOCKS[TAE.GTPP_INDEX(21)]};
 	}
diff --git a/src/resources/assets/ic2/lang/en_US.lang b/src/resources/assets/ic2/lang/en_US.lang
index c018815..3fb5988 100644
--- a/src/resources/assets/ic2/lang/en_US.lang
+++ b/src/resources/assets/ic2/lang/en_US.lang
@@ -15,13 +15,14 @@ ic2.blockGenerator.3=MOAR ERROR POWA
 ic2.blockRTGenerator2=RTG POWARZ 2
 ic2.blockKineticGenerator2=KINETIC POWA 2
 
-ic2.HydrofluoricAcid=Hydrofluoric Acid Cell
+ic2.HydrofluoricAcid=Industrial Strength Hydrofluoric Acid Cell
 ic2.SulfurDioxide=Sulfur Dioxide Cell
 ic2.SulfuricApatite=Sulfuric Apatite Cell
 ic2.SulfurousAcid=Sulfurous Acid Cell
 
-ic2.HydrogenChloride=Hydrogen Chloride Cell
+ic2.HydrogenChloride=Industrial Strength Hydrogen Chloride Cell
 ic2.LithiumHydroxide=Lithium Hydroxide Cell
+ic2.SulfuricLithium=Sulfuric Lithium Cell
 
 ic2.UraniumHexaFluoride=Uranium Hexafluoride Cell
 ic2.ThoriumTetraFluoride=Thorium Tetrafluoride Cell
diff --git a/src/resources/assets/miscutils/textures/items/item.empty.png b/src/resources/assets/miscutils/textures/items/item.empty.png
new file mode 100644
index 0000000000000000000000000000000000000000..c054d35cce29a5f34779a57c8c2b7cc6eb72571f
GIT binary patch
literal 179
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`jKx9jP7LeL$-D$|SkfJR9T^xl
z_H+M9WCij$3p^r=85o30K$!7fntTONP_o1|q9iy!t)x7$D3zfgF*C13FE6!3!9>qM
z&(PdBZ+<dRk+P?YV~B-+GDFjUk)*c&4h%{j#}>2oNHH8*%ocE&;gjLvdIs|+t<#Tx
Sl9>Ti&fw|l=d#Wzp$P!(t}+4u

literal 0
HcmV?d00001

-- 
1.9.5.msysgit.0

From f7faf891fa1106a04f2e2b78f18aa5d161762db2 Mon Sep 17 00:00:00 2001
From: Alkalus <draknyte1@hotmail.com>
Date: Sat, 7 Oct 2017 13:04:05 +1000
Subject: [PATCH] $ Fixed custom IC2 cells. (HF, SO2, etc) % Changed how cells
 can be generated for further flexibility. - Removed logging from the LFTR.

---
 src/Java/gtPlusPlus/core/item/ModItems.java        |   6 +--
 .../core/item/base/cell/BaseItemCell.java          |  18 +++++++++
 src/Java/gtPlusPlus/core/util/Utils.java           |  29 ++++++++++++-
 .../gtPlusPlus/core/util/fluid/FluidUtils.java     |  33 ++++++++-------
 .../common/blocks/fluid/GregtechFluidHandler.java  |  45 +++++++++------------
 .../machines/multi/GregtechMTE_NuclearReactor.java |   2 +-
 src/resources/assets/ic2/lang/en_US.lang           |   4 ++
 .../ic2/textures/items/cell/LithiumHydroxide.png   | Bin 0 -> 289 bytes
 8 files changed, 89 insertions(+), 48 deletions(-)
 create mode 100644 src/resources/assets/ic2/textures/items/cell/LithiumHydroxide.png

diff --git a/src/Java/gtPlusPlus/core/item/ModItems.java b/src/Java/gtPlusPlus/core/item/ModItems.java
index 7527a5d..e134c78 100644
--- a/src/Java/gtPlusPlus/core/item/ModItems.java
+++ b/src/Java/gtPlusPlus/core/item/ModItems.java
@@ -444,10 +444,10 @@ public final class ModItems {
 
 			//Leagrisium
 			MaterialGenerator.generate(ALLOY.LEAGRISIUM);
-			
+
 			//Super Conductor
 			MaterialGenerator.generate(ALLOY.HG1223, false, false);
-			
+
 
 			//Must be the final Alloy to Generate
 			MaterialGenerator.generate(ALLOY.QUANTUM);
@@ -619,7 +619,7 @@ public final class ModItems {
 		//Vanadium
 		if (ItemUtils.getItemStackOfAmountFromOreDictNoBroken("plateVanadium", 1) == null){
 			itemPlateVanadium = new BaseItemPlate(MaterialUtils.generateMaterialFromGtENUM(Materials.Vanadium));
-			}
+		}
 
 		//EnderIO Resources
 		if ((LoadedMods.EnderIO || LOAD_ALL_CONTENT) && !CORE.GTNH){
diff --git a/src/Java/gtPlusPlus/core/item/base/cell/BaseItemCell.java b/src/Java/gtPlusPlus/core/item/base/cell/BaseItemCell.java
index c9340ba..f5fff65 100644
--- a/src/Java/gtPlusPlus/core/item/base/cell/BaseItemCell.java
+++ b/src/Java/gtPlusPlus/core/item/base/cell/BaseItemCell.java
@@ -6,9 +6,14 @@ import gtPlusPlus.core.item.base.BaseItemComponent;
 import gtPlusPlus.core.lib.CORE;
 import gtPlusPlus.core.material.Material;
 import gtPlusPlus.core.util.Utils;
+import gtPlusPlus.core.util.fluid.FluidUtils;
+import gtPlusPlus.core.util.item.ItemUtils;
+import ic2.core.Ic2Items;
 import net.minecraft.client.renderer.texture.IIconRegister;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.IIcon;
+import net.minecraftforge.fluids.Fluid;
+import net.minecraftforge.fluids.FluidContainerRegistry;
 
 public class BaseItemCell extends BaseItemComponent{
 
@@ -19,6 +24,19 @@ public class BaseItemCell extends BaseItemComponent{
 	public BaseItemCell(final Material material) {
 		super(material, BaseItemComponent.ComponentTypes.CELL);
 		this.fluidColour = (short[]) ((material == null) ? this.extraData : material.getRGBA());
+		//FluidContainerRegistry.registerFluidContainer(material.getFluid(1000), ItemUtils.getSimpleStack(this), Ic2Items.cell.copy());
+	}
+	
+	public BaseItemCell(final String unlocalName, final String localName, final short[] RGBa) {
+		super(unlocalName, localName, RGBa);
+		this.fluidColour = RGBa;
+		FluidContainerRegistry.registerFluidContainer(FluidUtils.getFluidStack(unlocalName.toLowerCase(), 0), ItemUtils.getSimpleStack(this), Ic2Items.cell.copy());
+	}
+	
+	public BaseItemCell(final String unlocalName, final String localName, final short[] RGBa, final Fluid cellFluid) {
+		super(unlocalName, localName, RGBa);
+		this.fluidColour = RGBa;
+		FluidContainerRegistry.registerFluidContainer(FluidUtils.getFluidStack(cellFluid, 1000), ItemUtils.getSimpleStack(this), Ic2Items.cell.copy());
 	}
 
 	@Override
diff --git a/src/Java/gtPlusPlus/core/util/Utils.java b/src/Java/gtPlusPlus/core/util/Utils.java
index 3b2bafe..6313738 100644
--- a/src/Java/gtPlusPlus/core/util/Utils.java
+++ b/src/Java/gtPlusPlus/core/util/Utils.java
@@ -523,7 +523,7 @@ public class Utils {
 			Utils.LOG_WARNING("7 "+methode.isAccessible());
 			final ItemStack temp = (ItemStack) methode.invoke(item, cellID++, yourName, new Block[0]);
 			Utils.LOG_WARNING("Successfully created "+temp.getDisplayName()+"s.");
-			FluidContainerRegistry.registerFluidContainer(FluidUtils.getFluidStack(s.toLowerCase(), 0), temp.copy(), Ic2Items.cell.copy());
+			FluidContainerRegistry.registerFluidContainer(FluidUtils.getFluidStack(s.toLowerCase(), 1000), temp.copy(), Ic2Items.cell.copy());
 			ItemUtils.addItemToOreDictionary(temp.copy(), "cell"+s);
 			return temp;
 		}
@@ -532,6 +532,33 @@ public class Utils {
 		}
 		return null;
 	}
+	
+	public static ItemStack createInternalNameAndFluidCellNoOreDict(final String s){
+		Utils.LOG_WARNING("1");
+		final InternalName yourName = EnumHelper.addEnum(InternalName.class, s, new Class[0], new Object[0]);
+		Utils.LOG_WARNING("2 "+yourName.name());
+		final ItemCell item = (ItemCell)Ic2Items.cell.getItem();
+		Utils.LOG_WARNING("3 "+item.getUnlocalizedName());
+		try
+		{
+			Utils.LOG_WARNING("4");
+			final Class<? extends ItemCell> clz = item.getClass();
+			Utils.LOG_WARNING("5 "+clz.getSimpleName());
+			final Method methode = clz.getDeclaredMethod("addCell", int.class, InternalName.class, Block[].class);
+			Utils.LOG_WARNING("6 "+methode.getName());
+			methode.setAccessible(true);
+			Utils.LOG_WARNING("7 "+methode.isAccessible());
+			final ItemStack temp = (ItemStack) methode.invoke(item, cellID++, yourName, new Block[0]);
+			Utils.LOG_WARNING("Successfully created "+temp.getDisplayName()+"s.");
+			FluidContainerRegistry.registerFluidContainer(FluidUtils.getFluidStack(s.toLowerCase(), 1000), temp.copy(), Ic2Items.cell.copy());
+			//ItemUtils.addItemToOreDictionary(temp.copy(), "cell"+s);
+			return temp;
+		}
+		catch(final Exception e){
+			e.printStackTrace();
+		}
+		return null;
+	}
 
 	public static String sanitizeString(final String input){
 		String temp;
diff --git a/src/Java/gtPlusPlus/core/util/fluid/FluidUtils.java b/src/Java/gtPlusPlus/core/util/fluid/FluidUtils.java
index 02835a9..009651d 100644
--- a/src/Java/gtPlusPlus/core/util/fluid/FluidUtils.java
+++ b/src/Java/gtPlusPlus/core/util/fluid/FluidUtils.java
@@ -4,6 +4,7 @@ import gregtech.api.enums.*;
 import gregtech.api.util.GT_LanguageManager;
 import gtPlusPlus.core.fluids.GenericFluid;
 import gtPlusPlus.core.item.base.BaseItemComponent;
+import gtPlusPlus.core.item.base.cell.BaseItemCell;
 import gtPlusPlus.core.item.base.cell.BaseItemPlasmaCell;
 import gtPlusPlus.core.material.Material;
 import gtPlusPlus.core.material.MaterialStack;
@@ -227,7 +228,7 @@ public class FluidUtils {
 	public static Fluid addGTFluidNonMolten(final String aName, final String aLocalized, final short[] aRGBa, final int aState, final long aTemperatureK, final ItemStack aFullContainer, final ItemStack aEmptyContainer, final int aFluidAmount) {
 		return addGTFluid("fluid."+aName, "fluid.autogenerated", aLocalized, aRGBa, aState, aTemperatureK, aFullContainer, aEmptyContainer, aFluidAmount);
 	}
-	
+
 	public static Fluid addGTFluidNoPrefix(final String aName, final String aLocalized, final short[] aRGBa, final int aState, final long aTemperatureK, final ItemStack aFullContainer, final ItemStack aEmptyContainer, final int aFluidAmount) {
 		return addGTFluid(aName, "fluid.autogenerated", aLocalized, aRGBa, aState, aTemperatureK, aFullContainer, aEmptyContainer, aFluidAmount);
 	}
@@ -485,19 +486,12 @@ public class FluidUtils {
 		Utils.LOG_INFO("FLUID GENERATION FAILED FOR "+localizedName);
 		return null;
 	}
-	
+
 	public final static Fluid generateFluidNoPrefix(final String unlocalizedName, final String localizedName, final int MeltingPoint, final short[] RGBA){
-		if ((FluidUtils.getFluidStack(unlocalizedName.toLowerCase(), 1) == null)/* && ((dustStack != null) || (dustStack2 != null))*/){
+		Fluid gtFluid;
+		if (FluidUtils.getFluidStack(unlocalizedName.toLowerCase(), 1) == null){
 			Utils.LOG_WARNING("Generating our own fluid.");
-
-			//Generate a Cell if we need to
-			if (ItemUtils.getItemStackOfAmountFromOreDictNoBroken("cell"+unlocalizedName, 1) == null){
-				@SuppressWarnings("unused")
-				final
-				Item temp = new BaseItemComponent(unlocalizedName, localizedName, RGBA);
-			}
-
-			final Fluid gtFluid = FluidUtils.addGTFluidNoPrefix(
+			gtFluid = FluidUtils.addGTFluidNoPrefix(
 					unlocalizedName,
 					localizedName,
 					RGBA,
@@ -506,11 +500,16 @@ public class FluidUtils {
 					ItemUtils.getItemStackOfAmountFromOreDictNoBroken("cell"+unlocalizedName, 1),
 					ItemList.Cell_Empty.get(1L, new Object[0]),
 					1000);
-
-			return gtFluid;
 		}
-		Utils.LOG_INFO("FLUID GENERATION FAILED FOR "+localizedName);
-		return null;	}
-	
+		else {
+			gtFluid = FluidUtils.getFluidStack(unlocalizedName.toLowerCase(), 1).getFluid();
+		}
+		//Generate a Cell if we need to
+		if (ItemUtils.getItemStackOfAmountFromOreDictNoBroken("cell"+unlocalizedName, 1) == null){
+			new BaseItemCell(unlocalizedName, localizedName, RGBA, gtFluid);
+		}
+		return gtFluid;
+	}
+
 
 }
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/fluid/GregtechFluidHandler.java b/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/fluid/GregtechFluidHandler.java
index 41ba4e2..e57a936 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/fluid/GregtechFluidHandler.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/blocks/fluid/GregtechFluidHandler.java
@@ -3,11 +3,15 @@ package gtPlusPlus.xmod.gregtech.common.blocks.fluid;
 import gregtech.api.enums.ItemList;
 import gregtech.api.enums.OrePrefixes;
 import gregtech.api.util.GT_OreDictUnificator;
+import gtPlusPlus.core.item.base.cell.BaseItemCell;
 import gtPlusPlus.core.lib.LoadedMods;
 import gtPlusPlus.core.util.Utils;
 import gtPlusPlus.core.util.fluid.FluidUtils;
 import gtPlusPlus.core.util.item.ItemUtils;
+import gtPlusPlus.core.util.recipe.RecipeUtils;
 import gtPlusPlus.xmod.gregtech.api.enums.GregtechOrePrefixes.GT_Materials;
+import net.minecraft.item.Item;
+import net.minecraft.item.ItemStack;
 
 public class GregtechFluidHandler {
 
@@ -47,26 +51,15 @@ public class GregtechFluidHandler {
 
 			FluidUtils.addFluid("hydrofluoricAcid", "Industrial Strength Hydrofluoric Acid", GT_Materials.HydrofluoricAcid, 1, 120, GT_OreDictUnificator.get(OrePrefixes.cell, GT_Materials.HydrofluoricAcid, 1L), ItemList.Cell_Empty.get(1L, new Object[0]), 1000);
 			generateIC2FluidCell("HydrofluoricAcid");
-
-			//FluidUtils.generateFluid("sulfurDioxide", "Sulfur Dioxide", GT_Materials.SulfurDioxide, 4, -100, GT_OreDictUnificator.get(OrePrefixes.cell, GT_Materials.SulfurDioxide, 1L), ItemList.Cell_Empty.get(1L, new Object[0]), 1000);
-			//generateIC2FluidCell("SulfurDioxide");
-			FluidUtils.generateFluidNoPrefix("SulfurDioxide", "High quality Sulfur Dioxide", 263, GT_Materials.SulfurDioxide.mRGBa);
-
+			
+			FluidUtils.generateFluidNoPrefix("SulfurDioxide", "High Quality Sulfur Dioxide", 263, GT_Materials.SulfurDioxide.mRGBa);
+						
 			FluidUtils.addFluid("sulfurousAcid", "Sulfurous Acid", GT_Materials.SulfurousAcid, 4, 75, GT_OreDictUnificator.get(OrePrefixes.cell, GT_Materials.SulfurousAcid, 1L), ItemList.Cell_Empty.get(1L, new Object[0]), 1000);
 			generateIC2FluidCell("SulfurousAcid");
 
 			FluidUtils.addFluid("sulfuricApatite", "Sulfuric Apatite Mix", GT_Materials.SulfuricApatite, 4, 500, GT_OreDictUnificator.get(OrePrefixes.cell, GT_Materials.SulfuricApatite, 1L), ItemList.Cell_Empty.get(1L, new Object[0]), 1000);
 			generateIC2FluidCell("SulfuricApatite");
 
-			//FluidUtils.addFluid("uraniumHexafluoride", "Uranium Hexafluoride", GT_Materials.UraniumHexaFluoride, 4, 200, GT_OreDictUnificator.get(OrePrefixes.cell, GT_Materials.UraniumHexaFluoride, 1L), ItemList.Cell_Empty.get(1L, new Object[0]), 1000);
-			//generateIC2FluidCell("Molten.UraniumHexaFluoride");
-
-			//FluidUtils.addFluid("uraniumTetrafluoride", "Uranium Tetrafluoride", GT_Materials.UraniumTetraFluoride, 4, 950, GT_OreDictUnificator.get(OrePrefixes.cell, GT_Materials.UraniumTetraFluoride, 1L), ItemList.Cell_Empty.get(1L, new Object[0]), 1000);
-			//generateIC2FluidCell("UraniumTetraFluoride");
-
-			//FluidUtils.addFluid("thoriumTetrafluoride", "Thorium Tetrafluoride", GT_Materials.ThoriumTetraFluoride, 4, 1250, GT_OreDictUnificator.get(OrePrefixes.cell, GT_Materials.ThoriumTetraFluoride, 1L), ItemList.Cell_Empty.get(1L, new Object[0]), 1000);
-			//generateIC2FluidCell("ThoriumTetraFluoride");
-
 
 			//Check for IHL Hydrogen Chloride
 			if (!LoadedMods.IHL || (ItemUtils.getItemStackOfAmountFromOreDict("cellHydrogenChloride", 1) == null)){
@@ -87,26 +80,26 @@ public class GregtechFluidHandler {
 			generateIC2FluidCell("SulfuricLithium");
 
 			FluidUtils.addFluid("lithiumHydroxide", "Lithium Hydroxide", GT_Materials.LithiumHydroxide, 4, 500, GT_OreDictUnificator.get(OrePrefixes.cell, GT_Materials.LithiumHydroxide, 1L), ItemList.Cell_Empty.get(1L, new Object[0]), 1000);
-			generateIC2FluidCell("SulfuricApatite");
-
-			/*Meta_GT_Proxy.addFluid("sulfuricApatite", "Sulfuric Apatite", GT_Materials.SulfuricApatite, 4, 500, GT_OreDictUnificator.get(OrePrefixes.cell, GT_Materials.SulfuricApatite, 1L), ItemList.Cell_Empty.get(1L, new Object[0]), 1000);
-			generateIC2FluidCell("SulfuricApatite");
-
-			Meta_GT_Proxy.addFluid("sulfuricApatite", "Sulfuric Apatite", GT_Materials.SulfuricApatite, 4, 500, GT_OreDictUnificator.get(OrePrefixes.cell, GT_Materials.SulfuricApatite, 1L), ItemList.Cell_Empty.get(1L, new Object[0]), 1000);
-			generateIC2FluidCell("SulfuricApatite");
-
-			Meta_GT_Proxy.addFluid("sulfuricApatite", "Sulfuric Apatite", GT_Materials.SulfuricApatite, 4, 500, GT_OreDictUnificator.get(OrePrefixes.cell, GT_Materials.SulfuricApatite, 1L), ItemList.Cell_Empty.get(1L, new Object[0]), 1000);
-			generateIC2FluidCell("SulfuricApatite");*/
+			generateIC2FluidCell("LithiumHydroxide");
 
 
 		}
 	}
 
-	private static void generateIC2FluidCell(final String fluidNameWithCaps){
+	private static ItemStack generateIC2FluidCell(final String fluidNameWithCaps){
+		Utils.LOG_INFO("Adding a Cell for "+fluidNameWithCaps);
+		if (LoadedMods.IndustrialCraft2){
+			return Utils.createInternalNameAndFluidCell(fluidNameWithCaps);
+		}
+		return null;
+	}
+	
+	private static ItemStack generateIC2FluidCellNoOreDict(final String fluidNameWithCaps){
 		Utils.LOG_INFO("Adding a Cell for "+fluidNameWithCaps);
 		if (LoadedMods.IndustrialCraft2){
-			Utils.createInternalNameAndFluidCell(fluidNameWithCaps);
+			return Utils.createInternalNameAndFluidCellNoOreDict(fluidNameWithCaps);
 		}
+		return null;
 	}
 
 }
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMTE_NuclearReactor.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMTE_NuclearReactor.java
index 274d76e..cc8f258 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMTE_NuclearReactor.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMTE_NuclearReactor.java
@@ -633,7 +633,7 @@ public class GregtechMTE_NuclearReactor extends GT_MetaTileEntity_MultiBlockBase
 			}
 			
 			if (MathUtils.randInt(1, 200) == 1){
-				Utils.LOG_INFO("Adding U233");
+				//Utils.LOG_INFO("Adding U233");
 				this.addOutput(NUCLIDE.getInstance().URANIUM233.getFluid(MathUtils.randInt(1, 10)));
 			}
 			
diff --git a/src/resources/assets/ic2/lang/en_US.lang b/src/resources/assets/ic2/lang/en_US.lang
index 259ae2e..c018815 100644
--- a/src/resources/assets/ic2/lang/en_US.lang
+++ b/src/resources/assets/ic2/lang/en_US.lang
@@ -19,6 +19,10 @@ ic2.HydrofluoricAcid=Hydrofluoric Acid Cell
 ic2.SulfurDioxide=Sulfur Dioxide Cell
 ic2.SulfuricApatite=Sulfuric Apatite Cell
 ic2.SulfurousAcid=Sulfurous Acid Cell
+
+ic2.HydrogenChloride=Hydrogen Chloride Cell
+ic2.LithiumHydroxide=Lithium Hydroxide Cell
+
 ic2.UraniumHexaFluoride=Uranium Hexafluoride Cell
 ic2.ThoriumTetraFluoride=Thorium Tetrafluoride Cell
 ic2.UraniumTetraFluoride=Uranium Tetrafluoride Cell
diff --git a/src/resources/assets/ic2/textures/items/cell/LithiumHydroxide.png b/src/resources/assets/ic2/textures/items/cell/LithiumHydroxide.png
new file mode 100644
index 0000000000000000000000000000000000000000..7fefe04c5ea873b4f400d6028970436ab83ef46b
GIT binary patch
literal 289
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!61|;P_|4#%`3dtTpz6=aistgPb%?u1b{{!il
z3=E|P3=FRl7#OT(FffScPl`Y422{&g;1OBOz`)H9!i<xCGA{)RN|v}rlmzFem6RtI
zr7{#GX6BXX<)xM=nCKbk8JZjC%})j@YVve(46*P(I_V<k0R<kHSWoo=7WX3VSYP*#
z$BPa&bVT?@OIdKJeD`U3HM!v2)tOP1vKc&zSEdN@ERj$?DN)SN*l_mV@2s^;WdZ~l
zoa$IkSWf0#|D9p&SGfjt3C7#PQ-V&Y#4TjEv0KD(z+EO>K=$K&(F<n;UcAs&zF-lo
dy<gHR_Mz>q<>Bd4?|`mh@O1TaS?83{1OVPRTloM0

literal 0
HcmV?d00001

-- 
1.9.5.msysgit.0

From 7a580b6c7e0869f64bd71d5d772e4fc82b49ad9e Mon Sep 17 00:00:00 2001
From: Technus <daniel112092@gmail.com>
Date: Thu, 5 Oct 2017 21:38:06 +0200
Subject: [PATCH] add todo

---
 .../xmod/gregtech/registration/gregtech/GregtechConduits.java           | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/Java/gtPlusPlus/xmod/gregtech/registration/gregtech/GregtechConduits.java b/src/Java/gtPlusPlus/xmod/gregtech/registration/gregtech/GregtechConduits.java
index 841bed6..0925079 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/registration/gregtech/GregtechConduits.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/registration/gregtech/GregtechConduits.java
@@ -61,7 +61,7 @@ public class GregtechConduits {
 			wireFactory("RedstoneAlloy", 32, BaseWireID+45, 0, 2, 1, new short[]{178,34,34, 0});
 		}
 
-		if(!GTNH) {//todo maybe enable one day
+		if(!GTNH) {//todo maybe enable one day // ID's shifted!!! by 1,2,3
 			customWireFactory(ALLOY.LEAGRISIUM, 512, BaseWireID + 57, 1, 2, 2);
 			customWireFactory(ELEMENT.getInstance().ZIRCONIUM, 128, BaseWireID + 69, 1, 2, 2);
 			customWireFactory(ALLOY.HG1223, 32768, BaseWireID + 81, 2, 8, 4);
-- 
1.9.5.msysgit.0

From 5e50e239f97952aca6962def165d759c6ad1d416 Mon Sep 17 00:00:00 2001
From: Alkalus <draknyte1@hotmail.com>
Date: Fri, 6 Oct 2017 02:50:30 +1000
Subject: [PATCH] $ .08 compliance fixes. % LFTR Changes. It now outputs U233
 on average every 10 seconds. % Updated LFTR tool-tip.

---
 .../projectile/EntitySulfuricAcidPotion.java       |  3 -
 .../core/item/base/itemblock/ItemBlockNBT.java     |  4 --
 .../GregtechMetaPipeEntity_Cable.java              |  6 +-
 .../machines/multi/GregtechMTE_NuclearReactor.java |  8 ++-
 .../gregtech/GregtechAdvancedMixer.java            | 76 ++++++++++++----------
 5 files changed, 53 insertions(+), 44 deletions(-)

diff --git a/src/Java/gtPlusPlus/core/entity/projectile/EntitySulfuricAcidPotion.java b/src/Java/gtPlusPlus/core/entity/projectile/EntitySulfuricAcidPotion.java
index 91034e0..6c2d173 100644
--- a/src/Java/gtPlusPlus/core/entity/projectile/EntitySulfuricAcidPotion.java
+++ b/src/Java/gtPlusPlus/core/entity/projectile/EntitySulfuricAcidPotion.java
@@ -1,12 +1,9 @@
 package gtPlusPlus.core.entity.projectile;
 
 import gregtech.api.util.GT_Utility;
-import gregtech.common.GT_Pollution;
-import gtPlusPlus.core.util.PollutionUtils;
 import gtPlusPlus.core.util.array.BlockPos;
 import gtPlusPlus.core.util.entity.EntityUtils;
 import gtPlusPlus.core.util.math.MathUtils;
-import gtPlusPlus.core.util.player.PlayerUtils;
 import net.minecraft.block.Block;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.projectile.EntityThrowable;
diff --git a/src/Java/gtPlusPlus/core/item/base/itemblock/ItemBlockNBT.java b/src/Java/gtPlusPlus/core/item/base/itemblock/ItemBlockNBT.java
index 69d0198..44ec66c 100644
--- a/src/Java/gtPlusPlus/core/item/base/itemblock/ItemBlockNBT.java
+++ b/src/Java/gtPlusPlus/core/item/base/itemblock/ItemBlockNBT.java
@@ -1,9 +1,6 @@
 package gtPlusPlus.core.item.base.itemblock;
 
-import gregtech.api.interfaces.tileentity.IGregTechTileEntity;
 import gregtech.api.util.GT_Utility;
-import gregtech.common.blocks.GT_Block_Ores_Abstract;
-import gregtech.common.blocks.GT_TileEntity_Ores;
 import gtPlusPlus.core.tileentities.base.TileEntityBase;
 import gtPlusPlus.core.util.Utils;
 import gtPlusPlus.core.util.player.PlayerUtils;
@@ -14,7 +11,6 @@ import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.item.ItemBlock;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
-import net.minecraft.tileentity.TileEntity;
 import net.minecraft.world.World;
 
 public class ItemBlockNBT extends ItemBlock {
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/GregtechMetaPipeEntity_Cable.java b/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/GregtechMetaPipeEntity_Cable.java
index e57be69..90cecb6 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/GregtechMetaPipeEntity_Cable.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/GregtechMetaPipeEntity_Cable.java
@@ -104,15 +104,15 @@ public class GregtechMetaPipeEntity_Cable extends GT_MetaPipeEntity_Cable implem
 			if (tThickNess < 0.749F)
 				return new ITexture[] {
 						new GT_RenderedTexture(wireMaterial.mIconSet.mTextures[69], this.vRGB),
-						new GT_RenderedTexture(Textures.BlockIcons.INSULATION_MEDIUM_PLUS,
+						new GT_RenderedTexture(Textures.BlockIcons.INSULATION_LARGE,
 								Dyes.getModulation(aColorIndex, Dyes.CABLE_INSULATION.mRGBa)) };
 			if (tThickNess < 0.874F)
 				return new ITexture[] {
 						new GT_RenderedTexture(wireMaterial.mIconSet.mTextures[69], this.vRGB),
-						new GT_RenderedTexture(Textures.BlockIcons.INSULATION_LARGE,
+						new GT_RenderedTexture(Textures.BlockIcons.INSULATION_HUGE,
 								Dyes.getModulation(aColorIndex, Dyes.CABLE_INSULATION.mRGBa)) };
 			return new ITexture[] { new GT_RenderedTexture(wireMaterial.mIconSet.mTextures[69], this.vRGB),
-					new GT_RenderedTexture(Textures.BlockIcons.INSULATION_HUGE,
+					new GT_RenderedTexture(Textures.BlockIcons.INSULATION_FULL,
 							Dyes.getModulation(aColorIndex, Dyes.CABLE_INSULATION.mRGBa)) };
 		}
 		return new ITexture[] { new GT_RenderedTexture(Textures.BlockIcons.INSULATION_FULL,
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMTE_NuclearReactor.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMTE_NuclearReactor.java
index 044904f..274d76e 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMTE_NuclearReactor.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMTE_NuclearReactor.java
@@ -66,6 +66,9 @@ public class GregtechMTE_NuclearReactor extends GT_MetaTileEntity_MultiBlockBase
 				"--Mufflers go in the top 3x3--",
 				"4x IV+ Mufflers",
 				"Causes " + (20 * getPollutionPerTick(null)) + " Pollution per second",
+				"Outputs U233 every 10 seconds, on average",
+				"Input Fluorine and Helium for bonus byproducts",
+				"Input Li2BeF4 and a molten salt as fuel.",
 				CORE.GT_Tooltip};
 	}
 
@@ -488,7 +491,6 @@ public class GregtechMTE_NuclearReactor extends GT_MetaTileEntity_MultiBlockBase
 									//this.mLastRecipe = aFuel;
 								}
 
-
 								this.fuelValue = aFuel.mSpecialValue;
 								this.fuelRemaining = hatchFluid1.amount; //Record available fuel
 
@@ -630,6 +632,10 @@ public class GregtechMTE_NuclearReactor extends GT_MetaTileEntity_MultiBlockBase
 				this.turnCasingActive(false);
 			}
 			
+			if (MathUtils.randInt(1, 200) == 1){
+				Utils.LOG_INFO("Adding U233");
+				this.addOutput(NUCLIDE.getInstance().URANIUM233.getFluid(MathUtils.randInt(1, 10)));
+			}
 			
 			if (this.mDynamoHatches != null) {
 				for (GT_MetaTileEntity_Hatch_Dynamo tHatch : this.mDynamoHatches) {
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/registration/gregtech/GregtechAdvancedMixer.java b/src/Java/gtPlusPlus/xmod/gregtech/registration/gregtech/GregtechAdvancedMixer.java
index e169a3c..a8c0e45 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/registration/gregtech/GregtechAdvancedMixer.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/registration/gregtech/GregtechAdvancedMixer.java
@@ -7,18 +7,19 @@ import gregtech.api.metatileentity.implementations.GT_MetaTileEntity_BasicMachin
 import gregtech.api.util.GT_Recipe;
 import gregtech.api.util.GT_Recipe.GT_Recipe_Map;
 import gregtech.api.util.Recipe_GT;
+import gtPlusPlus.core.lib.CORE;
 import gtPlusPlus.core.util.Utils;
 import gtPlusPlus.xmod.gregtech.api.enums.GregtechItemList;
 
 public class GregtechAdvancedMixer {
 
 	private static int mID = 851;
-	
+
 	public static void run(){
 		generateMixerRecipeMap();
 		run1();
 	}
-	
+
 	private static boolean generateMixerRecipeMap(){
 		if (Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes.mRecipeList.size() == 0){
 			GT_Recipe_Map oldMap = GT_Recipe.GT_Recipe_Map.sMixerRecipes;
@@ -28,7 +29,7 @@ public class GregtechAdvancedMixer {
 			for (final GT_Recipe g : x) {
 				Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes.add(g);
 			}
-			
+
 			if (Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes.mRecipeList.size() > 0){
 				return true;
 			}
@@ -36,11 +37,11 @@ public class GregtechAdvancedMixer {
 				Utils.LOG_INFO("Failed to generate "+ map.mUnlocalizedName +" recipes.");
 				return false;
 			}
-			
+
 		}		
 		return true;
 	}
-	
+
 	private static void run1(){
 		GregtechItemList.Machine_Advanced_LV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.01",
 				"Basic Combiner", 1, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
@@ -87,33 +88,42 @@ public class GregtechAdvancedMixer {
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
-		GregtechItemList.Machine_Advanced_LuV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.06",
-				"Mega Combiner I", 6, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
-				"MixerAdvanced.png", "", false, false, 0, "MIXER",
-				new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
-						ItemList.Machine_LuV_Mixer, Character.valueOf('E'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
-		GregtechItemList.Machine_Advanced_ZPM_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.07",
-				"Mega Combiner II", 7, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
-				"MixerAdvanced.png", "", false, false, 0, "MIXER",
-				new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
-						ItemList.Machine_ZPM_Mixer, Character.valueOf('E'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
-		GregtechItemList.Machine_Advanced_UV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.08",
-				"Ultra Combiner I", 8, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
-				"MixerAdvanced.png", "", false, false, 0, "MIXER",
-				new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
-						ItemList.Machine_UV_Mixer, Character.valueOf('E'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
+
+		if (CORE.MAIN_GREGTECH_5U_EXPERIMENTAL_FORK){
+			try {
+				GregtechItemList.Machine_Advanced_LuV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.06",
+						"Mega Combiner I", 6, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
+						"MixerAdvanced.png", "", false, false, 0, "MIXER",
+						new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
+								//ItemList.Machine_LuV_Mixer, Character.valueOf('E'),
+								ItemList.valueOf("Machine_LuV_Mixer"), Character.valueOf('E'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
+				GregtechItemList.Machine_Advanced_ZPM_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.07",
+						"Mega Combiner II", 7, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
+						"MixerAdvanced.png", "", false, false, 0, "MIXER",
+						new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
+								//ItemList.Machine_ZPM_Mixer, Character.valueOf('E'),
+								ItemList.valueOf("Machine_ZPM_Mixer"), Character.valueOf('E'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
+				GregtechItemList.Machine_Advanced_UV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.08",
+						"Ultra Combiner I", 8, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
+						"MixerAdvanced.png", "", false, false, 0, "MIXER",
+						new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
+								//ItemList.Machine_UV_Mixer, Character.valueOf('E'),
+								ItemList.valueOf("Machine_UV_Mixer"), Character.valueOf('E'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
+			}
+			catch (Throwable t){}
+		}
+
 	}
-	
 }
-- 
1.9.5.msysgit.0

From 5e50e239f97952aca6962def165d759c6ad1d416 Mon Sep 17 00:00:00 2001
From: Alkalus <draknyte1@hotmail.com>
Date: Fri, 6 Oct 2017 02:50:30 +1000
Subject: [PATCH] $ .08 compliance fixes. % LFTR Changes. It now outputs U233
 on average every 10 seconds. % Updated LFTR tool-tip.

---
 .../projectile/EntitySulfuricAcidPotion.java       |  3 -
 .../core/item/base/itemblock/ItemBlockNBT.java     |  4 --
 .../GregtechMetaPipeEntity_Cable.java              |  6 +-
 .../machines/multi/GregtechMTE_NuclearReactor.java |  8 ++-
 .../gregtech/GregtechAdvancedMixer.java            | 76 ++++++++++++----------
 5 files changed, 53 insertions(+), 44 deletions(-)

diff --git a/src/Java/gtPlusPlus/core/entity/projectile/EntitySulfuricAcidPotion.java b/src/Java/gtPlusPlus/core/entity/projectile/EntitySulfuricAcidPotion.java
index 91034e0..6c2d173 100644
--- a/src/Java/gtPlusPlus/core/entity/projectile/EntitySulfuricAcidPotion.java
+++ b/src/Java/gtPlusPlus/core/entity/projectile/EntitySulfuricAcidPotion.java
@@ -1,12 +1,9 @@
 package gtPlusPlus.core.entity.projectile;
 
 import gregtech.api.util.GT_Utility;
-import gregtech.common.GT_Pollution;
-import gtPlusPlus.core.util.PollutionUtils;
 import gtPlusPlus.core.util.array.BlockPos;
 import gtPlusPlus.core.util.entity.EntityUtils;
 import gtPlusPlus.core.util.math.MathUtils;
-import gtPlusPlus.core.util.player.PlayerUtils;
 import net.minecraft.block.Block;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.projectile.EntityThrowable;
diff --git a/src/Java/gtPlusPlus/core/item/base/itemblock/ItemBlockNBT.java b/src/Java/gtPlusPlus/core/item/base/itemblock/ItemBlockNBT.java
index 69d0198..44ec66c 100644
--- a/src/Java/gtPlusPlus/core/item/base/itemblock/ItemBlockNBT.java
+++ b/src/Java/gtPlusPlus/core/item/base/itemblock/ItemBlockNBT.java
@@ -1,9 +1,6 @@
 package gtPlusPlus.core.item.base.itemblock;
 
-import gregtech.api.interfaces.tileentity.IGregTechTileEntity;
 import gregtech.api.util.GT_Utility;
-import gregtech.common.blocks.GT_Block_Ores_Abstract;
-import gregtech.common.blocks.GT_TileEntity_Ores;
 import gtPlusPlus.core.tileentities.base.TileEntityBase;
 import gtPlusPlus.core.util.Utils;
 import gtPlusPlus.core.util.player.PlayerUtils;
@@ -14,7 +11,6 @@ import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.item.ItemBlock;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
-import net.minecraft.tileentity.TileEntity;
 import net.minecraft.world.World;
 
 public class ItemBlockNBT extends ItemBlock {
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/GregtechMetaPipeEntity_Cable.java b/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/GregtechMetaPipeEntity_Cable.java
index e57be69..90cecb6 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/GregtechMetaPipeEntity_Cable.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/api/metatileentity/implementations/GregtechMetaPipeEntity_Cable.java
@@ -104,15 +104,15 @@ public class GregtechMetaPipeEntity_Cable extends GT_MetaPipeEntity_Cable implem
 			if (tThickNess < 0.749F)
 				return new ITexture[] {
 						new GT_RenderedTexture(wireMaterial.mIconSet.mTextures[69], this.vRGB),
-						new GT_RenderedTexture(Textures.BlockIcons.INSULATION_MEDIUM_PLUS,
+						new GT_RenderedTexture(Textures.BlockIcons.INSULATION_LARGE,
 								Dyes.getModulation(aColorIndex, Dyes.CABLE_INSULATION.mRGBa)) };
 			if (tThickNess < 0.874F)
 				return new ITexture[] {
 						new GT_RenderedTexture(wireMaterial.mIconSet.mTextures[69], this.vRGB),
-						new GT_RenderedTexture(Textures.BlockIcons.INSULATION_LARGE,
+						new GT_RenderedTexture(Textures.BlockIcons.INSULATION_HUGE,
 								Dyes.getModulation(aColorIndex, Dyes.CABLE_INSULATION.mRGBa)) };
 			return new ITexture[] { new GT_RenderedTexture(wireMaterial.mIconSet.mTextures[69], this.vRGB),
-					new GT_RenderedTexture(Textures.BlockIcons.INSULATION_HUGE,
+					new GT_RenderedTexture(Textures.BlockIcons.INSULATION_FULL,
 							Dyes.getModulation(aColorIndex, Dyes.CABLE_INSULATION.mRGBa)) };
 		}
 		return new ITexture[] { new GT_RenderedTexture(Textures.BlockIcons.INSULATION_FULL,
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMTE_NuclearReactor.java b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMTE_NuclearReactor.java
index 044904f..274d76e 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMTE_NuclearReactor.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/common/tileentities/machines/multi/GregtechMTE_NuclearReactor.java
@@ -66,6 +66,9 @@ public class GregtechMTE_NuclearReactor extends GT_MetaTileEntity_MultiBlockBase
 				"--Mufflers go in the top 3x3--",
 				"4x IV+ Mufflers",
 				"Causes " + (20 * getPollutionPerTick(null)) + " Pollution per second",
+				"Outputs U233 every 10 seconds, on average",
+				"Input Fluorine and Helium for bonus byproducts",
+				"Input Li2BeF4 and a molten salt as fuel.",
 				CORE.GT_Tooltip};
 	}
 
@@ -488,7 +491,6 @@ public class GregtechMTE_NuclearReactor extends GT_MetaTileEntity_MultiBlockBase
 									//this.mLastRecipe = aFuel;
 								}
 
-
 								this.fuelValue = aFuel.mSpecialValue;
 								this.fuelRemaining = hatchFluid1.amount; //Record available fuel
 
@@ -630,6 +632,10 @@ public class GregtechMTE_NuclearReactor extends GT_MetaTileEntity_MultiBlockBase
 				this.turnCasingActive(false);
 			}
 			
+			if (MathUtils.randInt(1, 200) == 1){
+				Utils.LOG_INFO("Adding U233");
+				this.addOutput(NUCLIDE.getInstance().URANIUM233.getFluid(MathUtils.randInt(1, 10)));
+			}
 			
 			if (this.mDynamoHatches != null) {
 				for (GT_MetaTileEntity_Hatch_Dynamo tHatch : this.mDynamoHatches) {
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/registration/gregtech/GregtechAdvancedMixer.java b/src/Java/gtPlusPlus/xmod/gregtech/registration/gregtech/GregtechAdvancedMixer.java
index e169a3c..a8c0e45 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/registration/gregtech/GregtechAdvancedMixer.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/registration/gregtech/GregtechAdvancedMixer.java
@@ -7,18 +7,19 @@ import gregtech.api.metatileentity.implementations.GT_MetaTileEntity_BasicMachin
 import gregtech.api.util.GT_Recipe;
 import gregtech.api.util.GT_Recipe.GT_Recipe_Map;
 import gregtech.api.util.Recipe_GT;
+import gtPlusPlus.core.lib.CORE;
 import gtPlusPlus.core.util.Utils;
 import gtPlusPlus.xmod.gregtech.api.enums.GregtechItemList;
 
 public class GregtechAdvancedMixer {
 
 	private static int mID = 851;
-	
+
 	public static void run(){
 		generateMixerRecipeMap();
 		run1();
 	}
-	
+
 	private static boolean generateMixerRecipeMap(){
 		if (Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes.mRecipeList.size() == 0){
 			GT_Recipe_Map oldMap = GT_Recipe.GT_Recipe_Map.sMixerRecipes;
@@ -28,7 +29,7 @@ public class GregtechAdvancedMixer {
 			for (final GT_Recipe g : x) {
 				Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes.add(g);
 			}
-			
+
 			if (Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes.mRecipeList.size() > 0){
 				return true;
 			}
@@ -36,11 +37,11 @@ public class GregtechAdvancedMixer {
 				Utils.LOG_INFO("Failed to generate "+ map.mUnlocalizedName +" recipes.");
 				return false;
 			}
-			
+
 		}		
 		return true;
 	}
-	
+
 	private static void run1(){
 		GregtechItemList.Machine_Advanced_LV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.01",
 				"Basic Combiner", 1, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
@@ -87,33 +88,42 @@ public class GregtechAdvancedMixer {
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
-		GregtechItemList.Machine_Advanced_LuV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.06",
-				"Mega Combiner I", 6, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
-				"MixerAdvanced.png", "", false, false, 0, "MIXER",
-				new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
-						ItemList.Machine_LuV_Mixer, Character.valueOf('E'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
-		GregtechItemList.Machine_Advanced_ZPM_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.07",
-				"Mega Combiner II", 7, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
-				"MixerAdvanced.png", "", false, false, 0, "MIXER",
-				new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
-						ItemList.Machine_ZPM_Mixer, Character.valueOf('E'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
-		GregtechItemList.Machine_Advanced_UV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.08",
-				"Ultra Combiner I", 8, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
-				"MixerAdvanced.png", "", false, false, 0, "MIXER",
-				new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
-						ItemList.Machine_UV_Mixer, Character.valueOf('E'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
+
+		if (CORE.MAIN_GREGTECH_5U_EXPERIMENTAL_FORK){
+			try {
+				GregtechItemList.Machine_Advanced_LuV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.06",
+						"Mega Combiner I", 6, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
+						"MixerAdvanced.png", "", false, false, 0, "MIXER",
+						new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
+								//ItemList.Machine_LuV_Mixer, Character.valueOf('E'),
+								ItemList.valueOf("Machine_LuV_Mixer"), Character.valueOf('E'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
+				GregtechItemList.Machine_Advanced_ZPM_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.07",
+						"Mega Combiner II", 7, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
+						"MixerAdvanced.png", "", false, false, 0, "MIXER",
+						new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
+								//ItemList.Machine_ZPM_Mixer, Character.valueOf('E'),
+								ItemList.valueOf("Machine_ZPM_Mixer"), Character.valueOf('E'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
+				GregtechItemList.Machine_Advanced_UV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.08",
+						"Ultra Combiner I", 8, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
+						"MixerAdvanced.png", "", false, false, 0, "MIXER",
+						new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
+								//ItemList.Machine_UV_Mixer, Character.valueOf('E'),
+								ItemList.valueOf("Machine_UV_Mixer"), Character.valueOf('E'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
+								GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
+			}
+			catch (Throwable t){}
+		}
+
 	}
-	
 }
-- 
1.9.5.msysgit.0

From 233910242f55e99aca35631831a1164a798a3c6d Mon Sep 17 00:00:00 2001
From: Alkalus <draknyte1@hotmail.com>
Date: Fri, 6 Oct 2017 01:55:39 +1000
Subject: [PATCH] ^ Version bump.

---
 Recommended.txt                        | 2 +-
 build.gradle                           | 2 +-
 src/Java/gtPlusPlus/core/lib/CORE.java | 2 +-
 src/resources/mcmod.info               | 2 +-
 4 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/Recommended.txt b/Recommended.txt
index b9dcd6f..71365ec 100644
--- a/Recommended.txt
+++ b/Recommended.txt
@@ -1 +1 @@
-1.6.05-release
\ No newline at end of file
+1.6.07-release
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
index fbe23bd..3ea1425 100644
--- a/build.gradle
+++ b/build.gradle
@@ -40,7 +40,7 @@ sourceCompatibility = 1.7
 targetCompatibility = 1.7
 
 archivesBaseName = "GT-PlusPlus"
-version = "1.6.05-release"
+version = "1.6.07-release"
 minecraft.version = "1.7.10-10.13.4.1448-1.7.10"
 
 task sourceJar(type: Jar) {
diff --git a/src/Java/gtPlusPlus/core/lib/CORE.java b/src/Java/gtPlusPlus/core/lib/CORE.java
index cb1eaa3..384c051 100644
--- a/src/Java/gtPlusPlus/core/lib/CORE.java
+++ b/src/Java/gtPlusPlus/core/lib/CORE.java
@@ -34,7 +34,7 @@ public class CORE {
 
 	public static final String name = "GT++";
 	public static final String MODID = "miscutils";
-	public static final String VERSION = "1.6.05-release";
+	public static final String VERSION = "1.6.07-release";
 	public static String MASTER_VERSION = NetworkUtils.getContentFromURL("https://raw.githubusercontent.com/draknyte1/GTplusplus/master/Recommended.txt").toLowerCase();
 	public static String USER_COUNTRY = GeoUtils.determineUsersCountry();
 	public static boolean isModUpToDate = Utils.isModUpToDate();
diff --git a/src/resources/mcmod.info b/src/resources/mcmod.info
index a40ffc5..92c69a2 100644
--- a/src/resources/mcmod.info
+++ b/src/resources/mcmod.info
@@ -5,7 +5,7 @@
   "description": "Adds a few various Multiblocks, Machines, etc to Gregtech and a plethora of other mods (Nearly 30!)",
   "credits": "",
   "logoFile": "",
-  "version": "1.6.05-release",
+  "version": "1.6.07-release",
   "mcversion": "1.7.10",
   "url": "https://github.com/draknyte1/GTplusplus/wiki",
   "updateUrl": "https://github.com/draknyte1/GTplusplus/releases/latest",
-- 
1.9.5.msysgit.0

From 8817d0eea83e1acb01d0eb0277897e879fcd49f3 Mon Sep 17 00:00:00 2001
From: Alkalus <draknyte1@hotmail.com>
Date: Thu, 5 Oct 2017 20:30:57 +1000
Subject: [PATCH] + Added a custom recipe handler for the Advanced Combiner. +
 Added a Combined recipe for the HG-1223 Super Conductor. % Slight tweak to
 material generator.

---
 src/Java/gregtech/api/util/Recipe_GT.java          |  4 ++
 src/Java/gtPlusPlus/core/item/ModItems.java        |  2 +-
 .../core/material/MaterialGenerator.java           | 66 ++++++++++++----------
 .../gtPlusPlus/core/recipe/RECIPES_GREGTECH.java   | 19 +++++++
 .../interfaces/internal/IGregtech_RecipeAdder.java |  4 ++
 .../xmod/gregtech/recipes/GregtechRecipeAdder.java | 18 ++++++
 .../gregtech/GregtechAdvancedMixer.java            | 60 ++++++++++++++------
 7 files changed, 125 insertions(+), 48 deletions(-)

diff --git a/src/Java/gregtech/api/util/Recipe_GT.java b/src/Java/gregtech/api/util/Recipe_GT.java
index a8ce381..b63a259 100644
--- a/src/Java/gregtech/api/util/Recipe_GT.java
+++ b/src/Java/gregtech/api/util/Recipe_GT.java
@@ -265,6 +265,10 @@ public class Recipe_GT extends GT_Recipe{
 		//Cyclotron recipe map
 		public static final GT_Recipe_Map sCyclotronRecipes = new GT_Recipe_Map(new HashSet<GT_Recipe>(200), "gt.recipe.cyclotron", "COMET - Compact Cyclotron", null, RES_PATH_GUI + "basicmachines/BlastSmelter", 1, 1, 1, 0, 1, E, 1, E, true, true);
 
+		//Advanced Mixer
+		public static final GT_Recipe_Map sAdvancedMixerRecipes = new GT_Recipe_Map(new HashSet<GT_Recipe>(1000), "gt.recipe.advanced.mixer",
+				"Advanced Material Combiner", null, "gregtech:textures/gui/basicmachines/MixerAdvanced", 4, 4, 1, 0, 2, "", 1, "", true, true);
+		
 		
 		/**
 		 * HashMap of Recipes based on their Items
diff --git a/src/Java/gtPlusPlus/core/item/ModItems.java b/src/Java/gtPlusPlus/core/item/ModItems.java
index 99998d5..7527a5d 100644
--- a/src/Java/gtPlusPlus/core/item/ModItems.java
+++ b/src/Java/gtPlusPlus/core/item/ModItems.java
@@ -446,7 +446,7 @@ public final class ModItems {
 			MaterialGenerator.generate(ALLOY.LEAGRISIUM);
 			
 			//Super Conductor
-			MaterialGenerator.generate(ALLOY.HG1223, false);
+			MaterialGenerator.generate(ALLOY.HG1223, false, false);
 			
 
 			//Must be the final Alloy to Generate
diff --git a/src/Java/gtPlusPlus/core/material/MaterialGenerator.java b/src/Java/gtPlusPlus/core/material/MaterialGenerator.java
index 0204536..0b68488 100644
--- a/src/Java/gtPlusPlus/core/material/MaterialGenerator.java
+++ b/src/Java/gtPlusPlus/core/material/MaterialGenerator.java
@@ -96,8 +96,8 @@ public class MaterialGenerator {
 				} else {
 					Item temp;
 					if (generateEverything == true){
-					Block tempBlock;
-					tempBlock = new BlockBaseModular(unlocalizedName, materialName,BlockTypes.STANDARD, Colour);
+						Block tempBlock;
+						tempBlock = new BlockBaseModular(unlocalizedName, materialName,BlockTypes.STANDARD, Colour);
 					}
 					temp = new BaseItemIngot(matInfo);
 					temp = new BaseItemDust("itemDust"+unlocalizedName, materialName, matInfo, Colour, "Dust", materialTier, sRadiation);
@@ -110,8 +110,10 @@ public class MaterialGenerator {
 			}
 			else if (matInfo.getState() == MaterialState.LIQUID){
 				Item temp;
-				Block tempBlock;
-				tempBlock = new BlockBaseModular(unlocalizedName, materialName,BlockTypes.STANDARD, Colour);
+				if (generateEverything == true){
+					Block tempBlock;
+					tempBlock = new BlockBaseModular(unlocalizedName, materialName,BlockTypes.STANDARD, Colour);
+				}
 				temp = new BaseItemIngot(matInfo);
 				temp = new BaseItemDust("itemDust"+unlocalizedName, materialName, matInfo, Colour, "Dust", materialTier, sRadiation);
 				temp = new BaseItemDust("itemDustTiny"+unlocalizedName, materialName, matInfo, Colour, "Tiny", materialTier, sRadiation);
@@ -128,7 +130,9 @@ public class MaterialGenerator {
 			//Add A jillion Recipes - old code
 			RecipeGen_AlloySmelter.generateRecipes(matInfo);
 			RecipeGen_Assembler.generateRecipes(matInfo);
-			RecipeGen_BlastSmelter.generateARecipe(matInfo);
+			if (generateBlastSmelterRecipes){
+				RecipeGen_BlastSmelter.generateARecipe(matInfo);
+			}
 			RecipeGen_DustGeneration.generateRecipes(matInfo);
 			RecipeGen_Extruder.generateRecipes(matInfo);
 			RecipeGen_Fluids.generateRecipes(matInfo);
@@ -177,34 +181,34 @@ public class MaterialGenerator {
 	@SuppressWarnings("unused")
 	public static void generateNuclearMaterial(final Material matInfo, final boolean generatePlates){
 		try {
-		final String unlocalizedName = matInfo.getUnlocalizedName();
-		final String materialName = matInfo.getLocalizedName();
-		final short[] C = matInfo.getRGBA();
-		final int Colour = Utils.rgbtoHexValue(C[0], C[1], C[2]);
+			final String unlocalizedName = matInfo.getUnlocalizedName();
+			final String materialName = matInfo.getLocalizedName();
+			final short[] C = matInfo.getRGBA();
+			final int Colour = Utils.rgbtoHexValue(C[0], C[1], C[2]);
 
-		int sRadiation = 0;
-		if (matInfo.vRadiationLevel != 0){
-			sRadiation = matInfo.vRadiationLevel;
-		}
+			int sRadiation = 0;
+			if (matInfo.vRadiationLevel != 0){
+				sRadiation = matInfo.vRadiationLevel;
+			}
 
-		Item temp;
-		Block tempBlock;
-
-		tempBlock = new BlockBaseModular(unlocalizedName, materialName,BlockTypes.STANDARD, Colour);
-		temp = new BaseItemIngot(matInfo);
-		temp = new BaseItemDust("itemDust"+unlocalizedName, materialName, matInfo, Colour, "Dust", 3, sRadiation);
-		temp = new BaseItemDust("itemDustTiny"+unlocalizedName, materialName, matInfo, Colour, "Tiny", 2, sRadiation);
-		temp = new BaseItemDust("itemDustSmall"+unlocalizedName, materialName, matInfo, Colour, "Small", 1, sRadiation);
-		temp = new BaseItemNugget(matInfo);
-		temp = new BaseItemPlate(matInfo);
-		temp = new BaseItemPlateDouble(matInfo);
-
-		RecipeGen_Plates.generateRecipes(matInfo);
-		RecipeGen_Extruder.generateRecipes(matInfo);
-		RecipeGen_ShapedCrafting.generateRecipes(matInfo);
-		RecipeGen_Fluids.generateRecipes(matInfo);
-		RecipeGen_Assembler.generateRecipes(matInfo);
-		RecipeGen_DustGeneration.generateRecipes(matInfo, true);
+			Item temp;
+			Block tempBlock;
+
+			tempBlock = new BlockBaseModular(unlocalizedName, materialName,BlockTypes.STANDARD, Colour);
+			temp = new BaseItemIngot(matInfo);
+			temp = new BaseItemDust("itemDust"+unlocalizedName, materialName, matInfo, Colour, "Dust", 3, sRadiation);
+			temp = new BaseItemDust("itemDustTiny"+unlocalizedName, materialName, matInfo, Colour, "Tiny", 2, sRadiation);
+			temp = new BaseItemDust("itemDustSmall"+unlocalizedName, materialName, matInfo, Colour, "Small", 1, sRadiation);
+			temp = new BaseItemNugget(matInfo);
+			temp = new BaseItemPlate(matInfo);
+			temp = new BaseItemPlateDouble(matInfo);
+
+			RecipeGen_Plates.generateRecipes(matInfo);
+			RecipeGen_Extruder.generateRecipes(matInfo);
+			RecipeGen_ShapedCrafting.generateRecipes(matInfo);
+			RecipeGen_Fluids.generateRecipes(matInfo);
+			RecipeGen_Assembler.generateRecipes(matInfo);
+			RecipeGen_DustGeneration.generateRecipes(matInfo, true);
 		} catch (Throwable t){
 			Utils.LOG_INFO(""+matInfo.getLocalizedName()+" failed to generate.");
 		}
diff --git a/src/Java/gtPlusPlus/core/recipe/RECIPES_GREGTECH.java b/src/Java/gtPlusPlus/core/recipe/RECIPES_GREGTECH.java
index f627d28..24c1bd4 100644
--- a/src/Java/gtPlusPlus/core/recipe/RECIPES_GREGTECH.java
+++ b/src/Java/gtPlusPlus/core/recipe/RECIPES_GREGTECH.java
@@ -7,6 +7,7 @@ import gtPlusPlus.core.block.ModBlocks;
 import gtPlusPlus.core.item.ModItems;
 import gtPlusPlus.core.lib.CORE;
 import gtPlusPlus.core.lib.LoadedMods;
+import gtPlusPlus.core.material.ALLOY;
 import gtPlusPlus.core.material.nuclear.NUCLIDE;
 import gtPlusPlus.core.recipe.common.CI;
 import gtPlusPlus.core.util.Utils;
@@ -50,6 +51,7 @@ public class RECIPES_GREGTECH {
 		benderRecipes();
 		cyclotronRecipes();
 		blastSmelterRecipes();
+		advancedMixerRecipes();
 		addFuels();
 	}	
 
@@ -948,5 +950,22 @@ public class RECIPES_GREGTECH {
 				2040, 
 				500*20);		
 	}
+	
+	private static void advancedMixerRecipes(){
+		//HgBa2Ca2Cu3O8
+		CORE.RA.addMixerRecipe(
+				ItemUtils.getItemStackOfAmountFromOreDict("cellMercury", 1),
+				ItemUtils.getItemStackOfAmountFromOreDict("dustBarium", 2),
+				ItemUtils.getItemStackOfAmountFromOreDict("dustCalcium", 2),
+				ItemUtils.getItemStackOfAmountFromOreDict("dustCopper", 3),
+				FluidUtils.getFluidStack("oxygen", 8000),
+				null,
+				ItemUtils.getItemStackOfAmountFromOreDict("cellEmpty", 1),
+				ALLOY.HG1223.getDust(16),
+				null,
+				null,
+				30*20,
+				500);
+	}
 
 }
\ No newline at end of file
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/api/interfaces/internal/IGregtech_RecipeAdder.java b/src/Java/gtPlusPlus/xmod/gregtech/api/interfaces/internal/IGregtech_RecipeAdder.java
index 3a889fb..842f518 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/api/interfaces/internal/IGregtech_RecipeAdder.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/api/interfaces/internal/IGregtech_RecipeAdder.java
@@ -120,5 +120,9 @@ public interface IGregtech_RecipeAdder {
 	
 	public boolean addCyclotronRecipe(ItemStack aInput, FluidStack aFluidInput, ItemStack[] aOutputs,
 			FluidStack aFluidOutput, int[] aChances, int aDuration, int aEUt, int aSpecialValue);
+	
+	public boolean addMixerRecipe(ItemStack aInput1, ItemStack aInput2, ItemStack aInput3, ItemStack aInput4,
+			FluidStack aFluidInput, FluidStack aFluidOutput, ItemStack aOutput1, ItemStack aOutput2, ItemStack aOutput3, ItemStack aOutput4, int aDuration, int aEUt);
+		
 
 }
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/recipes/GregtechRecipeAdder.java b/src/Java/gtPlusPlus/xmod/gregtech/recipes/GregtechRecipeAdder.java
index c372335..795d176 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/recipes/GregtechRecipeAdder.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/recipes/GregtechRecipeAdder.java
@@ -375,5 +375,23 @@ public class GregtechRecipeAdder implements IGregtech_RecipeAdder {
 		}
 		return false;
 	}
+	
+	public boolean addMixerRecipe(ItemStack aInput1, ItemStack aInput2, ItemStack aInput3, ItemStack aInput4,
+			FluidStack aFluidInput, FluidStack aFluidOutput, ItemStack aOutput1, ItemStack aOutput2, ItemStack aOutput3, ItemStack aOutput4, int aDuration, int aEUt) {
+		if (((aInput1 == null) && (aFluidInput == null)) || ((aOutput1 == null) && (aFluidOutput == null))) {
+			return false;
+		}
+		if ((aOutput1 != null) && ((aDuration = GregTech_API.sRecipeFile.get("advancedmixer", aOutput1, aDuration)) <= 0)) {
+			return false;
+		}
+		if ((aFluidOutput != null) && ((aDuration = GregTech_API.sRecipeFile.get("advancedmixer",
+				aFluidOutput.getFluid().getName(), aDuration)) <= 0)) {
+			return false;
+		}
+		Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes.addRecipe(true, new ItemStack[] { aInput1, aInput2, aInput3, aInput4 },
+				new ItemStack[] { aOutput1, aOutput2, aOutput3, aOutput4 }, null, null, new FluidStack[] { aFluidInput },
+				new FluidStack[] { aFluidOutput }, aDuration, aEUt, 0);
+		return true;
+	}
 
 }
diff --git a/src/Java/gtPlusPlus/xmod/gregtech/registration/gregtech/GregtechAdvancedMixer.java b/src/Java/gtPlusPlus/xmod/gregtech/registration/gregtech/GregtechAdvancedMixer.java
index a09a967..e169a3c 100644
--- a/src/Java/gtPlusPlus/xmod/gregtech/registration/gregtech/GregtechAdvancedMixer.java
+++ b/src/Java/gtPlusPlus/xmod/gregtech/registration/gregtech/GregtechAdvancedMixer.java
@@ -1,8 +1,13 @@
 package gtPlusPlus.xmod.gregtech.registration.gregtech;
 
+import java.util.Collection;
+
 import gregtech.api.enums.ItemList;
 import gregtech.api.metatileentity.implementations.GT_MetaTileEntity_BasicMachine_GT_Recipe;
 import gregtech.api.util.GT_Recipe;
+import gregtech.api.util.GT_Recipe.GT_Recipe_Map;
+import gregtech.api.util.Recipe_GT;
+import gtPlusPlus.core.util.Utils;
 import gtPlusPlus.xmod.gregtech.api.enums.GregtechItemList;
 
 public class GregtechAdvancedMixer {
@@ -10,82 +15,105 @@ public class GregtechAdvancedMixer {
 	private static int mID = 851;
 	
 	public static void run(){
+		generateMixerRecipeMap();
 		run1();
 	}
 	
+	private static boolean generateMixerRecipeMap(){
+		if (Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes.mRecipeList.size() == 0){
+			GT_Recipe_Map oldMap = GT_Recipe.GT_Recipe_Map.sMixerRecipes;
+			GT_Recipe_Map map = Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes;
+			final Collection<GT_Recipe> x = oldMap.mRecipeList;
+			Utils.LOG_INFO("Generating " + map.mUnlocalizedName + " Recipes.");
+			for (final GT_Recipe g : x) {
+				Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes.add(g);
+			}
+			
+			if (Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes.mRecipeList.size() > 0){
+				return true;
+			}
+			else {
+				Utils.LOG_INFO("Failed to generate "+ map.mUnlocalizedName +" recipes.");
+				return false;
+			}
+			
+		}		
+		return true;
+	}
+	
 	private static void run1(){
 		GregtechItemList.Machine_Advanced_LV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.01",
-				"Basic Combiner", 1, "Indeed, It does blend!", GT_Recipe.GT_Recipe_Map.sMixerRecipes, 4, 4, 32000, 0, 1,
+				"Basic Combiner", 1, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
 				"MixerAdvanced.png", "", false, false, 0, "MIXER",
 				new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
 						ItemList.Machine_LV_Mixer, Character.valueOf('E'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.GLASS }).getStackForm(1L));
+						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
 		GregtechItemList.Machine_Advanced_MV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.02",
-				"Advanced Combiner I", 2, "Indeed, It does blend!", GT_Recipe.GT_Recipe_Map.sMixerRecipes, 4, 4, 32000, 0, 1,
+				"Advanced Combiner I", 2, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
 				"MixerAdvanced.png", "", false, false, 0, "MIXER",
 				new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
 						ItemList.Machine_MV_Mixer, Character.valueOf('E'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.GLASS }).getStackForm(1L));
+						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
 		GregtechItemList.Machine_Advanced_HV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.03",
-				"Advanced Combiner II", 3, "Indeed, It does blend!", GT_Recipe.GT_Recipe_Map.sMixerRecipes, 4, 4, 32000, 0, 1,
+				"Advanced Combiner II", 3, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
 				"MixerAdvanced.png", "", false, false, 0, "MIXER",
 				new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
 						ItemList.Machine_HV_Mixer, Character.valueOf('E'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.GLASS }).getStackForm(1L));
+						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
 		GregtechItemList.Machine_Advanced_EV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.04",
-				"Super Combiner I", 4, "Indeed, It does blend!", GT_Recipe.GT_Recipe_Map.sMixerRecipes, 4, 4, 32000, 0, 1,
+				"Super Combiner I", 4, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
 				"MixerAdvanced.png", "", false, false, 0, "MIXER",
 				new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
 						ItemList.Machine_EV_Mixer, Character.valueOf('E'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.GLASS }).getStackForm(1L));
+						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
 		GregtechItemList.Machine_Advanced_IV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.05",
-				"Super Combiner II", 5, "Indeed, It does blend!", GT_Recipe.GT_Recipe_Map.sMixerRecipes, 4, 4, 32000, 0, 1,
+				"Super Combiner II", 5, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
 				"MixerAdvanced.png", "", false, false, 0, "MIXER",
 				new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
 						ItemList.Machine_IV_Mixer, Character.valueOf('E'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.GLASS }).getStackForm(1L));
+						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
 		GregtechItemList.Machine_Advanced_LuV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.06",
-				"Mega Combiner I", 6, "Indeed, It does blend!", GT_Recipe.GT_Recipe_Map.sMixerRecipes, 4, 4, 32000, 0, 1,
+				"Mega Combiner I", 6, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
 				"MixerAdvanced.png", "", false, false, 0, "MIXER",
 				new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
 						ItemList.Machine_LuV_Mixer, Character.valueOf('E'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.GLASS }).getStackForm(1L));
+						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
 		GregtechItemList.Machine_Advanced_ZPM_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.07",
-				"Mega Combiner II", 7, "Indeed, It does blend!", GT_Recipe.GT_Recipe_Map.sMixerRecipes, 4, 4, 32000, 0, 1,
+				"Mega Combiner II", 7, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
 				"MixerAdvanced.png", "", false, false, 0, "MIXER",
 				new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
 						ItemList.Machine_ZPM_Mixer, Character.valueOf('E'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.GLASS }).getStackForm(1L));
+						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
 		GregtechItemList.Machine_Advanced_UV_Mixer.set(new GT_MetaTileEntity_BasicMachine_GT_Recipe(mID++, "advancedmachine.mixer.tier.08",
-				"Ultra Combiner I", 8, "Indeed, It does blend!", GT_Recipe.GT_Recipe_Map.sMixerRecipes, 4, 4, 32000, 0, 1,
+				"Ultra Combiner I", 8, "Indeed, It does blend!", Recipe_GT.Gregtech_Recipe_Map.sAdvancedMixerRecipes, 4, 4, 32000, 0, 1,
 				"MixerAdvanced.png", "", false, false, 0, "MIXER",
 				new Object[] { "GRG", "GEG", "CMC", Character.valueOf('M'),
 						ItemList.Machine_UV_Mixer, Character.valueOf('E'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('R'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.MOTOR, Character.valueOf('C'),
 						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.CIRCUIT, Character.valueOf('G'),
-						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.GLASS }).getStackForm(1L));
+						GT_MetaTileEntity_BasicMachine_GT_Recipe.X.PLATE }).getStackForm(1L));
 	}
 	
 }
-- 
1.9.5.msysgit.0

From 2026e996b3139bcb299f3bb77a487684fbba2f49 Mon Sep 17 00:00:00 2001
From: Alkalus <draknyte1@hotmail.com>
Date: Sun, 10 Sep 2017 09:27:37 +1000
Subject: [PATCH] $ Fixed java.lang.NoClassDefFoundError:
 com/mojang/realmsclient/gui/ChatFormatting.

---
 src/Java/gtPlusPlus/core/item/general/ItemAreaClear.java | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

diff --git a/src/Java/gtPlusPlus/core/item/general/ItemAreaClear.java b/src/Java/gtPlusPlus/core/item/general/ItemAreaClear.java
index 8e841aa..5a128bf 100644
--- a/src/Java/gtPlusPlus/core/item/general/ItemAreaClear.java
+++ b/src/Java/gtPlusPlus/core/item/general/ItemAreaClear.java
@@ -1,7 +1,5 @@
 package gtPlusPlus.core.item.general;
 
-import com.mojang.realmsclient.gui.ChatFormatting;
-
 import gtPlusPlus.core.creative.AddToCreativeTab;
 import gtPlusPlus.core.item.base.CoreItem;
 import gtPlusPlus.core.lib.CORE;
@@ -22,7 +20,7 @@ public class ItemAreaClear extends CoreItem {
 	public IIcon[] mIcon = new IIcon[1];
 
 	public ItemAreaClear() {
-		super("itemDebugClearing", AddToCreativeTab.tabMachines, 1, 100, ChatFormatting.OBFUSCATED+"F A M C Y   N A M E", EnumRarity.rare,
+		super("itemDebugClearing", AddToCreativeTab.tabMachines, 1, 100, EnumChatFormatting.OBFUSCATED+"F A M C Y   N A M E", EnumRarity.rare,
 				EnumChatFormatting.BOLD, false, null);
 	}
 
-- 
1.9.5.msysgit.0

